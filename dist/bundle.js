!function(t){var n={};function l(e){if(n[e])return n[e].exports;var u=n[e]={i:e,l:!1,exports:{}};return t[e].call(u.exports,u,u.exports,l),u.l=!0,u.exports}l.m=t,l.c=n,l.d=function(t,n,e){l.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,n){if(1&n&&(t=l(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(l.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)l.d(e,u,function(n){return t[n]}.bind(null,u));return e},l.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(n,"a",n),n},l.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},l.p="",l(l.s=1)}([function(t){t.exports=JSON.parse('{"debug":true,"res":{"imgs":["res/3.png","res/2.png"],"frames":[{"name":"building1","res":"res/3.png","area":{"width":151,"height":167}},{"name":"building2","res":"res/2.png","area":{"width":145,"height":356}}]},"def":{"0":{},"1":{"display":{"isometric":true,"frame":"building1","offset-y":-50}},"2":{"display":{"isometric":true,"frame":"building2","offset-y":-150}},"3":{"display":{"isometric":true,"frame":"building3"}}},"datas":[{"name":"tile1","tilemap":{"data":["0","0","2","0","0","0","2","0","0"],"columns":3,"grid-width":64,"grid-height":64}}]}')},function(t,n,l){"use strict";l.r(n);var e=l(0),u=new Map;var r=new Map;function i(t=0,n=null){r.set(t,n)}var s=new Map;function o(t=""){return s.get(t)}var c=null;function a(){return c}var h=null;function d(){return h}class f{constructor(t=0,n=0){this.x=t,this.y=n}}function g(t=0,n=0){return new f(t,n)}function p(t=null,n=0,l=0){t.x=n,t.y=l}function w(t=null,n=null){return g(t.x-n.x,t.y-n.y)}class x{constructor(t=0,n=0){this.x=t,this.y=n}}function m(t=0,n=0){return new x(t,n)}class y{constructor(t=0,n=0){this.width=t,this.height=n}}function v(t=0,n=0){return 0==t||0==n?(console.error("rect param error. width:%d, height:%d",t,n),null):new y(t,n)}function b(t=null){return t.width}function _(t=null){return t.height}function k(t=null){return.5*t.width}function C(t=null){return.5*t.height}class P{constructor(t=null,n=null){this.pos=t,this.offset=n}}function R(t=null){return g(t.pos.x+t.offset.x,t.pos.y+t.offset.y)}function M(t=0){return Math.trunc(t)}class O extends P{constructor(t=null,n=null,l=null){super(t,n),this.rect=l}}function I(t=null,n=null,l=null){return n=n||m(),new O(t,n,l)}function L(t=null){return t.rect}function S(t=null){return R(t)}function E(t=null){let n=S(t);return g(n.x-k(t.rect),n.y-C(t.rect))}class G{constructor(t=null,n=null){this.rectPosRel=t,this.screenOffset=n}}function T(t=null,n=0,l=0){let e=(t=t||{style:0,datas:[{x:0,y:0}]}).datas[0];return function(t=0,n=0,l=0,e=0){let u=I(g(t,n),null,v(l,e));return new G(u)}(e.x,e.y,n,l)}function j(t=null,n=null){return w(n,function(t=null){return E(t.rectPosRel)}(t))}function H(){!function(t=null){t.clear()}(d())}function W(t=null,n=null){!function(t=null,n=null,l=null){let e=j(t,n);!function(t=null,n=null,l=null){t.drawFrame(n,l)}(d(),e,l)}(a(),t,n)}function z(t=null,n=null){!function(t=null,n=null,l=null){let e=j(t,n);!function(t=null,n=null,l=null){t.drawRect(n,l)}(d(),e,l)}(a(),t,n)}function D(t=null,n=null){!function(t=null,n=null,l=null){let e=j(t,n),u=j(t,l);!function(t=null,n=null,l=null){t.drawLine(n,l)}(d(),e,u)}(a(),t,n)}function U(t=null,n=0){!function(t=null,n=null,l=0){let e=j(t,n);!function(t=null,n=null,l=0){t.drawCircle(n,l)}(d(),e,l)}(a(),t,n)}function F(t=null,n=0,l=!1){let e=t.get(n);return!e&&l&&console.error("can't find keyId: ",n),e}function B(t=null,n=null){if(!t||!n||!n.id)return console.error("error param."),!1;return!F(t,n.id)||(console.error("error id:%d is exist",n.id),!1)}function K(t=null,n=null){B(t,n)&&t.add(n)}function X(t=null,n=null,l=0){B(t,n)&&t.insert(n,l)}function Y(t=null,n=null){t&&n&&t.iterator(n)}class J{constructor(t=null,n=null,l=null,e=0){this.data=t,this.prep=n,this.next=l,this.order=e}}class N extends class{constructor(){}get(t=0){}firsr(){}last(){}size(){}add(t=null){}push(t=null){}insert(t=null,n=0){}pop(){}pull(){}remove(t=0){}iterator(t=null){}iteratorReverse(t=null){}iteratorCompare(t=null){}}{constructor(){super(),this.head=new J,this.tail=new J,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}get(t=0){let n=this._map.get(t);return n?n.data:null}first(){let t=this.head.next;return t==this.tail?null:t.data}last(){let t=this.tail.prep;return t==this.head?null:t.data}size(){return this._size}add(t=null){q(this,t,this.tail)}push(t=null){q(this,t,this.head.next)}insert(t=null,n=0){let l=this.head.next;for(;l!=this.tail&&!(n<l.order);)l=l.next;q(this,t,l,n)}pop(){A(this,this.head.next)}pull(){A(this,this.tail.prep)}remove(t=0){A(this,this._map.get(t))}iterator(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail&&!t(n.data);)n=n.next;for(this._lock=!1;this._delList.length>0;)Q(this,this._delList.pop())}iteratorReverse(t=null){this._lock=!0;let n=this.tail.prep;for(;n!=this.head&&!t(n.data);)n=n.prep;for(this._lock=!1;this._delList.length>0;)Q(this,this._delList.pop())}iteratorCompare(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail;){let l=n.next;for(;l!=this.tail&&!t(n.data,l.data);)l=l.next;n=n.next}for(this._lock=!1;this._delList.length>0;)Q(this,this._delList.pop())}}function q(t=null,n=null,l=null,e=0){let u=l.prep,r=new J(n,u,l,e);u.next=r,l.prep=r,t._map.set(n.id,r),t._size++}function A(t=null,n=null){!t||!n||t._size<=0||(t._lock?t._delList.push(n):Q(t,n))}function Q(t=null,n=null){t._map.delete(keyId);let l=n.prep,e=n.next;l.next=e,e.prep=l,t._size--}function V(){return new N}var Z=1;function $(){return Z++}class tt{constructor(t=0){this.entityId=t,this.id=t}}class nt{constructor(){this.id=$()}onStart(){}onUpdate(t=0){}onEnd(){}}class lt{constructor(t=0){this.id=t,this.order=t,this.list=V()}}var et=V();function ut(t=0){let n=F(et,t);return n||(n=function(t=0){let n=new lt(t);return X(et,n),n}(t)),n}class rt{constructor(t=null,n=0,l=0){this.data=t,this.width=n,this.height=l}}class it{constructor(t=0,n=0,l=0,e=0){this.x=t,this.y=n,this.width=l,this.height=e}}class st{constructor(t="",n=null,l=null){this.name=t,this.seg=n,this.bitmap=l}}function ot(t=null){return t.seg.width}function ct(t=null){return t.seg.height}class at extends tt{constructor(t=0,n=null){super(t),this.pos=n,this.vec=m()}}var ht=V();function dt(t=0){let n=F(ht,t);return n||function(t=0){let n=new at(t,g());return K(ht,n),n}(t)}function ft(t=0,n=0,l=0){p(function(t=0){return dt(t).pos}(t),n,l)}class gt extends tt{constructor(t=0,n=!1,l=0,e=1){super(t),this.isometrics=n,this.angle=l,this.scale=e}}var pt=V();function wt(t=0,n=null){let l=F(pt,t);return l||function(t=0,n=null){let l=new gt(t,(n=n||{}).isometrics,n.angle,n.scale);return K(pt,l),l}(t,n)}class xt extends class{constructor(){this.id=$()}}{constructor(t=null,n=null,l=null,e=0,u=0){super(),this.spriteFrame=t,this.renderCom=n,this.rectPosRel=l,this.order=e,this.layerOrder=u,this.isoPos=g()}}function mt(t=null){return t.spriteFrame}function yt(t=null){return R(t.rectPosRel)}function vt(t=null){return t.isoPos}class bt extends nt{onUpdate(t=0){H(),function(t=null){Y(et,n=>{Y(n.list,n=>{t(n)})})}(t=>{!function(t=null){return t.renderCom.isometrics}(t)?function(t=null){W(yt(t),mt(t)),function(t=null){z(yt(t),L(t.rectPosRel))}(t)}(t):function(t=null){(function(t=null){let n=function(t=null){return t.pos}(t.rectPosRel),l=function(t=null){return t.offset}(t.rectPosRel);p(t.isoPos,n.x-n.y+l.x,.5*(n.x+n.y)+l.y)})(t),W(vt(t),mt(t)),function(t=null){z(vt(t),L(t.rectPosRel))}(t)}(t)})}}var _t=null;var kt=V(),Ct=null;function Pt(t=!1){_t||(_t=new bt),Ct=_t}var Rt=0,Mt=0;function Ot(t=null){return t.width}function It(t=null){return.5*function(t=null){return t.getGridMapWidth()}(t)}function Lt(t=null){return.5*function(t=null){return t.getGridMapHeight()}(t)}function St(t=null,n=null){t.iterator(n)}class Et extends class{constructor(t=0,n=0,l=null){this.width=t,this.height=n,this.data=l}}{constructor(t=0,n=0,l=0,e=0,u=null){super(t,n,u),this.rowIndex=l,this.colIndex=e}}class Gt extends class{getData(t=null){}setData(t=null,n=null){}getGrid(t=null){}getGridMapWidth(){}getGridMapHeight(){}iterator(t=null){}}{constructor(t=null,n=0,l=0,e=0,u=0,r=null){super(),this.pos=t,this.rows=n,this.columns=l,this.gridWidth=e,this.gridHeight=u,this.grids=r}getData(t=null){let n=Tt(t,this);return n?n.data:null}setData(t=null,n=null){let l=Tt(t,this);l&&(l.data=n)}getGrid(t=null){return Tt(t,this)}getGridMapWidth(){return this.columns*this.gridWidth}getGridMapHeight(){return this.rows*this.gridHeight}iterator(t=null){this.grids.forEach(n=>{t(n)})}}function Tt(t=null,n=null){let l=w(t,n.pos);if(!function(t=0,n=0,l=null){return t>0&&t<l.getGridMapWidth()&&n>0&&n<l.getGridMapHeight()}(l.x,l.y,n))return null;let e=M(l.x/gridmap.gridWidth),u=M(l.y/gridmap.gridHeight);return gridmap.grids[u*gridmap.columns+e]}function jt(t=null){return g(t.pos.x-It(t),t.pos.y-Lt(t))}function Ht(t=null,n=null){let l=jt(t);return g(l.x+t.gridWidth*(n.colIndex+.5),l.y+t.gridHeight*(n.rowIndex+.5))}function Wt(t=null){!function(t=null){(t=Object.assign({columns:1,"grid-width":32,"grid-height":32,x:0,y:0,data:[0]},t))["grid-width"]=t["grid-width"]>0?t["grid-width"]:32,t["grid-height"]=t["grid-height"]>0?t["grid-height"]:32}(t);let n=t.columns,l=M(t.data.length/n);if(l*n!=t.data.length)return console.error("error param: len(grids): %d, columns: %d",t.data.length,n),null;let e=function(t=0,n=0,l=0,e=0,u=null){let r=[];for(let u=0;u<t;u++)for(let t=0;t<n;t++)r.push(new Et(l,e,u,t));return u=u||g(),new Gt(u,t,n,l,e,r)}(l,n,t["grid-width"],t["grid-height"],g(t.x,t.y));return St(e,l=>{!function(t=null,n=null){t.data=n}(l,function(t=""){return r.get(t)}(t.data[l.rowIndex*n+l.colIndex]))}),e}var zt=!1;var Dt=null,Ut=(new Date).getTime();var Ft=new Map;class Bt extends class{constructor(t=60){this.fps=t,this.tick=1e3/t}clear(){}drawFrame(t=null,n=null){}drawRect(t=null,n=null){}drawLine(t=null,n=null){}drawCircle(t=null,n=0){}loadResource(t="",n=null){}onKeyCallback(t=null,n=null){}onTouchCallback(t=null,n=null){}start(t=null){}}{constructor(t=60,n=null,l=null){super(t),this.canvas=n,this.ctx=l}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawFrame(t=null,n=null){this.ctx.drawImage(function(t=null){return t.bitmap.data}(n),function(t=null){return t.seg.x}(n),function(t=null){return t.seg.y}(n),ot(n),ct(n),t.x-function(t=null){return.5*t.seg.width}(n),t.y-function(t=null){return.5*t.seg.height}(n),ot(n),ct(n))}drawRect(t=null,n=null){this.ctx.strokeRect(t.x-k(n),t.y-C(n),b(n),_(n))}drawLine(t=null,n=null){let l=this.ctx;l.beginPath(),l.moveTo(t.x,t.y),l.lineTo(n.x,n.y),l.stroke()}drawCircle(t=null,n=0){let l=this.ctx;l.beginPath(),l.arc(t.x,t.y,n,0,2*Math.PI),l.stroke()}loadResource(t="",n=null){let l=new Image;l.src=t,l.onload=function(){n(l)}}onKeyCallback(t=null,n=null){!function(t=null,n=null){window.addEventListener("keydown",n=>{let l=n.keyCode;Ft.get(l)||(Ft.set(l,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let l=t.keyCode;Ft.delete(l),n(t.keyCode)})}(t,n)}onTouchCallback(t=null,n=null){!function(t=null,n=null,l=null){t.canvas.addEventListener("mousedown",t=>{let l=canvas.getBoundingClientRect(),e=t.clientX-l.left*(canvas.width/l.width),u=t.clientY-l.top*(canvas.height/l.height);n(e,u)}),t.canvas.addEventListener("mouseup",t=>{let n=canvas.getBoundingClientRect(),e=t.clientX-n.left*(canvas.width/n.width),u=t.clientY-n.top*(canvas.height/n.height);l(e,u)})}(this,t,n)}start(t=null){!function(t=0,n=null){zt=!1,setInterval(()=>{Dt=(new Date).getTime(),zt||n(Dt-Ut),Ut=(new Date).getTime()},1e3/t)}(this.fps,t)}}Math.PI;function Kt(t=null,n=null,l=null,e=null,u=null){let r=(t=t||{}).width;r=r||800;let i=t.height;i=i||800;let s=t.fps;s=s||60;let o=t.type;o=o||0;let c=null;switch(o){case 0:c=function(t=0,n=0,l=0){let e=document.getElementById("canvas");e.width=t,e.height=n;let u=e.getContext("2d");return u.strokeStyle="#0000ff",new Bt(l,e,u)}(r,i,s);break;default:return console.error("error type"),null}return n&&l&&c.onKeyCallback(n,l),e&&u&&c.onTouchCallback(e,u),c}function Xt(t=null,n=null,l=null,e=null,u=null){!function(t=null){h=t}(Kt(t))}function Yt(t=null){let n=t["screen-width"];n=n&&n>0?n:800;let l=t["screen-height"];l=l&&l>0?l:800,function(t=null){c=t}(T(t.camera,n,l)),Pt(t.debug),t.collide&&OpenCollider(t.collide),function(t=null){for(let n in t)i(n,t[n])}(t.def),function(t=null){if(!t||0==t.length)return;t.forEach(t=>{!function(t=null){let n=null;t.tilemap&&(n=Wt(t.tilemap));let l=t.name;l&&function(t="",n=null,l=!0){s.get(t)&&l?console.error("data: %s exists.",t):s.set(t,n)}(l,n)}(t)})}(t.datas)}function Jt(t=null,n=null,l=null){let e=t?t.imgs:null;e&&e.length>0?function(t=null,n=null,l=null,e=null){let r=0,i=new Map;t.forEach(s=>{!function(t=null,n="",l=null){t.loadResource(n,l)}(d(),s,o=>{i.set(s,function(t=null,n=0,l=0){return new rt(t,n,l)}(o,o.width,o.height)),r++,l&&l(s,r),t.length==r&&(!function(t=null,n=null){if(!t||0==t.length||!n)return;t.forEach(t=>{!function(t="",n=null,l=null){if(""==t||!n||!l)return console.error("error param."),null;let e=l.x,r=l.y,i=l.width,s=l.height;if(!i||!s)return console.err("error param."),null;let o=function(t="",n=null,l=0,e=0,u=0,r=0){let i=new it(l,e,u,r);return new st(t,i,n)}(t,n,e,r,i,s);!function(t="",n=null,l=!0){u.get(t)&&l?console.error("frame: %s exists.",t):u.set(t,n)}(t,o)}(t.name,n.get(t.res),t.area)})}(n,i),e&&e())})})}(e,t.frames,n,l):l()}function Nt(t=null,n=null){Xt(t=t||{}),Jt(t.res,null,()=>{Yt(t),function(t=null){Y(kt,t=>{t.onStart()}),Ct.onStart(),t.onStart(),function(t=null,n=null){t.start(n)}(d(),n=>{(Rt+=n)>=16&&(Rt-=16,t.onUpdate(n),Y(kt,t=>{t.onUpdate(n)})),(Mt+=n)>=41&&(Mt-=41,Ct.onUpdate(n))})}(n)})}function qt(t=null,n=0,l=1,e=0,u=null){let r=function(t=0,n=null,l=null,e=0,u=1){let r=wt(t),i=I(dt(t).pos,l,v(ot(n),ct(n)));return new xt(n,r,i,e,u)}(n,t,u,e,l);return function(t=null){X(ut(t.layerOrder).list,t,t.order)}(r),r}var At=Object.assign(e,{touchOnCallback:function(t=0,n=0){console.log(t,n)},touchOverCallback:function(t=0,n=0){}});class Qt{onStart(){let t=o("tile1");St(t,n=>{!function(t=null,n=null){let l=t.display;if(!l)return;let e=$();wt(e,{isometrics:!0}),ft(e,n.x,n.y),console.log(e,n.x,n.y),qt(function(t="",n=!0){let l=u.get(t);return l||(n?u.get("defalut"):null)}(l.frame),e,1,0,m(l["offset-x"],l["offset-y"]))}(function(t=null){return t.data}(n),Ht(t,n))})}onUpdate(t=0){(function(){let t=o("tile1");St(t,n=>{let l=Ht(t,n),e=function(t=null){return.5*Ot(t)}(n);Ot(n),function(t=null,n=0){let l=Vt(g(t.x-n,t.y-n)),e=Vt(g(t.x+n,t.y-n)),u=Vt(g(t.x-n,t.y+n)),r=Vt(g(t.x+n,t.y+n));D(l,e),D(e,r),D(r,u),D(u,l)}(l,e)})})(),U(g(),3),z(g(),v(function(t=null){return b(L(t.rectPosRel))}(a()),function(t=null){return _(L(t.rectPosRel))}(a())))}}function Vt(t=null){return g(t.x-t.y,.5*(t.x+t.y))}console.log(At),Nt(At,new Qt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,