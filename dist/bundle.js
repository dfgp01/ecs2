!function(t){var n={};function l(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=t,l.c=n,l.d=function(t,n,e){l.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,n){if(1&n&&(t=l(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(l.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)l.d(e,r,function(n){return t[n]}.bind(null,r));return e},l.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(n,"a",n),n},l.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},l.p="",l(l.s=1)}([function(t){t.exports={debug:!0,res:{imgs:["res/3.png","res/2.png"],frames:[{name:"building1",res:"res/3.png",area:{width:151,height:167}},{name:"building2",res:"res/2.png",area:{width:145,height:356}}]},def:{0:{},1:{display:{isometric:!0,frame:"building1","offset-y":-50}},2:{display:{isometric:!0,frame:"building2","offset-y":-150}},3:{display:{isometric:!0,frame:"building3"}}},datas:[{name:"tile1",tilemap:{data:["0","0","2","0","0","0","2","0","0"],columns:3,"grid-width":64,"grid-height":64}}]}},function(t,n,l){"use strict";l.r(n);var e=l(0);class r{constructor(){}get(t=0){}firsr(){}last(){}size(){}add(t=null){}push(t=null){}insert(t=null,n=0){}pop(){}pull(){}remove(t=0){}iterator(t=null){}iteratorReverse(t=null){}iteratorCompare(t=null){}}function u(t=null,n=0,l=!1){let e=t.get(n);return!e&&l&&console.error("can't find keyId: ",n),e}function i(t=null,n=null){if(!t||!n||!n.id)return console.error("error param."),!1;return!u(t,n.id)||(console.error("error id:%d is exist",n.id),!1)}function s(t=null,n=null){i(t,n)&&t.add(n)}function o(t=null,n=null,l=0){i(t,n)&&t.insert(n,l)}function c(t=null,n=null){t&&n&&t.iterator(n)}class a{constructor(t=null,n=null,l=null,e=0){this.data=t,this.prep=n,this.next=l,this.order=e}}class h extends r{constructor(){super(),this.head=new a,this.tail=new a,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}get(t=0){let n=this._map.get(t);return n?n.data:null}first(){let t=this.head.next;return t==this.tail?null:t.data}last(){let t=this.tail.prep;return t==this.head?null:t.data}size(){return this._size}add(t=null){d(this,t,this.tail)}push(t=null){d(this,t,this.head.next)}insert(t=null,n=0){let l=this.head.next;for(;l!=this.tail&&!(n<l.order);)l=l.next;d(this,t,l,n)}pop(){f(this,this.head.next)}pull(){f(this,this.tail.prep)}remove(t=0){f(this,this._map.get(t))}iterator(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail&&!t(n.data);)n=n.next;for(this._lock=!1;this._delList.length>0;)g(this,this._delList.pop())}iteratorReverse(t=null){this._lock=!0;let n=this.tail.prep;for(;n!=this.head&&!t(n.data);)n=n.prep;for(this._lock=!1;this._delList.length>0;)g(this,this._delList.pop())}iteratorCompare(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail;){let l=n.next;for(;l!=this.tail&&!t(n.data,l.data);)l=l.next;n=n.next}for(this._lock=!1;this._delList.length>0;)g(this,this._delList.pop())}}function d(t=null,n=null,l=null,e=0){let r=l.prep,u=new a(n,r,l,e);r.next=u,l.prep=u,t._map.set(n.id,u),t._size++}function f(t=null,n=null){!t||!n||t._size<=0||(t._lock?t._delList.push(n):g(t,n))}function g(t=null,n=null){t._map.delete(keyId);let l=n.prep,e=n.next;l.next=e,e.prep=l,t._size--}function p(){return new h}var w=new Map;var x=new Map;function m(t=0,n=null){x.set(t,n)}var y=new Map;function v(t=""){return y.get(t)}var _=null;function b(){return _}var k=null;function M(){return k}var P=new Map;function R(t=0){let n=P.get(t);return n||(n=p(),P.set(t,n)),n}class C{constructor(t=60){this.fps=t,this.tick=1e3/t}clear(){}drawFrame(t=null,n=null){}drawRect(t=null,n=null){}drawLine(t=null,n=null){}drawCircle(t=null,n=0){}loadResource(t="",n=null){}start(t=null){}}class I{constructor(t=0,n=0){this.x=t,this.y=n}}function L(t=0,n=0){return new I(t,n)}function O(t=null,n=0,l=0){t.x=n,t.y=l}function S(t=null,n=null){return L(t.x-n.x,t.y-n.y)}class E{constructor(t=0,n=0){this.x=t,this.y=n}}function G(t=0,n=0){return new E(t,n)}class j{constructor(t=0,n=0){this.width=t,this.height=n}}function H(t=0,n=0){return 0==t||0==n?(console.error("rect param error. width:%d, height:%d",t,n),null):new j(t,n)}function W(t=null){return t.width}function z(t=null){return t.height}function D(t=null){return.5*t.width}function T(t=null){return.5*t.height}class U{constructor(t=null,n=null){this.pos=t,this.offset=n}}function F(t=null){return L(t.pos.x+t.offset.x,t.pos.y+t.offset.y)}function B(t=0){return Math.trunc(t)}class X extends U{constructor(t=null,n=null,l=null){super(t,n),this.rect=l}}function Y(t=null,n=null,l=null){return n=n||G(),new X(t,n,l)}function q(t=null){return t.rect}function A(t=null){return F(t)}function J(t=null){let n=A(t);return L(n.x-D(t.rect),n.y-T(t.rect))}class K{constructor(t=null,n=null){this.rectPosRel=t,this.screenOffset=n}}function N(t=null,n=0,l=0){let e=(t=t||{style:0,datas:[{x:0,y:0}]}).datas[0];return function(t=0,n=0,l=0,e=0){let r=Y(L(t,n),null,H(l,e));return new K(r)}(e.x,e.y,n,l)}function Q(t=null,n=null){return S(n,function(t=null){return J(t.rectPosRel)}(t))}function V(){!function(t=null){t.clear()}(M())}function Z(t=null,n=null){!function(t=null,n=null,l=null){let e=Q(t,n);!function(t=null,n=null,l=null){t.drawFrame(n,l)}(M(),e,l)}(b(),t,n)}function $(t=null,n=null){!function(t=null,n=null,l=null){let e=Q(t,n);!function(t=null,n=null,l=null){t.drawRect(n,l)}(M(),e,l)}(b(),t,n)}function tt(t=null,n=null){!function(t=null,n=null,l=null){let e=Q(t,n),r=Q(t,l);!function(t=null,n=null,l=null){t.drawLine(n,l)}(M(),e,r)}(b(),t,n)}function nt(t=null,n=0){!function(t=null,n=null,l=0){let e=Q(t,n);!function(t=null,n=null,l=0){t.drawCircle(n,l)}(M(),e,l)}(b(),t,n)}var lt=1;function et(){return lt++}class rt{constructor(){this.id=et()}}class ut{constructor(t=0){this.entityId=t,this.id=t}}class it{constructor(){this.id=et()}onStart(){}onUpdate(t=0){}onEnd(){}}class st{constructor(t=0){this.id=t,this.order=t,this.list=p()}}var ot=p();function ct(t=0){let n=u(ot,t);return n||(n=function(t=0){let n=new st(t);return o(ot,n),n}(t)),n}class at{constructor(t=null,n=0,l=0){this.data=t,this.width=n,this.height=l}}class ht{constructor(t=0,n=0,l=0,e=0){this.x=t,this.y=n,this.width=l,this.height=e}}class dt{constructor(t="",n=null,l=null){this.name=t,this.seg=n,this.bitmap=l}}function ft(t=null){return t.seg.width}function gt(t=null){return t.seg.height}class pt extends ut{constructor(t=0,n=null){super(t),this.pos=n,this.vec=G()}}var wt=p();function xt(t=0){let n=u(wt,t);return n||function(t=0){let n=new pt(t,L());return s(wt,n),n}(t)}function mt(t=0,n=0,l=0){O(function(t=0){return xt(t).pos}(t),n,l)}class yt extends ut{constructor(t=0,n=!1,l=0,e=1){super(t),this.isometrics=n,this.angle=l,this.scale=e}}var vt=p();function _t(t=0,n=null){let l=u(vt,t);return l||function(t=0,n=null){let l=new yt(t,(n=n||{}).isometrics,n.angle,n.scale);return s(vt,l),l}(t,n)}class bt extends rt{constructor(t=null,n=null,l=null,e=0,r=0){super(),this.spriteFrame=t,this.renderCom=n,this.rectPosRel=l,this.order=e,this.layerOrder=r,this.isoPos=L()}}function kt(t=null){return t.spriteFrame}function Mt(t=null){return F(t.rectPosRel)}function Pt(t=null){return t.isoPos}class Rt extends it{onUpdate(t=0){V(),function(t=null){c(ot,n=>{c(n.list,n=>{t(n)})})}(t=>{!function(t=null){return t.renderCom.isometrics}(t)?function(t=null){Z(Mt(t),kt(t)),function(t=null){$(Mt(t),q(t.rectPosRel))}(t)}(t):function(t=null){(function(t=null){let n=function(t=null){return t.pos}(t.rectPosRel),l=function(t=null){return t.offset}(t.rectPosRel);O(t.isoPos,n.x-n.y+l.x,.5*(n.x+n.y)+l.y)})(t),Z(Pt(t),kt(t)),function(t=null){$(Pt(t),q(t.rectPosRel))}(t)}(t)})}}var Ct=null;var It=p(),Lt=null;function Ot(t=!1){Ct||(Ct=new Rt),Lt=Ct}var St=16,Et=41,Gt=0,jt=0;class Ht{constructor(t=0,n=0,l=null){this.width=t,this.height=n,this.data=l}}class Wt{getData(t=null){}setData(t=null,n=null){}getGrid(t=null){}getGridMapWidth(){}getGridMapHeight(){}iterator(t=null){}}function zt(t=null){return t.width}function Dt(t=null){return.5*function(t=null){return t.getGridMapWidth()}(t)}function Tt(t=null){return.5*function(t=null){return t.getGridMapHeight()}(t)}function Ut(t=null,n=null){t.iterator(n)}class Ft extends Ht{constructor(t=0,n=0,l=0,e=0,r=null){super(t,n,r),this.rowIndex=l,this.colIndex=e}}class Bt extends Wt{constructor(t=null,n=0,l=0,e=0,r=0,u=null){super(),this.pos=t,this.rows=n,this.columns=l,this.gridWidth=e,this.gridHeight=r,this.grids=u}getData(t=null){let n=Xt(t,this);return n?n.data:null}setData(t=null,n=null){let l=Xt(t,this);l&&(l.data=n)}getGrid(t=null){return Xt(t,this)}getGridMapWidth(){return this.columns*this.gridWidth}getGridMapHeight(){return this.rows*this.gridHeight}iterator(t=null){this.grids.forEach(n=>{t(n)})}}function Xt(t=null,n=null){let l=S(t,n.pos);if(!function(t=0,n=0,l=null){return t>0&&t<l.getGridMapWidth()&&n>0&&n<l.getGridMapHeight()}(l.x,l.y,n))return null;let e=B(l.x/gridmap.gridWidth),r=B(l.y/gridmap.gridHeight);return gridmap.grids[r*gridmap.columns+e]}function Yt(t=null){return L(t.pos.x-Dt(t),t.pos.y-Tt(t))}function qt(t=null,n=null){let l=Yt(t);return L(l.x+t.gridWidth*(n.colIndex+.5),l.y+t.gridHeight*(n.rowIndex+.5))}const At=1001,Jt=1002,Kt=1003,Nt=1004,Qt=2001;class Vt{constructor(t=0,n=null){this.type=t,this.data=n}}function Zt(t=0,n=null){return new Vt(t,n)}class $t extends rt{constructor(t=0,n=0){super(),this.type=t,this.order=n}handle(t=null){}}function tn(t=null){!function(t=null){(t=Object.assign({columns:1,"grid-width":32,"grid-height":32,x:0,y:0,data:[0]},t))["grid-width"]=t["grid-width"]>0?t["grid-width"]:32,t["grid-height"]=t["grid-height"]>0?t["grid-height"]:32}(t);let n=t.columns,l=B(t.data.length/n);if(l*n!=t.data.length)return console.error("error param: len(grids): %d, columns: %d",t.data.length,n),null;let e=function(t=0,n=0,l=0,e=0,r=null){let u=[];for(let r=0;r<t;r++)for(let t=0;t<n;t++)u.push(new Ft(l,e,r,t));return r=r||L(),new Bt(r,t,n,l,e,u)}(l,n,t["grid-width"],t["grid-height"],L(t.x,t.y));return Ut(e,l=>{!function(t=null,n=null){t.data=n}(l,function(t=""){return x.get(t)}(t.data[l.rowIndex*n+l.colIndex]))}),gn(Zt(Qt,e)),e}var nn=!1;var ln=null,en=(new Date).getTime();var rn=new Map;class un extends C{constructor(t=60,n=null,l=null){super(t),this.canvas=n,this.ctx=l}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawFrame(t=null,n=null){this.ctx.drawImage(function(t=null){return t.bitmap.data}(n),function(t=null){return t.seg.x}(n),function(t=null){return t.seg.y}(n),ft(n),gt(n),t.x-function(t=null){return.5*t.seg.width}(n),t.y-function(t=null){return.5*t.seg.height}(n),ft(n),gt(n))}drawRect(t=null,n=null){this.ctx.strokeRect(t.x-D(n),t.y-T(n),W(n),z(n))}drawLine(t=null,n=null){let l=this.ctx;l.beginPath(),l.moveTo(t.x,t.y),l.lineTo(n.x,n.y),l.stroke()}drawCircle(t=null,n=0){let l=this.ctx;l.beginPath(),l.arc(t.x,t.y,n,0,2*Math.PI),l.stroke()}loadResource(t="",n=null){let l=new Image;l.src=t,l.onload=function(){n(l)}}start(t=null){!function(t=0,n=null){nn=!1,setInterval(()=>{ln=(new Date).getTime(),nn||n(ln-en),en=(new Date).getTime()},1e3/t)}(this.fps,t)}}function sn(t=0,n=0,l=0){let e=document.getElementById("canvas");e.width=t,e.height=n;let r=e.getContext("2d");r.strokeStyle="#0000ff";let u=new un(l,e,r);return window.addEventListener("keydown",t=>{let n=t.keyCode;rn.get(n)||(rn.set(n,1),gn(Zt(At,n)))}),window.addEventListener("keyup",t=>{let n=t.keyCode;rn.delete(n),gn(Zt(Jt,n))}),function(t=null){t.addEventListener("mousedown",n=>{let l=t.getBoundingClientRect(),e=n.clientX-l.left*(t.width/l.width),r=n.clientY-l.top*(t.height/l.height);gn(Zt(Kt,L(e,r)))}),t.addEventListener("mouseup",n=>{let l=t.getBoundingClientRect(),e=n.clientX-l.left*(t.width/l.width),r=n.clientY-l.top*(t.height/l.height);gn(Zt(Nt,L(e,r)))})}(u.canvas),u}Math.PI;const on=0;function cn(t=null,n=null,l=null,e=null,r=null){!function(t=null){k=t}(function(t=null){let n=(t=t||{}).width;n=n||800;let l=t.height;l=l||800;let e=t.fps;e=e||60;let r=t.type,u=null;switch(r=r||on){case on:u=sn(n,l,e);break;default:return console.error("error type"),null}return u}(t))}function an(t=null){let n=t["screen-width"];n=n&&n>0?n:800;let l=t["screen-height"];l=l&&l>0?l:800,function(t=null){_=t}(N(t.camera,n,l)),Ot(t.debug),t.collide&&OpenCollider(t.collide),function(t=null){for(let n in t)m(n,t[n])}(t.def),function(t=null){if(!t||0==t.length)return;t.forEach(t=>{!function(t=null){let n=null;t.tilemap&&(n=tn(t.tilemap));let l=t.name;l&&function(t="",n=null,l=!0){y.get(t)&&l?console.error("data: %s exists.",t):y.set(t,n)}(l,n)}(t)})}(t.datas)}function hn(t=null,n=null,l=null){let e=t?t.imgs:null;e&&e.length>0?function(t=null,n=null,l=null,e=null){let r=0,u=new Map;t.forEach(i=>{!function(t=null,n="",l=null){t.loadResource(n,l)}(M(),i,s=>{u.set(i,function(t=null,n=0,l=0){return new at(t,n,l)}(s,s.width,s.height)),r++,l&&l(i,r),t.length==r&&(!function(t=null,n=null){if(!t||0==t.length||!n)return;t.forEach(t=>{!function(t="",n=null,l=null){if(""==t||!n||!l)return console.error("error param."),null;let e=l.x,r=l.y,u=l.width,i=l.height;if(!u||!i)return console.err("error param."),null;let s=function(t="",n=null,l=0,e=0,r=0,u=0){let i=new ht(l,e,r,u);return new dt(t,i,n)}(t,n,e,r,u,i);!function(t="",n=null,l=!0){w.get(t)&&l?console.error("frame: %s exists.",t):w.set(t,n)}(t,s)}(t.name,n.get(t.res),t.area)})}(n,u),e&&e())})})}(e,t.frames,n,l):l()}function dn(t=null,n=null){cn(t=t||{}),hn(t.res,null,()=>{an(t),function(t=null){c(It,t=>{t.onStart()}),Lt.onStart(),t.onStart(),function(t=null,n=null){t.start(n)}(M(),n=>{(Gt+=n)>=St&&(Gt-=St,t.onUpdate(n),c(It,t=>{t.onUpdate(n)})),(jt+=n)>=Et&&(jt-=Et,Lt.onUpdate(n))})}(n)})}function fn(t=null){o(R(t.type),t,t.order)}function gn(t=null){c(R(t.type),n=>{n.handle(t)})}function pn(t=null,n=0,l=1,e=0,r=null){let u=function(t=0,n=null,l=null,e=0,r=1){let u=_t(t),i=Y(xt(t).pos,l,H(ft(n),gt(n)));return new bt(n,u,i,e,r)}(n,t,r,e,l);return function(t=null){o(ct(t.layerOrder).list,t,t.order)}(u),u}var wn=Object.assign(e,{touchOnCallback:function(t=0,n=0){console.log(t,n)},touchOverCallback:function(t=0,n=0){}});class xn{onStart(){let t=v("tile1");Ut(t,n=>{!function(t=null,n=null){let l=t.display;if(!l)return;let e=et();_t(e,{isometrics:!0}),mt(e,n.x,n.y),pn(function(t="",n=!0){let l=w.get(t);return l||(n?w.get("defalut"):null)}(l.frame),e,1,0,G(l["offset-x"],l["offset-y"]))}(function(t=null){return t.data}(n),qt(t,n))})}onUpdate(t=0){(function(){let t=v("tile1");Ut(t,n=>{let l=qt(t,n),e=function(t=null){return.5*zt(t)}(n);zt(n),function(t=null,n=0){let l=mn(L(t.x-n,t.y-n)),e=mn(L(t.x+n,t.y-n)),r=mn(L(t.x-n,t.y+n)),u=mn(L(t.x+n,t.y+n));tt(l,e),tt(e,u),tt(u,r),tt(r,l)}(l,e)})})(),nt(L(),3),$(L(),H(function(t=null){return W(q(t.rectPosRel))}(b()),function(t=null){return z(q(t.rectPosRel))}(b())))}}function mn(t=null){return L(t.x-t.y,.5*(t.x+t.y))}class yn extends $t{constructor(t=0){super(At,t)}handle(t=null){console.log(t.data)}}class vn extends $t{constructor(t=0){super(Kt,t)}handle(t=null){console.log(t.data.x,t.data.y)}}console.log(wn),fn(new yn),fn(new vn),dn(wn,new xn)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,