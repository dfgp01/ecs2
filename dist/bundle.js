!function(t){var n={};function l(e){if(n[e])return n[e].exports;var u=n[e]={i:e,l:!1,exports:{}};return t[e].call(u.exports,u,u.exports,l),u.l=!0,u.exports}l.m=t,l.c=n,l.d=function(t,n,e){l.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,n){if(1&n&&(t=l(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(l.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)l.d(e,u,function(n){return t[n]}.bind(null,u));return e},l.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(n,"a",n),n},l.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},l.p="",l(l.s=1)}([function(t){t.exports=JSON.parse('{"debug":true,"res":{"imgs":["res/3.png"],"frames":[{"name":"building1","res":"res/3.png","area":{"width":151,"height":167}}]},"def":{"0":{},"1":{"display":{"isometric":true,"frame":"building1"}},"2":{"display":{"isometric":true,"frame":"building2"}},"3":{"display":{"isometric":true,"frame":"building3"}}},"datas":[{"name":"tile1","tilemap":{"data":["0","0","0","0","1","0","0","0","0"],"columns":3,"grid-width":64,"grid-height":64}}]}')},function(t,n,l){"use strict";l.r(n);var e=l(0),u=new Map;var r=new Map;function i(t=0,n=null){r.set(t,n)}var s=new Map;function o(t=""){return s.get(t)}var c=null;function a(){return c}var h=null;function d(){return h}class f{constructor(t=0,n=0){this.x=t,this.y=n}}function g(t=0,n=0){return new f(t,n)}function p(t=null,n=0,l=0){t.x=n,t.y=l}function w(t=null,n=null){return g(t.x-n.x,t.y-n.y)}class x{constructor(t=0,n=0){this.x=t,this.y=n}}function m(t=0,n=0){return new x(t,n)}class y{constructor(t=0,n=0){this.width=t,this.height=n}}function v(t=0,n=0){return 0==t||0==n?(console.error("rect param error. width:%d, height:%d",t,n),null):new y(t,n)}function b(t=null){return t.width}function _(t=null){return t.height}function k(t=null){return.5*t.width}function C(t=null){return.5*t.height}class M{constructor(t=null,n=null){this.pos=t,this.offset=n}}function P(t=null){return g(t.pos.x+t.offset.x,t.pos.y+t.offset.y)}function R(t=0){return Math.trunc(t)}class O extends M{constructor(t=null,n=null,l=null){super(t,n),this.rect=l}}function I(t=null,n=null,l=null){return n=n||m(),new O(t,n,l)}function L(t=null){return t.rect}function S(t=null){return P(t)}function E(t=null){let n=S(t);return g(n.x-k(t.rect),n.y-C(t.rect))}class G{constructor(t=null,n=null){this.rectPosRel=t,this.screenOffset=n}}function T(t=null,n=0,l=0){let e=(t=t||{style:0,datas:[{x:0,y:0}]}).datas[0];return function(t=0,n=0,l=0,e=0){let u=I(g(t,n),null,v(l,e));return new G(u)}(e.x,e.y,n,l)}function j(t=null,n=null){return w(n,function(t=null){return E(t.rectPosRel)}(t))}function H(){!function(t=null){t.clear()}(d())}function W(t=null,n=null){!function(t=null,n=null,l=null){let e=j(t,n);!function(t=null,n=null,l=null){t.drawFrame(n,l)}(d(),e,l)}(a(),t,n)}function z(t=null,n=null){!function(t=null,n=null,l=null){let e=j(t,n);!function(t=null,n=null,l=null){t.drawRect(n,l)}(d(),e,l)}(a(),t,n)}function D(t=null,n=null){!function(t=null,n=null,l=null){let e=j(t,n),u=j(t,l);!function(t=null,n=null,l=null){t.drawLine(n,l)}(d(),e,u)}(a(),t,n)}function U(t=null,n=0){!function(t=null,n=null,l=0){let e=j(t,n);!function(t=null,n=null,l=0){t.drawCircle(n,l)}(d(),e,l)}(a(),t,n)}function F(t=null,n=0,l=!1){let e=t.get(n);return!e&&l&&console.error("can't find keyId: ",n),e}function B(t=null,n=null){if(!t||!n||!n.id)return console.error("error param."),!1;return!F(t,n.id)||(console.error("error id:%d is exist",n.id),!1)}function K(t=null,n=null){B(t,n)&&t.add(n)}function X(t=null,n=null,l=0){B(t,n)&&t.insert(n,l)}function Y(t=null,n=null){t&&n&&t.iterator(n)}class J{constructor(t=null,n=null,l=null,e=0){this.data=t,this.prep=n,this.next=l,this.order=e}}class N extends class{constructor(){}get(t=0){}firsr(){}last(){}size(){}add(t=null){}push(t=null){}insert(t=null,n=0){}pop(){}pull(){}remove(t=0){}iterator(t=null){}iteratorReverse(t=null){}iteratorCompare(t=null){}}{constructor(){super(),this.head=new J,this.tail=new J,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}get(t=0){let n=this._map.get(t);return n?n.data:null}first(){let t=this.head.next;return t==this.tail?null:t.data}last(){let t=this.tail.prep;return t==this.head?null:t.data}size(){return this._size}add(t=null){q(this,t,this.tail)}push(t=null){q(this,t,this.head.next)}insert(t=null,n=0){let l=this.head.next;for(;l!=this.tail&&!(n<l.order);)l=l.next;q(this,t,l,n)}pop(){A(this,this.head.next)}pull(){A(this,this.tail.prep)}remove(t=0){A(this,this._map.get(t))}iterator(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail&&!t(n.data);)n=n.next;for(this._lock=!1;this._delList.length>0;)Q(this,this._delList.pop())}iteratorReverse(t=null){this._lock=!0;let n=this.tail.prep;for(;n!=this.head&&!t(n.data);)n=n.prep;for(this._lock=!1;this._delList.length>0;)Q(this,this._delList.pop())}iteratorCompare(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail;){let l=n.next;for(;l!=this.tail&&!t(n.data,l.data);)l=l.next;n=n.next}for(this._lock=!1;this._delList.length>0;)Q(this,this._delList.pop())}}function q(t=null,n=null,l=null,e=0){let u=l.prep,r=new J(n,u,l,e);u.next=r,l.prep=r,t._map.set(n.id,r),t._size++}function A(t=null,n=null){!t||!n||t._size<=0||(t._lock?t._delList.push(n):Q(t,n))}function Q(t=null,n=null){t._map.delete(keyId);let l=n.prep,e=n.next;l.next=e,e.prep=l,t._size--}function V(){return new N}var Z=1;function $(){return Z++}class tt{constructor(t=0){this.entityId=t,this.id=t}}class nt{constructor(){this.id=$()}onStart(){}onUpdate(t=0){}onEnd(){}}class lt{constructor(t=0){this.id=t,this.order=t,this.list=V()}}var et=V();function ut(t=0){let n=F(et,t);return n||(n=function(t=0){let n=new lt(t);return X(et,n),n}(t)),n}class rt{constructor(t=null,n=0,l=0){this.data=t,this.width=n,this.height=l}}class it{constructor(t=0,n=0,l=0,e=0){this.x=t,this.y=n,this.width=l,this.height=e}}class st{constructor(t="",n=null,l=null){this.name=t,this.seg=n,this.bitmap=l}}function ot(t=null){return t.seg.width}function ct(t=null){return t.seg.height}class at extends tt{constructor(t=0,n=null){super(t),this.pos=n,this.vec=m()}}var ht=V();function dt(t=0){let n=F(ht,t);return n||function(t=0){let n=new at(t,g());return K(ht,n),n}(t)}function ft(t=0,n=0,l=0){p(function(t=0){return dt(t).pos}(t),n,l)}class gt extends tt{constructor(t=0,n=!1,l=0,e=1){super(t),this.isometrics=n,this.angle=l,this.scale=e}}var pt=V();function wt(t=0,n=null){let l=F(pt,t);return l||function(t=0,n=null){let l=new gt(t,(n=n||{}).isometrics,n.angle,n.scale);return K(pt,l),l}(t,n)}class xt extends class{constructor(){this.id=$()}}{constructor(t=null,n=null,l=null,e=0,u=0){super(),this.spriteFrame=t,this.renderCom=n,this.rectPosRel=l,this.order=e,this.layerOrder=u,this.isoPos=g()}}function mt(t=null){return t.spriteFrame}class yt extends nt{onUpdate(t=0){H(),function(t=null){Y(et,n=>{Y(n.list,n=>{t(n)})})}(t=>{!function(t=null){return t.renderCom.isometrics}(t)?function(t=null){W(function(t=null){return P(t.rectPosRel)}(t),mt(t))}(t):function(t=null){(function(t=null){let n=function(t=null){return t.pos}(t.rectPosRel),l=function(t=null){return t.offset}(t.rectPosRel);p(t.isoPos,.5*(n.x-n.y)+l.x,.5*(n.x+n.y)+l.y)})(t),W(function(t=null){return t.isoPos}(t),mt(t))}(t)})}}var vt=null;var bt=V(),_t=null;function kt(t=!1){vt||(vt=new yt),_t=vt}var Ct=0,Mt=0;function Pt(t=null){return t.width}function Rt(t=null){return.5*function(t=null){return t.getGridMapWidth()}(t)}function Ot(t=null){return.5*function(t=null){return t.getGridMapHeight()}(t)}function It(t=null,n=null){t.iterator(n)}class Lt extends class{constructor(t=0,n=0,l=null){this.width=t,this.height=n,this.data=l}}{constructor(t=0,n=0,l=0,e=0,u=null){super(t,n,u),this.rowIndex=l,this.colIndex=e}}class St extends class{getData(t=null){}setData(t=null,n=null){}getGrid(t=null){}getGridMapWidth(){}getGridMapHeight(){}iterator(t=null){}}{constructor(t=null,n=0,l=0,e=0,u=0,r=null){super(),this.pos=t,this.rows=n,this.columns=l,this.gridWidth=e,this.gridHeight=u,this.grids=r}getData(t=null){let n=Et(t,this);return n?n.data:null}setData(t=null,n=null){let l=Et(t,this);l&&(l.data=n)}getGrid(t=null){return Et(t,this)}getGridMapWidth(){return this.columns*this.gridWidth}getGridMapHeight(){return this.rows*this.gridHeight}iterator(t=null){this.grids.forEach(n=>{t(n)})}}function Et(t=null,n=null){let l=w(t,n.pos);if(!function(t=0,n=0,l=null){return t>0&&t<l.getGridMapWidth()&&n>0&&n<l.getGridMapHeight()}(l.x,l.y,n))return null;let e=R(l.x/gridmap.gridWidth),u=R(l.y/gridmap.gridHeight);return gridmap.grids[u*gridmap.columns+e]}function Gt(t=null){return g(t.pos.x-Rt(t),t.pos.y-Ot(t))}function Tt(t=null,n=null){let l=Gt(t);return g(l.x+t.gridWidth*(n.colIndex+.5),l.y+t.gridHeight*(n.rowIndex+.5))}function jt(t=null){!function(t=null){(t=Object.assign({columns:1,"grid-width":32,"grid-height":32,x:0,y:0,data:[0]},t))["grid-width"]=t["grid-width"]>0?t["grid-width"]:32,t["grid-height"]=t["grid-height"]>0?t["grid-height"]:32}(t);let n=t.columns,l=R(t.data.length/n);if(l*n!=t.data.length)return console.error("error param: len(grids): %d, columns: %d",t.data.length,n),null;let e=function(t=0,n=0,l=0,e=0,u=null){let r=[];for(let u=0;u<t;u++)for(let t=0;t<n;t++)r.push(new Lt(l,e,u,t));return u=u||g(),new St(u,t,n,l,e,r)}(l,n,t["grid-width"],t["grid-height"],g(t.x,t.y));return It(e,l=>{!function(t=null,n=null){t.data=n}(l,function(t=""){return r.get(t)}(t.data[l.rowIndex*n+l.colIndex]))}),e}var Ht=!1;var Wt=null,zt=(new Date).getTime();var Dt=new Map;class Ut extends class{constructor(t=60){this.fps=t,this.tick=1e3/t}clear(){}drawFrame(t=null,n=null){}drawRect(t=null,n=null){}drawLine(t=null,n=null){}drawCircle(t=null,n=0){}loadResource(t="",n=null){}onKeyCallback(t=null,n=null){}onTouchCallback(t=null,n=null){}start(t=null){}}{constructor(t=60,n=null,l=null){super(t),this.canvas=n,this.ctx=l}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawFrame(t=null,n=null){this.ctx.drawImage(function(t=null){return t.bitmap.data}(n),function(t=null){return t.seg.x}(n),function(t=null){return t.seg.y}(n),ot(n),ct(n),t.x-function(t=null){return.5*t.seg.width}(n),t.y-function(t=null){return.5*t.seg.height}(n),ot(n),ct(n))}drawRect(t=null,n=null){this.ctx.strokeRect(t.x-k(n),t.y-C(n),b(n),_(n))}drawLine(t=null,n=null){let l=this.ctx;l.beginPath(),l.moveTo(t.x,t.y),l.lineTo(n.x,n.y),l.stroke()}drawCircle(t=null,n=0){let l=this.ctx;l.beginPath(),l.arc(t.x,t.y,n,0,2*Math.PI),l.stroke()}loadResource(t="",n=null){let l=new Image;l.src=t,l.onload=function(){n(l)}}onKeyCallback(t=null,n=null){!function(t=null,n=null){window.addEventListener("keydown",n=>{let l=n.keyCode;Dt.get(l)||(Dt.set(l,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let l=t.keyCode;Dt.delete(l),n(t.keyCode)})}(t,n)}onTouchCallback(t=null,n=null){!function(t=null,n=null,l=null){t.canvas.addEventListener("mousedown",t=>{let l=canvas.getBoundingClientRect(),e=t.clientX-l.left*(canvas.width/l.width),u=t.clientY-l.top*(canvas.height/l.height);n(e,u)}),t.canvas.addEventListener("mouseup",t=>{let n=canvas.getBoundingClientRect(),e=t.clientX-n.left*(canvas.width/n.width),u=t.clientY-n.top*(canvas.height/n.height);l(e,u)})}(this,t,n)}start(t=null){!function(t=0,n=null){Ht=!1,setInterval(()=>{Wt=(new Date).getTime(),Ht||n(Wt-zt),zt=(new Date).getTime()},1e3/t)}(this.fps,t)}}Math.PI;function Ft(t=null,n=null,l=null,e=null,u=null){let r=(t=t||{}).width;r=r||800;let i=t.height;i=i||800;let s=t.fps;s=s||60;let o=t.type;o=o||0;let c=null;switch(o){case 0:c=function(t=0,n=0,l=0){let e=document.getElementById("canvas");e.width=t,e.height=n;let u=e.getContext("2d");return u.strokeStyle="#0000ff",new Ut(l,e,u)}(r,i,s);break;default:return console.error("error type"),null}return n&&l&&c.onKeyCallback(n,l),e&&u&&c.onTouchCallback(e,u),c}function Bt(t=null,n=null,l=null,e=null,u=null){!function(t=null){h=t}(Ft(t))}function Kt(t=null){let n=t["screen-width"];n=n&&n>0?n:800;let l=t["screen-height"];l=l&&l>0?l:800,function(t=null){c=t}(T(t.camera,n,l)),kt(t.debug),t.collide&&OpenCollider(t.collide),function(t=null){for(let n in t)i(n,t[n])}(t.def),function(t=null){if(!t||0==t.length)return;t.forEach(t=>{!function(t=null){let n=null;t.tilemap&&(n=jt(t.tilemap));let l=t.name;l&&function(t="",n=null,l=!0){s.get(t)&&l?console.error("data: %s exists.",t):s.set(t,n)}(l,n)}(t)})}(t.datas)}function Xt(t=null,n=null,l=null){let e=t?t.imgs:null;e&&e.length>0?function(t=null,n=null,l=null,e=null){let r=0;t.forEach(i=>{!function(t=null,n="",l=null){t.loadResource(n,l)}(d(),i,s=>{let o=new Map;o.set(i,function(t=null,n=0,l=0){return new rt(t,n,l)}(s,s.width,s.height)),r++,l&&l(i,r),t.length==r&&(!function(t=null,n=null){if(!t||0==t.length||!n)return;t.forEach(t=>{!function(t="",n=null,l=null){if(""==t||!n||!l)return console.err("error param."),null;let e=l.x,r=l.y,i=l.width,s=l.height;if(!i||!s)return console.err("error param."),null;let o=function(t="",n=null,l=0,e=0,u=0,r=0){let i=new it(l,e,u,r);return new st(t,i,n)}(t,n,e,r,i,s);!function(t="",n=null,l=!0){u.get(t)&&l?console.error("frame: %s exists.",t):u.set(t,n)}(t,o)}(t.name,n.get(t.res),t.area)})}(n,o),e&&e())})})}(e,t.frames,n,l):l()}function Yt(t=null,n=null){Bt(t=t||{}),Xt(t.res,null,()=>{Kt(t),function(t=null){Y(bt,t=>{t.onStart()}),_t.onStart(),t.onStart(),function(t=null,n=null){t.start(n)}(d(),n=>{(Ct+=n)>=16&&(Ct-=16,t.onUpdate(n),Y(bt,t=>{t.onUpdate(n)})),(Mt+=n)>=41&&(Mt-=41,_t.onUpdate(n))})}(n)})}function Jt(t=null,n=0,l=1,e=0,u=null){let r=function(t=0,n=null,l=null,e=0,u=1){let r=wt(t),i=I(dt(t).pos,l,v(ot(n),ct(n)));return new xt(n,r,i,e,u)}(n,t,u,e,l);return function(t=null){X(ut(t.layerOrder).list,t,t.order)}(r),r}var Nt=Object.assign(e,{touchOnCallback:function(t=0,n=0){console.log(t,n)},touchOverCallback:function(t=0,n=0){}});class qt{onStart(){let t=o("tile1");It(t,n=>{!function(t=null,n=null){let l=t.display;if(!l)return;let e=$();wt(e,{isometrics:!0}),ft(e,n.x,n.y),Jt(function(t="",n=!0){let l=u.get(t);return l||(n?u.get("defalut"):null)}(l.frame),e)}(function(t=null){return t.data}(n),Tt(t,n))})}onUpdate(t=0){(function(){let t=o("tile1");It(t,n=>{let l=Tt(t,n),e=function(t=null){return.5*Pt(t)}(n);Pt(n),function(t=null,n=0){let l=At(g(t.x-n,t.y-n)),e=At(g(t.x+n,t.y-n)),u=At(g(t.x-n,t.y+n)),r=At(g(t.x+n,t.y+n));D(l,e),D(e,r),D(r,u),D(u,l)}(l,e)})})(),U(g(),3),z(g(),v(function(t=null){return b(L(t.rectPosRel))}(a()),function(t=null){return _(L(t.rectPosRel))}(a())))}}function At(t=null){return g(t.x-t.y,.5*(t.x+t.y))}console.log(Nt),Yt(Nt,new qt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9kaXJlY3Rvci9zZXJ2aWNlL3Jlc291cmNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvZm91bmRhdGlvbi9zdHJ1Y3R1cmUvZ2VvbWV0cmljLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvZm91bmRhdGlvbi9vZmZzZXQvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2ZvdW5kYXRpb24vc3RydWN0dXJlL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9mb3VuZGF0aW9uL29mZnNldC9yZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvbGliL2NhbWVyYS9iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvbGliL2NhbWVyYS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2RpcmVjdG9yL3JlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2xpYi9lbmdpbmUvYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2ZvdW5kYXRpb24vY29udGFpbmVyL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9saWIvbGlzdC9saW5rbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2ZvdW5kYXRpb24vY29tcG9uZW50L2Vjcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2xpYi92aWV3L2NvbXBvbmVudC9sYXllci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2ZvdW5kYXRpb24vc3RydWN0dXJlL2ZyYW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvbGliL3Bvcy9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9saWIvdmlldy9jb21wb25lbnQvcmVuZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvbGliL3ZpZXcvc3lzdGVtLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvZGlyZWN0b3Ivc2VydmljZS9zeXN0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9mb3VuZGF0aW9uL2NvbnRhaW5lci9ncmlkbWFwLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvbGliL2dyaWQvdGlsZW1hcC9iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvbGliL2dyaWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9saWIvZW5naW5lL3dlYi9wcm9jZXNzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9saWIvZW5naW5lL3dlYi9tb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZnJhbWV3b3JrL2xpYi9lbmdpbmUvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9kaXJlY3Rvci9zZXJ2aWNlL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZyYW1ld29yay9kaXJlY3Rvci9ib290LmpzIiwid2VicGFjazovLy8uL3NyYy9mcmFtZXdvcmsvbGliL3ZpZXcvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJzcHJpdGVGcmFtZU1hcCIsIk1hcCIsImRlZk1hcCIsIlNldERlZiIsImRhdGEiLCJzZXQiLCJkYXRhTWFwIiwiR2V0RGF0YSIsImRlZmF1bHRDYW1lcmEiLCJHZXREZWZhdWx0Q2FtZXJhIiwiY3VyckVuZ2luZSIsIkdldEVuZ2luZSIsIlBvcyIsIngiLCJ5IiwidGhpcyIsIk5ld1BvcyIsIlVwZGF0ZVBvcyIsInBvcyIsIlRvTG9jYXRlUG9zIiwidGFyZ2V0UG9zIiwicmVmZXJQb3MiLCJWZWMiLCJOZXdWZWMiLCJSZWN0YW5nbGUiLCJ3aWR0aCIsImhlaWdodCIsImNvbnNvbGUiLCJlcnJvciIsIkdldFJlY3RXaWR0aCIsInJlY3QiLCJHZXRSZWN0SGVpZ2h0IiwiR2V0UmVjdEhhbGZXaWR0aCIsIkdldFJlY3RIYWxmSGVpZ2h0IiwiUG9zT2Zmc2V0UmVsYXRpb24iLCJvZmZzZXQiLCJHZXRSZWFsUG9zIiwicG9zT2Zmc2V0UmVsIiwiR2V0SW50IiwibnVtIiwiTWF0aCIsInRydW5jIiwic3VwZXIiLCJOZXdSZWN0UG9zUmVsYXRpb24iLCJHZXRSZWN0IiwicmVjdFBvc1R1cGxlIiwiR2V0UmVjdFBvc0NlbnRlciIsIkdldFJlY3RQb3NTdGFydCIsIkJhc2VDYW1lcmEiLCJyZWN0UG9zUmVsIiwic2NyZWVuT2Zmc2V0IiwiQ3JlYXRlQ2FtZXJhV2l0aERhdGEiLCJvcHRpb25zIiwic3R5bGUiLCJkYXRhcyIsInJwIiwiTmV3Q2FtZXJhIiwiVG9DYW1lcmFTdGFydFBvcyIsImNhbWVyYSIsIkdldENhbWVyYVN0YXJ0UG9zIiwiQ2xlYXIiLCJlbmdpbmUiLCJjbGVhciIsIkVuZ2luZUNsZWFyIiwiRHJhd0ZyYW1lIiwic3ByaXRlRnJhbWUiLCJjUG9zIiwiY2VudGVyUG9zIiwiZHJhd0ZyYW1lIiwiRW5naW5lRHJhd0ZyYW1lIiwiRHJhd0ZyYW1lSW5DYW1lcmEiLCJEcmF3UmVjdCIsImRyYXdSZWN0IiwiRW5naW5lRHJhd1JlY3QiLCJEcmF3UmVjdEluQ2FtZXJhIiwiRHJhd0xpbmUiLCJwb3NTdGFydCIsInBvc0VuZCIsImNQb3MxIiwiY1BvczIiLCJzdGFydFBvcyIsImVuZFBvcyIsImRyYXdMaW5lIiwiRW5naW5lRHJhd0xpbmUiLCJEcmF3TGluZUluQ2FtZXJhIiwiRHJhd0NpcmNsZSIsInJhZGl1cyIsImRyYXdDaXJjbGUiLCJFbmdpbmVEcmF3Q2lyY2xlIiwiRHJhd0NpcmNsZUluQ2FtZXJhIiwiR2V0TGlzdERhdGEiLCJsaXN0IiwiaWQiLCJyZXF1aXJlZCIsImNoZWNrQWRkIiwiQWRkVG9MaXN0IiwiYWRkIiwiSW5zZXJ0VG9MaXN0Iiwib3JkZXIiLCJpbnNlcnQiLCJMaXN0SXRlcmF0b3IiLCJjYWxsYmFjayIsIml0ZXJhdG9yIiwiTGlua05vZGUiLCJwcmVwIiwibmV4dCIsImhlYWQiLCJ0YWlsIiwiX21hcCIsIl9zaXplIiwiX2RlbExpc3QiLCJfY3VyciIsIl9sb2NrIiwibm9kZSIsImFkZFRvTGluayIsInJlbW92ZVdpdGhDaGVjayIsImxlbmd0aCIsInJlbW92ZU5vZGUiLCJwb3AiLCJvdXROb2RlIiwiaW5Ob2RlIiwibGluayIsInRhcmdldE5vZGUiLCJwdXNoIiwiZGVsZXRlIiwia2V5SWQiLCJOZXdMaW5rIiwiTmV3RW50aXR5SWQiLCJDb21wb25lbnQiLCJlbnRpdHlJZCIsIlN5c3RlbSIsImR0IiwibGF5ZXJMaXN0IiwiR2V0TGF5ZXIiLCJsYXllciIsImFkZExheWVyIiwiQml0bWFwIiwiU2VnIiwiU3ByaXRlRnJhbWUiLCJzZWciLCJiaXRtYXAiLCJHZXRTcHJpdGVGcmFtZVdpZHRoIiwiR2V0U3ByaXRlRnJhbWVIZWlnaHQiLCJ2ZWMiLCJwb3NDb21zIiwiR2V0UG9zQ29tcG9uZW50IiwiY29tIiwiY3JlYXRlUG9zQ29tcG9uZW50IiwiU2V0VW5pdFBvcyIsIkdldFVuaXRQb3MiLCJpc29tZXRyaWNzIiwiYW5nbGUiLCJzY2FsZSIsInJlbmRlckNvbXMiLCJHZXRSZW5kZXJDb21wb25lbnQiLCJjcmVhdGVSZW5kZXJDb21wb25lbnQiLCJyZW5kZXJDb20iLCJsYXllck9yZGVyIiwiaXNvUG9zIiwiR2V0RGlzcGxheVNwcml0ZUZyYW1lIiwiZGlzcGxheWVyIiwiZGlzcGxheVR1cGxlIiwiSXRlcmF0b3JMYXllcnMiLCJJc0Rpc3BsYXlJU09tZXRyaWNzIiwiR2V0RGlzcGxheUNlbnRlclBvcyIsImRyYXciLCJHZXRPZmZzZXQiLCJVcGRhdGVJc29Qb3MiLCJHZXREaXNwbGF5SXNvUG9zIiwiZHJhd0lzbyIsInJlbmRlclN5cyIsImxvZ2ljU3lzdGVtcyIsInJlbmRlclN5c3RlbSIsImluaXRTeXN0ZW1zIiwiZGVidWciLCJfdDEiLCJfdDIiLCJHZXRHcmlkV2lkdGgiLCJncmlkIiwiR2V0SGFsZkdyaWRNYXBXaWR0aCIsImdyaWRtYXAiLCJnZXRHcmlkTWFwV2lkdGgiLCJHZXRHcmlkTWFwV2lkdGgiLCJHZXRIYWxmR3JpZE1hcEhlaWdodCIsImdldEdyaWRNYXBIZWlnaHQiLCJHZXRHcmlkTWFwSGVpZ2h0IiwiR3JpZE1hcEl0ZXJhdG9yIiwicm93SW5kZXgiLCJjb2xJbmRleCIsInJvd3MiLCJjb2x1bW5zIiwiZ3JpZFdpZHRoIiwiZ3JpZEhlaWdodCIsImdyaWRzIiwiZ2V0R3JpZFdpdGhQb3MiLCJmb3JFYWNoIiwidGlsZW1hcCIsInRQb3MiLCJjaGVja0luIiwiY29sdW1uIiwicm93IiwiR2V0VGlsZW1hcFN0YXJ0IiwiR2V0VGlsZUdyaWRDZW50ZXIiLCJzdGFydCIsIkNyZWF0ZVRpbGVNYXBXaXRoRGF0YSIsImFzc2lnbiIsImRlZmF1bHRUaWxlTWFwRGF0YSIsIk5ld1RpbGVNYXAiLCJTZXRHcmlkRGF0YSIsIkdldERlZiIsIl9pc0VuZCIsImxhc3QiLCJEYXRlIiwiZ2V0VGltZSIsIl9rZXlEb3duTWFwIiwiZnBzIiwidGljayIsImltZ1NyYyIsIm9uTG9hZENhbGxiYWNrIiwia2V5RG93bkNhbGxiYWNrIiwia2V5VXBDYWxsYmFjayIsInRvdWNoT25DYWxsYmFjayIsInRvdWNoT3ZlckNhbGxiYWNrIiwib25FbnRlckZyYW1lQ2FsbGJhY2siLCJjYW52YXMiLCJjdHgiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJHZXRTcHJpdGVGcmFtZUJpdG1hcERhdGEiLCJHZXRTcHJpdGVGcmFtZVN0YXJ0WCIsIkdldFNwcml0ZUZyYW1lU3RhcnRZIiwiR2V0U3ByaXRlRnJhbWVIYWxmV2lkdGgiLCJHZXRTcHJpdGVGcmFtZUhhbGZIZWlnaHQiLCJzdHJva2VSZWN0IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiYXJjIiwiUEkiLCJpbWciLCJJbWFnZSIsInNyYyIsIm9ubG9hZCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiY29kZSIsImtleUNvZGUiLCJjYW52YXNPbktleUNhbGxiYWNrIiwibW91c2Vkb3duQ2FsbGJhY2siLCJtb3VzZXVwQ2FsbGJhY2siLCJldmVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50WSIsInRvcCIsImNhbnZhc09uTW91c2VDYWxsYmFjayIsIm9uVXBkYXRlQ2FsbGJhY2siLCJzZXRJbnRlcnZhbCIsInJ1blRpY2syIiwiQ3JlYXRlRW5naW5lV2l0aERhdGEiLCJrZXlEb3duSGFuZGxlciIsImtleVVwSGFubGVyIiwidHlwZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0Iiwic3Ryb2tlU3R5bGUiLCJOZXdINUVuZ2luZSIsIm9uS2V5Q2FsbGJhY2siLCJvblRvdWNoQ2FsbGJhY2siLCJpbml0RW5naW5lIiwiZW5naW5lT2JqIiwiU2V0RW5naW5lIiwiaW5pdEdhbWUiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsIlNldERlZmF1bHRDYW1lcmEiLCJjb2xsaWRlIiwiT3BlbkNvbGxpZGVyIiwiaW5pdERlZiIsImRhdGFPYmoiLCJjaGVjayIsIlNldERhdGEiLCJpbml0RGF0YU9iaiIsImluaXREYXRhcyIsImxvYWRXaXRoUmVzb3VyY2UiLCJyZXMiLCJPbmxvYWRDYWxsYmFjayIsIk9uQ29tcGxldGVDYWxsYmFjayIsImltZ3MiLCJmcmFtZXMiLCJfY291bnQiLCJsb2FkUmVzb3VyY2UiLCJFbmdpbmVMb2FkUmVzb3VyY2UiLCJiaXRtYXBEYXRhIiwiYml0bWFwcyIsIkNyZWF0ZUJpdG1hcCIsInNwcml0ZUZyYW1lRGF0YXMiLCJhcmVhIiwiZXJyIiwiZiIsIkNyZWF0ZVNwcml0ZUZyYW1lIiwiU2V0U3ByaXRlRnJhbWUiLCJjcmVhdGVTcHJpdGVGcmFtZVdpdGhEYXRhIiwiY3JlYXRlU3ByaXRlRnJhbWVzV2l0aERhdGEiLCJTdGFydCIsInNjZW5lIiwic3lzdGVtIiwib25TdGFydCIsIkVuZ2luZVN0YXJ0Iiwib25VcGRhdGUiLCJydW5XaXRoU2NlbmUiLCJBZGREaXNwbGF5ZXIiLCJkcyIsIk5ld0Rpc3BsYXllciIsIkFkZFRvTGF5ZXIiLCJsb2ciLCJkZWZhdWx0VmFsdWUiLCJHZXRTcHJpdGVGcmFtZSIsImluaXREaXNwbGF5IiwiR2V0R3JpZERhdGEiLCJoYWxmV2lkdGgiLCJHZXRIYWxmR3JpZFdpZHRoIiwicG9zMWlzbyIsImdldElzbyIsInBvczJpc28iLCJwb3MzaXNvIiwicG9zNGlzbyIsInRlc3RJc28iLCJkcmF3VGlsZSIsIkdldENhbWVyYVdpZHRoIiwiR2V0Q2FtZXJhSGVpZ2h0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYs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RUFDSGEsRUFBUWMsRUFBT1QsYXNCbUJmNlIsQ0FDSXJVLFFBd0NaLFNBQVM4VCxHQUFPclQsRUFBTSxNQUNsQixPQUFPRixFQUNGRSxFQUFJTCxFQUFJSyxFQUFJSixFQUNLLElBQWpCSSxFQUFJTCxFQUFJSyxFQUFJSixJQTJCakJhLFFBQVFvUyxJQUFJLElBQ1pYLEdBQU0sR0FBUyxJQUFJIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsIi8qKlxyXG4gKiDlhajlsYDljZXkvovotYTmupBcclxuICovXHJcblxyXG5cclxuIC8qKlxyXG4gKiDojrflj5bnsr7ngbXluKdcclxuICogVE9ETyBcclxuICog5Y+v6IO95Lya5pS55oiQaWTlvaLlvI9cclxuICog5byV5YWl6buY6K6k6LWE5rqQ5py65Yi277yM5om+5LiN5Yiw5bin5pe255qE6buY6K6k56m65bin77yM5Y+v5Lul5piv5LiA5byg57qi5Y+J5Zu+54mH77yMXHJcbiAqL1xyXG52YXIgc3ByaXRlRnJhbWVNYXAgPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIEdldFNwcml0ZUZyYW1lKG5hbWUgPSBcIlwiLCBkZWZhdWx0VmFsdWUgPSB0cnVlKXtcclxuICAgIGxldCBmID0gc3ByaXRlRnJhbWVNYXAuZ2V0KG5hbWUpO1xyXG4gICAgcmV0dXJuIGYgPyBmIDogXHJcbiAgICAgICAgZGVmYXVsdFZhbHVlID8gc3ByaXRlRnJhbWVNYXAuZ2V0KFwiZGVmYWx1dFwiKSA6IG51bGw7XHJcbn1cclxuZnVuY3Rpb24gU2V0U3ByaXRlRnJhbWUobmFtZSA9IFwiXCIsIHNwcml0ZUZyYW1lID0gbnVsbCwgY2hlY2sgPSB0cnVlKXtcclxuICAgIGxldCBmID0gc3ByaXRlRnJhbWVNYXAuZ2V0KG5hbWUpO1xyXG4gICAgaWYoZiAmJiBjaGVjayl7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcImZyYW1lOiAlcyBleGlzdHMuXCIsIG5hbWUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHNwcml0ZUZyYW1lTWFwLnNldChuYW1lLCBzcHJpdGVGcmFtZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDoh6rlrprkuYnmlbDmja7lrprkuYlcclxuICovXHJcbnZhciBkZWZNYXAgPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIEdldERlZihrZXkgPSBcIlwiKXtcclxuICAgIHJldHVybiBkZWZNYXAuZ2V0KGtleSk7XHJcbn1cclxuZnVuY3Rpb24gU2V0RGVmKGtleSA9IDAsIGRhdGEgPSBudWxsKXtcclxuICAgIGRlZk1hcC5zZXQoa2V5LCBkYXRhKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiHquWumuS5ieaVsOaNrlxyXG4gKi9cclxudmFyIGRhdGFNYXAgPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIEdldERhdGEobmFtZSA9IFwiXCIpe1xyXG4gICAgcmV0dXJuIGRhdGFNYXAuZ2V0KG5hbWUpO1xyXG59XHJcbmZ1bmN0aW9uIFNldERhdGEobmFtZSA9IFwiXCIsIGRhdGEgPSBudWxsLCBjaGVjayA9IHRydWUpe1xyXG4gICAgbGV0IGQgPSBkYXRhTWFwLmdldChuYW1lKTtcclxuICAgIGlmKGQgJiYgY2hlY2spe1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJkYXRhOiAlcyBleGlzdHMuXCIsIG5hbWUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGRhdGFNYXAuc2V0KG5hbWUsIGRhdGEpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIOaRhOWDj+aculxyXG4gKi9cclxudmFyIGRlZmF1bHRDYW1lcmEgPSBudWxsO1xyXG5mdW5jdGlvbiBTZXREZWZhdWx0Q2FtZXJhKGNhbWVyYSA9IG51bGwpe1xyXG4gICAgZGVmYXVsdENhbWVyYSA9IGNhbWVyYTtcclxufVxyXG5mdW5jdGlvbiBHZXREZWZhdWx0Q2FtZXJhKCl7XHJcbiAgICByZXR1cm4gZGVmYXVsdENhbWVyYTtcclxufVxyXG5cclxudmFyIGNhbWVyYXMgPSBbXTtcclxuZnVuY3Rpb24gQWRkQ2FtZXJhKGNhbWVyYSA9IG51bGwpe1xyXG4gICAgY2FtZXJhcy5wdXNoKGNhbWVyYSk7XHJcbn1cclxuZnVuY3Rpb24gR2V0Q2FtZXJhcygpe1xyXG4gICAgcmV0dXJuIGNhbWVyYXM7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog5aSW6YOo5byV5pOOXHJcbiAqL1xyXG52YXIgY3VyckVuZ2luZSA9IG51bGw7XHJcbmZ1bmN0aW9uIFNldEVuZ2luZShlbmdpbmVPYmogPSBudWxsKXtcclxuICAgIGN1cnJFbmdpbmUgPSBlbmdpbmVPYmo7XHJcbn1cclxuZnVuY3Rpb24gR2V0RW5naW5lKCl7XHJcbiAgICByZXR1cm4gY3VyckVuZ2luZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOW9k+WJjeWcuuaZr1xyXG4gKi9cclxudmFyIGN1cnJTY2VuZSA9IG51bGw7XHJcbmZ1bmN0aW9uIFNldFNjZW5lKHNjZW5lID0gbnVsbCl7XHJcbiAgICBjdXJyU2NlbmUgPSBzY2VuZTtcclxufVxyXG5mdW5jdGlvbiBHZXRTY2VuZSgpe1xyXG4gICAgcmV0dXJuIGN1cnJTY2VuZTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIEdldFNwcml0ZUZyYW1lLCBTZXRTcHJpdGVGcmFtZSxcclxuICAgIEdldERlZiwgU2V0RGVmLCBHZXREYXRhLCBTZXREYXRhLCBcclxuICAgIFNldERlZmF1bHRDYW1lcmEsIEdldERlZmF1bHRDYW1lcmEsIEFkZENhbWVyYSwgR2V0Q2FtZXJhcyxcclxuICAgIFNldEVuZ2luZSwgR2V0RW5naW5lLCBTZXRTY2VuZSwgR2V0U2NlbmVcclxufSIsIi8qKlxyXG4gKiDln7rnoYAyROWdkOagh1xyXG4gKi9cclxuY2xhc3MgUG9zIHtcclxuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCl7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBOZXdQb3MoeCA9IDAsIHkgPSAwKXtcclxuICAgIHJldHVybiBuZXcgUG9zKHgsIHkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBVcGRhdGVQb3MocG9zID0gbnVsbCwgeCA9IDAsIHkgPSAwKXtcclxuICAgIHBvcy54ID0geDtcclxuICAgIHBvcy55ID0geTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOiuoeeul+ebuOWvueWdkOagh1xyXG4gKiDku6V0YXJnZXRQb3PkuLrlh4bvvIzorqHnrpdyZWZlclBvc+S6jnRhcmdldFBvc+eahOebuOWvueWdkOagh1xyXG4gKiDkuL7kvovvvJpcclxuICogICAgICDmkYTlg4/mnLrkvY3kuo4oNTAsIDUwKeWkhO+8jHJlZmVyUG9zXHJcbiAqICAgICAg5Y2V5L2NQeS9jeS6jigxMjAsIDMwKeWkhO+8jHRhcmdldFBvc1xyXG4gKiAgICAgIOmCo+S5iO+8jOWNleS9jUHlnKjmkYTlg4/mnLrnmoQoMTIwLTUwLCAzMC01MCnlpIRcclxuICovXHJcbmZ1bmN0aW9uIFRvTG9jYXRlUG9zKHRhcmdldFBvcyA9IG51bGwsIHJlZmVyUG9zID0gbnVsbCl7XHJcbiAgICByZXR1cm4gTmV3UG9zKFxyXG4gICAgICAgIHRhcmdldFBvcy54IC0gcmVmZXJQb3MueCxcclxuICAgICAgICB0YXJnZXRQb3MueSAtIHJlZmVyUG9zLnkpO1xyXG59XHJcblxyXG4vKipcclxuICog5Z+656GA5ZCR6YePXHJcbiAqIGRpc3RhbmNlOiDot53nprvns7vmlbDvvIzms6jmhI/kuI3mmK/lrp7pmYXot53nprvvvIzlj6rnlKjkuo7mr5TovoPot53nprvlpKflsI9cclxuICovXHJcbmNsYXNzIFZlYyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDApe1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICAvL3RoaXMuZGlzdGFuY2UgPSB4ICogeCArIHkgKiB5O1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBOZXdWZWMoeCA9IDAsIHkgPSAwKXtcclxuICAgIHJldHVybiBuZXcgVmVjKHgsIHkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBOZXdWZWNXaXRoUG9zKHBvc1N0YXJ0ID0gbnVsbCwgcG9zRW5kID0gbnVsbCl7XHJcbiAgICByZXR1cm4gbmV3IE5ld1ZlYyhwb3NFbmQueCAtIHBvc1N0YXJ0LngsIHBvc0VuZC55IC0gcG9zU3RhcnQueSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFVwZGF0ZVZlYyh2ZWMgPSBudWxsLCB4ID0gMCwgeSA9IDApe1xyXG4gICAgdmVjLnggPSB4O1xyXG4gICAgdmVjLnkgPSB5O1xyXG4gICAgLy92ZWMuZGlzdGFuY2UgPSB4ICogeCArIHkgKiB5O1xyXG59XHJcblxyXG4vKipcclxuICog6Led56a757O75pWwXHJcbiAqIOazqOaEj++8jOW5tumdnuWunumZhei3neemu+WAvO+8jOWboOS4uuW8gOagueWPt+iuoeeul+a2iOiAl+Wkp1xyXG4gKiDoi6Xlj6rnlKjkuo7lr7nmr5TlpKflsI/vvIzmraTns7vmlbDljbPlj69cclxuICovXHJcbmZ1bmN0aW9uIEdldFZlY0Rpc3RhbmNlKHZlYyA9IG51bGwpe1xyXG4gICAgLy9yZXR1cm4gdmVjLmRpc3RhbmNlO1xyXG4gICAgcmV0dXJuIHZlYy54ICogdmVjLnggKyB2ZWMueSAqIHZlYy55O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIDJE5Z+656GA55+p5b2i77yM5Y+q5pyJ5a696auYXHJcbiAqIHdpZHRoLCBoZWlnaHQgOiDlrr3pq5hcclxuICovXHJcbmNsYXNzIFJlY3RhbmdsZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCA9IDAsIGhlaWdodCA9IDApIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnn6nlvaLpu5jorqTlsYXkuK3kuo5vd25lclxyXG4gKiDmraTmlrnms5XkuIDoiKznlLFjb2xsaWRlcuiwg+eUqFxyXG4gKi9cclxuZnVuY3Rpb24gTmV3UmVjdCh3aWR0aCA9IDAsIGhlaWdodCA9IDApe1xyXG4gICAgaWYod2lkdGggPT0gMCB8fCBoZWlnaHQgPT0gMCl7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcInJlY3QgcGFyYW0gZXJyb3IuIHdpZHRoOiVkLCBoZWlnaHQ6JWRcIiwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh3aWR0aCwgaGVpZ2h0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gVXBkYXRlUmVjdFNpemUocmVjdCA9IG51bGwsIHdpZHRoID0gMCwgaGVpZ2h0ID0gMCl7XHJcbiAgICByZWN0LndpZHRoID0gd2lkdGg7XHJcbiAgICByZWN0LmhlaWdodCA9IGhlaWdodDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIEdldFJlY3RXaWR0aChyZWN0ID0gbnVsbCl7XHJcbiAgICByZXR1cm4gcmVjdC53aWR0aDtcclxufVxyXG5mdW5jdGlvbiBHZXRSZWN0SGVpZ2h0KHJlY3QgPSBudWxsKXtcclxuICAgIHJldHVybiByZWN0LmhlaWdodDtcclxufVxyXG5mdW5jdGlvbiBHZXRSZWN0SGFsZldpZHRoKHJlY3QgPSBudWxsKXtcclxuICAgIHJldHVybiByZWN0LndpZHRoICogMC41O1xyXG59XHJcbmZ1bmN0aW9uIEdldFJlY3RIYWxmSGVpZ2h0KHJlY3QgPSBudWxsKXtcclxuICAgIHJldHVybiByZWN0LmhlaWdodCAqIDAuNTtcclxufVxyXG5cclxuLy/msYLpnaLnp69cclxuZnVuY3Rpb24gR2V0UmVjdEFyZWEocmVjdCA9IG51bGwpe1xyXG4gICAgcmV0dXJuIHJlY3Qud2lkdGggKiByZWN0LmhlaWdodDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWchuW9olxyXG4gKi9cclxuY2xhc3MgQ2lyY2xlIHtcclxuICAgIGNvbnN0cnVjdG9yKHJhZGl1cyA9IDApIHtcclxuICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gTmV3Q2lyY2xlKHJhZGl1cyA9IDApe1xyXG4gICAgaWYocmFkaXVzID09IDApe1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJjaXJjbGUgcGFyYW0gZXJyb3IuIHJhZGl1czolZFwiLCByYWRpdXMpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBDaXJjbGUocmFkaXVzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0Q2lyY2xlUmFkaXVzKGNpcmNsZSA9IG51bGwpe1xyXG4gICAgcmV0dXJuIGNpcmNsZS5yYWRpdXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFVwZGF0ZUNpcmNsZShjaXJjbGUgPSBudWxsLCByYWRpdXMgPSAwKXtcclxuICAgIGNpcmNsZS5yYWRpdXMgPSByYWRpdXM7XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBOZXdQb3MsIFVwZGF0ZVBvcywgVG9Mb2NhdGVQb3MsIFxyXG4gICAgTmV3VmVjLCBOZXdWZWNXaXRoUG9zLCBVcGRhdGVWZWMsIEdldFZlY0Rpc3RhbmNlLFxyXG4gICAgTmV3UmVjdCwgVXBkYXRlUmVjdFNpemUsIEdldFJlY3RXaWR0aCwgR2V0UmVjdEhhbGZXaWR0aCwgR2V0UmVjdEhlaWdodCwgR2V0UmVjdEhhbGZIZWlnaHQsIEdldFJlY3RBcmVhLFxyXG4gICAgTmV3Q2lyY2xlLCBHZXRDaXJjbGVSYWRpdXMsIFVwZGF0ZUNpcmNsZVxyXG59IiwiaW1wb3J0IHsgTmV3UG9zLCBOZXdWZWMgfSBmcm9tIFwiLi4vc3RydWN0dXJlL2dlb21ldHJpY1wiO1xyXG5cclxuLyoqXHJcbiAqIFRPRE9cclxuICog5YWI5YaZ77yM5YaN5oWi5oWi6KeE6IyDXHJcbiAqIOi/memHjOS4jeiDveaciXBvc0Nvbe+8jOWboOS4uui/meaYr+WfuuehgOWxglxyXG4gKiBib3gtY29sbGlkZXLnlKjliLBJc1JlY3RzQ3Jvc3NXaXRoVmVj5p2l5qOA5rWL56Kw5pKe77yM6ZyA6KaB6YeN5paw6ICD6JmRXHJcbiAqIOimgeS5iOWwseWBmuaIkGxpYlxyXG4gKi9cclxuY2xhc3MgUG9zT2Zmc2V0UmVsYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IocG9zID0gbnVsbCwgb2Zmc2V0ID0gbnVsbCl7XHJcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7ICAgICAgIC8v6YCa5bi45piv5oyH5pi+56S65pe255qE5YGP56e76YeP77yM5ZKMd29ybGRQb3Pml6DlhbNcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gTmV3UG9zT2Zmc2V0UmVsYXRpb24ocG9zID0gbnVsbCwgb2Zmc2V0ID0gbnVsbCl7XHJcbiAgICBvZmZzZXQgPSBvZmZzZXQgPyBvZmZzZXQgOiBOZXdWZWMoKTtcclxuICAgIHJldHVybiBuZXcgUG9zT2Zmc2V0UmVsYXRpb24ocG9zLCBvZmZzZXQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBHZXRQb3MocG9zT2Zmc2V0UmVsID0gbnVsbCl7XHJcbiAgICByZXR1cm4gcG9zT2Zmc2V0UmVsLnBvcztcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0T2Zmc2V0KHBvc09mZnNldFJlbCA9IG51bGwpe1xyXG4gICAgcmV0dXJuIHBvc09mZnNldFJlbC5vZmZzZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFJlYWxQb3MocG9zT2Zmc2V0UmVsID0gbnVsbCl7XHJcbiAgICByZXR1cm4gTmV3UG9zKFxyXG4gICAgICAgIHBvc09mZnNldFJlbC5wb3MueCArIHBvc09mZnNldFJlbC5vZmZzZXQueCxcclxuICAgICAgICBwb3NPZmZzZXRSZWwucG9zLnkgKyBwb3NPZmZzZXRSZWwub2Zmc2V0LnkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBVcGRhdGVPZmZzZXQocG9zT2Zmc2V0UmVsID0gbnVsbCwgeE9mZnNldCA9IDAsIHlPZmZzZXQgPSAwKXtcclxuICAgIHBvc09mZnNldFJlbC5vZmZzZXQueCA9IHhPZmZzZXQ7XHJcbiAgICBwb3NPZmZzZXRSZWwub2Zmc2V0LnkgPSB5T2Zmc2V0O1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgUG9zT2Zmc2V0UmVsYXRpb24sIE5ld1Bvc09mZnNldFJlbGF0aW9uLCBHZXRQb3MsIEdldE9mZnNldCxcclxuICAgIEdldFJlYWxQb3MsIFVwZGF0ZU9mZnNldFxyXG59IiwiY29uc3QgTUFYX0lOVCA9IDIxNDc0ODM2NDcgICAvLyAgMl4zMSAtIDEgPSAyMTQ3NDgzNjQ3XHJcbmZ1bmN0aW9uIEdldE1heEludCgpe1xyXG4gICAgcmV0dXJuIE1BWF9JTlQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEFicyh2YWwgPSAwKXtcclxuICAgIHJldHVybiB2YWwgPj0gMCA/IHZhbCA6IC12YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIE1heCh2YWwxID0gMCwgdmFsMiA9IDApe1xyXG4gICAgcmV0dXJuIHZhbDEgPiB2YWwyID8gdmFsMSA6IHZhbDI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIE1pbih2YWwxID0gMCwgdmFsMiA9IDApe1xyXG4gICAgcmV0dXJuIHZhbDEgPCB2YWwyID8gdmFsMSA6IHZhbDI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDkuYvliY3vvJp4IDwgMCA/IE1hdGguY2VpbCh4KSA6IE1hdGguZmxvb3IoeClcclxuICog546w5Zyo77yaTWF0aC50cnVuYyh4KVxyXG4gKiBAcGFyYW0geyp9IG51bSBcclxuICovXHJcbmZ1bmN0aW9uIEdldEludChudW0gPSAwKXtcclxuICAgIHJldHVybiBNYXRoLnRydW5jKG51bSk7XHJcbn1cclxuXHJcbmV4cG9ydHtcclxuICAgIEdldE1heEludCwgQWJzLCBNYXgsIE1pbiwgR2V0SW50XHJcbn0iLCJpbXBvcnQgeyBOZXdWZWMsIE5ld1BvcywgR2V0UmVjdEhhbGZXaWR0aCwgR2V0UmVjdEhhbGZIZWlnaHQgfSBmcm9tIFwiLi4vc3RydWN0dXJlL2dlb21ldHJpY1wiO1xyXG5pbXBvcnQgeyBHZXRSZWFsUG9zLCBQb3NPZmZzZXRSZWxhdGlvbiB9IGZyb20gXCIuL2Jhc2VcIjtcclxuaW1wb3J0IHsgQWJzIH0gZnJvbSBcIi4uL3N0cnVjdHVyZS9tYXRoXCI7XHJcblxyXG4vKipcclxuICog55+p5b2i5LiO5L2N572u55qE5YWz57O75YWD5Lu2XHJcbiAqL1xyXG5jbGFzcyBSZWN0UG9zUmVsYXRpb24gZXh0ZW5kcyBQb3NPZmZzZXRSZWxhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3MgPSBudWxsLCBvZmZzZXQgPSBudWxsLCByZWN0ID0gbnVsbCl7XHJcbiAgICAgICAgc3VwZXIocG9zLCBvZmZzZXQpO1xyXG4gICAgICAgIHRoaXMucmVjdCA9IHJlY3Q7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIE5ld1JlY3RQb3NSZWxhdGlvbihwb3MgPSBudWxsLCBvZmZzZXQgPSBudWxsLCByZWN0ID0gbnVsbCl7XHJcbiAgICBvZmZzZXQgPSBvZmZzZXQgPyBvZmZzZXQgOiBOZXdWZWMoKTtcclxuICAgIHJldHVybiBuZXcgUmVjdFBvc1JlbGF0aW9uKHBvcywgb2Zmc2V0LCByZWN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0UmVjdChyZWN0UG9zVHVwbGUgPSBudWxsKXtcclxuICAgIHJldHVybiByZWN0UG9zVHVwbGUucmVjdDtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0UmVjdFBvc0NlbnRlcihyZWN0UG9zVHVwbGUgPSBudWxsKXtcclxuICAgIHJldHVybiBHZXRSZWFsUG9zKHJlY3RQb3NUdXBsZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFJlY3RQb3NTdGFydChyZWN0UG9zVHVwbGUgPSBudWxsKXtcclxuICAgIGxldCBwb3MgPSBHZXRSZWN0UG9zQ2VudGVyKHJlY3RQb3NUdXBsZSk7XHJcbiAgICByZXR1cm4gTmV3UG9zKFxyXG4gICAgICAgIHBvcy54IC0gR2V0UmVjdEhhbGZXaWR0aChyZWN0UG9zVHVwbGUucmVjdCksXHJcbiAgICAgICAgcG9zLnkgLSBHZXRSZWN0SGFsZkhlaWdodChyZWN0UG9zVHVwbGUucmVjdClcclxuICAgICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFJlY3RQb3NFbmQocmVjdFBvc1R1cGxlID0gbnVsbCl7XHJcbiAgICBsZXQgcG9zID0gR2V0UmVjdFBvc0NlbnRlcihyZWN0UG9zVHVwbGUpO1xyXG4gICAgcmV0dXJuIE5ld1BvcyhcclxuICAgICAgICBwb3MueCArIEdldFJlY3RIYWxmV2lkdGgocmVjdFBvc1R1cGxlLnJlY3QpLFxyXG4gICAgICAgIHBvcy55ICsgR2V0UmVjdEhhbGZIZWlnaHQocmVjdFBvc1R1cGxlLnJlY3QpXHJcbiAgICApO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIOebruWJjeeahOacuuWItu+8jOWPr+S7peS9v+eUqOefqeW9ouS4reW/g+eCueS5i+mXtOeahOi3neemu+WIpOaWreaYr+WQpuebuOS6pFxyXG4gKi9cclxuZnVuY3Rpb24gSXNSZWN0c0Nyb3NzKHJlY3RQb3NUdXBsZTEgPSBudWxsLCByZWN0UG9zVHVwbGUyID0gbnVsbCl7XHJcbiAgICBsZXQgcG9zMSA9IEdldFJlY3RQb3NDZW50ZXIocmVjdFBvc1R1cGxlMSk7XHJcbiAgICBsZXQgcG9zMiA9IEdldFJlY3RQb3NDZW50ZXIocmVjdFBvc1R1cGxlMik7XHJcbiAgICBsZXQgdyA9IEFicyhwb3MxLnggLSBwb3MyLngpO1xyXG4gICAgaWYodyA+IEdldFJlY3RIYWxmV2lkdGgocmVjdFBvc1R1cGxlMS5yZWN0KSArIEdldFJlY3RIYWxmV2lkdGgocmVjdFBvc1R1cGxlMi5yZWN0KSl7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IGggPSBBYnMocG9zMS55IC0gcG9zMi55KTtcclxuICAgIGlmKGggPiBHZXRSZWN0SGFsZkhlaWdodChyZWN0UG9zVHVwbGUxLnJlY3QpICsgR2V0UmVjdEhhbGZIZWlnaHQocmVjdFBvc1R1cGxlMi5yZWN0KSl7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUT0RPIOmcgOmHjeaWsOiuvuiuoVxyXG4gKiBAcGFyYW0geyp9IHJlY3RQb3NUdXBsZTEgXHJcbiAqIEBwYXJhbSB7Kn0gcmVjdFBvc1R1cGxlMiBcclxuICovXHJcbmZ1bmN0aW9uIElzUmVjdHNDcm9zc1dpdGhWZWMocmVjdFBvc1R1cGxlMSA9IG51bGwsIHJlY3RQb3NUdXBsZTIgPSBudWxsKSB7XHJcbiAgICBsZXQgcnAxID0gR2V0UmVjdFBvc0NlbnRlcihyZWN0UG9zVHVwbGUxKTtcclxuICAgIGxldCBwb3MxID0gTmV3UG9zKFxyXG4gICAgICAgIHJwMS54ICsgcmVjdFBvc1R1cGxlMS51bml0VmVjLngsXHJcbiAgICAgICAgcnAxLnkgKyByZWN0UG9zVHVwbGUxLnVuaXRWZWMueVxyXG4gICAgKTtcclxuICAgIGxldCBycDIgPSBHZXRSZWN0UG9zQ2VudGVyKHJlY3RQb3NUdXBsZTIpO1xyXG4gICAgbGV0IHBvczIgPSBOZXdQb3MoXHJcbiAgICAgICAgcnAyLnggKyByZWN0UG9zVHVwbGUyLnVuaXRWZWMueCxcclxuICAgICAgICBycDIueSArIHJlY3RQb3NUdXBsZTIudW5pdFZlYy55XHJcbiAgICApO1xyXG4gICAgbGV0IHcgPSBBYnMocG9zMS54IC0gcG9zMi54KTtcclxuICAgIGlmKHcgPiBHZXRSZWN0SGFsZldpZHRoKHJlY3RQb3NUdXBsZTEucmVjdCkgKyBHZXRSZWN0SGFsZldpZHRoKHJlY3RQb3NUdXBsZTIucmVjdCkpe1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGxldCBoID0gQWJzKHBvczEueSAtIHBvczIueSk7XHJcbiAgICBpZihoID4gR2V0UmVjdEhhbGZIZWlnaHQocmVjdFBvc1R1cGxlMS5yZWN0KSArIEdldFJlY3RIYWxmSGVpZ2h0KHJlY3RQb3NUdXBsZTIucmVjdCkpe1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogVE9ETyDmnInlvoXkvJjljJZcclxuICog5Lik5Liq55+p5b2i5piv5ZCm55u45Lqk77yM5Z+656GA56Kw5pKe5qOA5rWL77yI6ZyA6KaB5YWI5pu05paw5Z2Q5qCH77yJXHJcbiAqIOWOn+eQhu+8mlxyXG4gKiAg5bemeO+8jOWPluS4pOiAheacgOWkp+WAvFxyXG4gKiAg5Y+zeO+8jOWPluS4pOiAheacgOWwj+WAvFxyXG4gKiAg5aaC5p6c5Y+zeOWkp+S6juW3pnjvvIzliJl46L2055u45LqkXHJcbiAqIFnlkIznkIbvvJpcclxuICogIOS4innvvIzlj5bkuKTogIXmnIDlpKflgLxcclxuICogIOS4i3nvvIzlj5bkuKTogIXmnIDlsI/lgLxcclxuICogIOWmguaenOS4i3nlpKfkuo7kuIp577yM5YiZeei9tOebuOS6pFxyXG4gKiAg55uu5YmN77yM5Y2z5L2/5Lik6L656YeN5Y+g77yM5Lmf5LiN566X55u45Lqk77yM6L+Z5qC36IO96YG/5YWN5b6I5aSa6Zeu6aKYXHJcbiAqL1xyXG5mdW5jdGlvbiBOZXdJbm5lclJlY3QocmVjdFBvc1R1cGxlMSA9IG51bGwsIHJlY3RQb3NUdXBsZTIgPSBudWxsKXtcclxuICAgIGlmKCFJc1JlY3RzQ3Jvc3MocmVjdFBvc1R1cGxlMSwgcmVjdFBvc1R1cGxlMikpe1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzdGFydDEgPSBHZXRSZWN0UG9zU3RhcnQocmVjdFBvc1R1cGxlMSk7XHJcbiAgICBsZXQgc3RhcnQyID0gR2V0UmVjdFBvc1N0YXJ0KHJlY3RQb3NUdXBsZTIpO1xyXG4gICAgbGV0IGVuZDEgPSBHZXRSZWN0UG9zRW5kKHJlY3RQb3NUdXBsZTEpO1xyXG4gICAgbGV0IGVuZDIgPSBHZXRSZWN0UG9zRW5kKHJlY3RQb3NUdXBsZTIpO1xyXG5cclxuICAgIGxldCByMXgxID0gc3RhcnQxLng7XHJcbiAgICBsZXQgcjJ4MSA9IHN0YXJ0Mi54O1xyXG4gICAgbGV0IG1heFgxID0gcjF4MSA+IHIyeDEgPyByMXgxIDogcjJ4MTtcclxuXHJcbiAgICBsZXQgcjF4MiA9IGVuZDEueDtcclxuICAgIGxldCByMngyID0gZW5kMi54O1xyXG4gICAgbGV0IG1pblgyID0gcjF4MiA8IHIyeDIgPyByMXgyIDogcjJ4MjtcclxuXHJcbiAgICBsZXQgcjF5MSA9IHN0YXJ0MS55O1xyXG4gICAgbGV0IHIyeTEgPSBzdGFydDIueTtcclxuICAgIGxldCBtYXhZMSA9IHIxeTEgPiByMnkxID8gcjF5MSA6IHIyeTE7XHJcblxyXG4gICAgbGV0IHIxeTIgPSBlbmQxLnk7XHJcbiAgICBsZXQgcjJ5MiA9IGVuZDIueTtcclxuICAgIGxldCBtaW5ZMiA9IHIxeTIgPCByMnkyID8gcjF5MiA6IHIyeTI7XHJcblxyXG4gICAgbGV0IHdpZHRoID0gbWluWDIgLSBtYXhYMTtcclxuICAgIGxldCBoZWlnaHQgPSBtaW5ZMiAtIG1heFkxO1xyXG4gICAgbGV0IHJlY3QgPSBOZXdSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgaWYoIXJlY3Qpe1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBOZXdSZWN0UG9zVHVwbGUoMCwgMCwgXHJcbiAgICAgICAgTmV3UG9zKFxyXG4gICAgICAgICAgICBtYXhYMSArIEdldFJlY3RIYWxmV2lkdGgocmVjdCksXHJcbiAgICAgICAgICAgIG1heFkxICsgR2V0UmVjdEhhbGZIZWlnaHQocmVjdClcclxuICAgICAgICApLCBOZXdWZWMoKSwgcmVjdCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDkv67lpI3kvY3nva7vvIzmoLnmja5yZWN055qE5Lit5b+D5L2N572u5L+u5aSNdW5pdC5wb3NcclxuICovXHJcbmZ1bmN0aW9uIEZpeFVuaXRQb3MocmVjdFBvc1R1cGxlID0gbnVsbCwgcmVjdFggPSAwLCByZWN0WSA9IDApe1xyXG4gICAgcmVjdFBvc1R1cGxlLnVuaXRQb3MueCA9IHJlY3RYIC0gcmVjdFBvc1R1cGxlLm9mZnNldC54O1xyXG4gICAgcmVjdFBvc1R1cGxlLnVuaXRQb3MueSA9IHJlY3RZIC0gcmVjdFBvc1R1cGxlLm9mZnNldC55O1xyXG59XHJcblxyXG5mdW5jdGlvbiBGaXhVbml0VmVjKHJlY3RQb3NUdXBsZSA9IG51bGwsIHJlY3RYID0gMCwgcmVjdFkgPSAwKSB7XHJcbiAgICByZWN0UG9zVHVwbGUudW5pdFZlYy54ID0gcmVjdFggLSByZWN0UG9zVHVwbGUudW5pdFBvcy54O1xyXG4gICAgcmVjdFBvc1R1cGxlLnVuaXRWZWMueSA9IHJlY3RZIC0gcmVjdFBvc1R1cGxlLnVuaXRQb3MueTsgICAgXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmoLnmja51bml05L2N572u5pu05pawcmVjdOS9jee9ru+8iOS4gOiIrOWcuuaZr+iwg+eUqO+8iVxyXG4gKi9cclxuZnVuY3Rpb24gRml4UmVjdFBvcyhyZWN0UG9zVHVwbGUgPSBudWxsLCB1bml0UG9zWCA9IDAsIHVuaXRQb3NZID0gMCl7XHJcbiAgICByZWN0UG9zVHVwbGUuY2VudGVyLnggPSB1bml0UG9zWCArIHJlY3RQb3NUdXBsZS5vZmZzZXQueDtcclxuICAgIHJlY3RQb3NUdXBsZS5jZW50ZXIueSA9IHVuaXRQb3NZICsgcmVjdFBvc1R1cGxlLm9mZnNldC55O1xyXG59XHJcblxyXG4vKipcclxuICogaW5uZXIucmVjdOS4jeWHhui2iuWHum91dHRlci5yZWN077yM5L+u5q2jaW5ucmVyLnBvc+S9jee9rlxyXG4gKiBpbm5lcuWSjG91dHRlcumDveaYr1JlY3RQb3NUdXBsZVxyXG4gKi9cclxuZnVuY3Rpb24gRml4SW5SZWN0KG91dHRlciA9IG51bGwsIGlubmVyID0gbnVsbCl7XHJcbiAgICBsZXQgY2VudGVyUG9zID0gR2V0UmVjdFBvc0NlbnRlcihpbm5lcik7XHJcbiAgICBsZXQgaW5uZXJTdGFydFBvcyA9IEdldFJlY3RQb3NTdGFydChpbm5lcik7XHJcbiAgICBsZXQgaW5uZXJFbmRQb3MgPSBHZXRSZWN0UG9zRW5kKGlubmVyKTtcclxuICAgIGxldCBvdXR0ZXJTdGFydFBvcyA9IEdldFJlY3RQb3NTdGFydChvdXR0ZXIpO1xyXG4gICAgbGV0IG91dHRlckVuZFBvcyA9IEdldFJlY3RQb3NFbmQob3V0dGVyKTtcclxuXHJcbiAgICBsZXQgeCA9IGNlbnRlclBvcy54O1xyXG4gICAgaWYoaW5uZXJTdGFydFBvcy54IDwgb3V0dGVyU3RhcnRQb3MueCl7XHJcbiAgICAgICAgeCA9IG91dHRlclN0YXJ0UG9zLnggKyBHZXRSZWN0SGFsZldpZHRoKGlubmVyKTtcclxuICAgIH1lbHNlIGlmKGlubmVyRW5kUG9zLnggPiBvdXR0ZXJFbmRQb3MueCl7XHJcbiAgICAgICAgeCA9IG91dHRlckVuZFBvcy54IC0gR2V0UmVjdEhhbGZXaWR0aChpbm5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHkgPSBjZW50ZXJQb3MueTtcclxuICAgIGlmKGlubmVyU3RhcnRQb3MueSA8IG91dHRlclN0YXJ0UG9zLnkpe1xyXG4gICAgICAgIHkgPSBvdXR0ZXJTdGFydFBvcy55ICsgR2V0UmVjdEhhbGZIZWlnaHQoaW5uZXIpO1xyXG4gICAgfWVsc2UgaWYoaW5uZXJFbmRQb3MueSA+IG91dHRlckVuZFBvcy55KXtcclxuICAgICAgICB5ID0gb3V0dGVyU3RhcnRQb3MueSAtIEdldFJlY3RIYWxmSGVpZ2h0KGlubmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBGaXhVbml0UG9zKGlubmVyLCB4LCB5KTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiDlvZPliY3kvY3nva7mmK/lkKblnKjnn6nlvaLkuK3vvIjlkIzmoLfpnIDopoHlhYjmm7TmlrByZWN05L2N572u77yJXHJcbiAqIOWMheWQq+i4qee6v+aDheWGtVxyXG4gKi9cclxuZnVuY3Rpb24gSXNQb3NJblJlY3QocG9zID0gbnVsbCwgcmVjdFBvc1R1cGxlID0gbnVsbCl7XHJcbiAgICBsZXQgc3RhcnRQb3MgPSBHZXRSZWN0UG9zQ2VudGVyKHJlY3RQb3NUdXBsZSk7XHJcbiAgICBsZXQgZW5kUG9zID0gR2V0UmVjdFBvc0VuZChyZWN0UG9zVHVwbGUpO1xyXG4gICAgcmV0dXJuIHBvcy54ID49IHN0YXJ0UG9zLnggJiYgcG9zLnggPD0gZW5kUG9zLnhcclxuICAgICAgICAmJiBwb3MueSA+PSBzdGFydFBvcy55ICYmIHBvcy55IDw9IGVuZFBvcy55O1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgTmV3UmVjdFBvc1JlbGF0aW9uLCBHZXRSZWN0LCBHZXRSZWN0UG9zQ2VudGVyLCBHZXRSZWN0UG9zU3RhcnQsIEdldFJlY3RQb3NFbmQsXHJcbiAgICBJc1JlY3RzQ3Jvc3MsIElzUG9zSW5SZWN0XHJcbn1cclxuXHJcblxyXG5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLSDku6XkuIvlvoXlrppcclxuXHJcbi8qKlxyXG4gKiDmoLnmja7nur/mrrXkvZznn6nlvaJcclxuICovXHJcbmZ1bmN0aW9uIE5ld091dHRlclJlY3QoeDEgPSAwLCB5MSA9IDAsIHgyID0gMCwgeTIgPSAwKXtcclxuICAgIGxldCB3aWR0aCA9IHgyIC0geDE7XHJcbiAgICBsZXQgaGVpZ2h0ID0geTIgLSB5MTtcclxuICAgIGlmKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDApe1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgbGV0IGNlbnRlclggPSB4MSArICh4MiAtIHgxKSAqIDAuNTtcclxuICAgIGxldCBjZW50ZXJZID0geTEgKyAoeTIgLSB5MSkgKiAwLjU7XHJcbiAgICBsZXQgcmVjdCA9IE5ld1JlY3REZWZhdWx0KHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgVXBkYXRlUmVjdFBvcyhyZWN0LCBjZW50ZXJYLCBjZW50ZXJZKTtcclxuICAgIHJldHVybiByZWN0O1xyXG59XHJcblxyXG4vKipcclxuICog5Lik5Liq55+p5b2i6Ze055qE5aSW5o6l55+p5b2iXHJcbiAqL1xyXG5mdW5jdGlvbiBOZXdPdXR0ZXJSZWN0QnlSZWN0cyhyZWN0MSA9IG51bGwsIHJlY3QyID0gbnVsbCl7XHJcbiAgICBsZXQgcjF4MSA9IEdldFJlY3RYMShyZWN0MSk7XHJcbiAgICBsZXQgcjJ4MSA9IEdldFJlY3RYMShyZWN0Mik7XHJcbiAgICBsZXQgeDEgPSByMXgxIDwgcjJ4MSA/IHIxeDEgOiByMngxO1xyXG4gICAgbGV0IHIxeDIgPSBHZXRSZWN0WDIocmVjdDEpO1xyXG4gICAgbGV0IHIyeDIgPSBHZXRSZWN0WDIocmVjdDIpO1xyXG4gICAgbGV0IHgyID0gcjF4MiA+IHIyeDIgPyByMXgyIDogcjJ4MjtcclxuXHJcbiAgICBsZXQgcjF5MSA9IEdldFJlY3RZMShyZWN0MSk7XHJcbiAgICBsZXQgcjJ5MSA9IEdldFJlY3RZMShyZWN0Mik7XHJcbiAgICBsZXQgeTEgPSByMXkxIDwgcjJ5MSA/IHIxeTEgOiByMnkxO1xyXG4gICAgbGV0IHIxeTIgPSBHZXRSZWN0WTIocmVjdDEpO1xyXG4gICAgbGV0IHIyeTIgPSBHZXRSZWN0WTIocmVjdDIpO1xyXG4gICAgbGV0IHkyID0gcjF5MiA+IHIyeTIgPyByMXkyIDogcjJ5MjtcclxuXHJcbiAgICByZXR1cm4gTmV3T3V0dGVyUmVjdCh4MSwgeTEsIHgyLCB5Mik7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog55+p5b2i5o6S5pal77yMdGFyZ2V0UmVjdOS8muiiq2Jsb2NrUmVjdOW8ueWHuuWOu1xyXG4gKiBUT0RP77yM5Lul5ZCO5a6M5ZaE5rOo6YeKXHJcbiAqL1xyXG5mdW5jdGlvbiBGaXhFeGNsdWRlUmVjdChibG9ja1JlY3QgPSBudWxsLCB0YXJnZXRSZWN0ID0gbnVsbCl7XHJcbiAgICBsZXQgcG9zMSA9IGJsb2NrUmVjdC5wb3M7XHJcbiAgICBsZXQgcG9zMiA9IHRhcmdldFJlY3QucG9zO1xyXG4gICAgLy/orqHnrpflhbPns7vvvIzkuIrkuIvlt6blj7NcclxuICAgIGxldCB2eCA9IHBvczEueCAtIHBvczIueDtcclxuICAgIGxldCB2eSA9IHBvczEueSAtIHBvczIueTtcclxuICAgIGxldCB4ID0gdnggPCAwID8gdngqLTEgOiB2eDtcclxuICAgIGxldCB5ID0gdnkgPCAwID8gdnkqLTEgOiB2eTtcclxuICAgIGlmKHggPiB5KXtcclxuICAgICAgICAvL+W3puWPs1xyXG4gICAgICAgIGlmKHZ4ID4gMCl7XHJcbiAgICAgICAgICAgIC8vcmVjdDLlnKjlt6ZcclxuICAgICAgICAgICAgcG9zMi54ID0gYmxvY2tSZWN0LnBvc1N0YXJ0LnggLSB0YXJnZXRSZWN0LndpZHRoIC0gdGFyZ2V0UmVjdC54T2Zmc2V0O1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAvL3JlY3Qy5Zyo5Y+zXHJcbiAgICAgICAgICAgIHBvczIueCA9IGJsb2NrUmVjdC5wb3NFbmQueCAtIHRhcmdldFJlY3QueE9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICAvL+S4iuS4i1xyXG4gICAgICAgIGlmKHZ5ID4gMCl7XHJcbiAgICAgICAgICAgIC8vcmVjdDLlnKjkuIpcclxuICAgICAgICAgICAgcG9zMi55ID0gYmxvY2tSZWN0LnBvc1N0YXJ0LnkgLSB0YXJnZXRSZWN0LmhlaWdodCAtIHRhcmdldFJlY3QueU9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgLy9yZWN0MuWcqOS4i1xyXG4gICAgICAgICAgICBwb3MyLnkgPSBibG9ja1JlY3QucG9zRW5kLnkgLSB0YXJnZXRSZWN0LnlPZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgVXBkYXRlUmVjdCh0YXJnZXRSZWN0KTtcclxufSIsImltcG9ydCB7IE5ld1JlY3RQb3NSZWxhdGlvbiwgR2V0UmVjdFBvc1N0YXJ0LCBHZXRSZWN0IH0gZnJvbSBcIi4uLy4uL2ZvdW5kYXRpb24vb2Zmc2V0L3JlY3RcIjtcclxuaW1wb3J0IHsgTmV3UG9zLCBOZXdSZWN0LCBHZXRSZWN0V2lkdGgsIEdldFJlY3RIZWlnaHQgfSBmcm9tIFwiLi4vLi4vZm91bmRhdGlvbi9zdHJ1Y3R1cmUvZ2VvbWV0cmljXCI7XHJcblxyXG4vKipcclxuICog5pGE5YOP5py65oq96LGh57G7XHJcbiAqIOebruWJje+8jENhbWVyYeWNs+aYr1JlY3RQb3NUdXBsZe+8jOWPquaYr+WFtm9mZnNldD0w6ICM5beyXHJcbiAqIOWQjue7reWPr+iDveS8muWinuWKoOaWsOWxnuaAp++8jOWFiOeUqOS4quexu+adpeWBmlxyXG4gKi9cclxuY2xhc3MgQmFzZUNhbWVyYSB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZWN0UG9zUmVsID0gbnVsbCwgc2NyZWVuT2Zmc2V0ID0gbnVsbCl7XHJcbiAgICAgICAgdGhpcy5yZWN0UG9zUmVsID0gcmVjdFBvc1JlbDtcclxuICAgICAgICB0aGlzLnNjcmVlbk9mZnNldCA9IHNjcmVlbk9mZnNldDsgICAvL+Wxj+W5leW3puS4iuinkuWBj+enu+mHj1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBOZXdDYW1lcmEoeCA9IDAsIHkgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDApe1xyXG4gICAgbGV0IHBvcyA9IE5ld1Bvcyh4LCB5KTtcclxuICAgIGxldCBycCA9IE5ld1JlY3RQb3NSZWxhdGlvbihwb3MsIG51bGwsIE5ld1JlY3Qod2lkdGgsIGhlaWdodCkpO1xyXG4gICAgcmV0dXJuIG5ldyBCYXNlQ2FtZXJhKHJwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0Q2FtZXJhU3RhcnRQb3MoY2FtZXJhID0gbnVsbCl7XHJcbiAgICByZXR1cm4gR2V0UmVjdFBvc1N0YXJ0KGNhbWVyYS5yZWN0UG9zUmVsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0Q2FtZXJhV2lkdGgoY2FtZXJhID0gbnVsbCl7XHJcbiAgICByZXR1cm4gR2V0UmVjdFdpZHRoKFxyXG4gICAgICAgIEdldFJlY3QoY2FtZXJhLnJlY3RQb3NSZWwpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0Q2FtZXJhSGVpZ2h0KGNhbWVyYSA9IG51bGwpe1xyXG4gICAgcmV0dXJuIEdldFJlY3RIZWlnaHQoXHJcbiAgICAgICAgR2V0UmVjdChjYW1lcmEucmVjdFBvc1JlbCkpO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgTmV3Q2FtZXJhLCBHZXRDYW1lcmFTdGFydFBvcyxcclxuICAgIEdldENhbWVyYVdpZHRoLCBHZXRDYW1lcmFIZWlnaHRcclxufSIsImltcG9ydCB7IE5ld0NhbWVyYSwgR2V0Q2FtZXJhU3RhcnRQb3MgfSBmcm9tIFwiLi9iYXNlXCI7XHJcbmltcG9ydCB7IFRvTG9jYXRlUG9zIH0gZnJvbSBcIi4uLy4uL2ZvdW5kYXRpb24vc3RydWN0dXJlL2dlb21ldHJpY1wiO1xyXG5cclxuLyoqXHJcbiAqIG9wdGlvbnMgPSB7XHJcbiAqICAgICAgc3R5bGUgOiAwLFxyXG4gKiAgICAgIGRhdGFzIDogW1xyXG4gKiAgICAgICAgICB7XHJcbiAqICAgICAgICAgICAgICB4IDogMCwgeSA6IDAsICBcclxuICogICAgICAgICAgICAgIC8v5omp5bGV77yab2Zmc2V0LXggOiAwLCBvZmZzZXQteSA6IDAsIHdpZHRoIDogMCwgaGVpZ2h0IDogMFxyXG4gKiAgICAgICAgICB9XHJcbiAqICAgICAgXVxyXG4gKiB9XHJcbiAqL1xyXG5mdW5jdGlvbiBDcmVhdGVDYW1lcmFXaXRoRGF0YShvcHRpb25zID0gbnVsbCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwKXtcclxuICAgIC8v6buY6K6k5YC8XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyA/IG9wdGlvbnMgOiB7XHJcbiAgICAgICAgc3R5bGUgOiAwLFxyXG4gICAgICAgIGRhdGFzIDogW3t4IDogMCwgeSA6IDB9XVxyXG4gICAgfTtcclxuICAgIC8vVE9ET1xyXG4gICAgbGV0IGMgPSBvcHRpb25zLmRhdGFzWzBdO1xyXG4gICAgcmV0dXJuIE5ld0NhbWVyYShjWyd4J10sIGNbJ3knXSwgd2lkdGgsIGhlaWdodCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFRvQ2FtZXJhU3RhcnRQb3MoY2FtZXJhID0gbnVsbCwgcG9zID0gbnVsbCl7XHJcbiAgICByZXR1cm4gVG9Mb2NhdGVQb3MoXHJcbiAgICAgICAgcG9zLCBHZXRDYW1lcmFTdGFydFBvcyhjYW1lcmEpKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIENyZWF0ZUNhbWVyYVdpdGhEYXRhLFxyXG4gICAgVG9DYW1lcmFTdGFydFBvc1xyXG59IiwiaW1wb3J0IHsgR2V0RW5naW5lLCBHZXREZWZhdWx0Q2FtZXJhIH0gZnJvbSBcIi4vc2VydmljZS9yZXNvdXJjZVwiO1xyXG5pbXBvcnQgeyBFbmdpbmVEcmF3RnJhbWUsIEVuZ2luZURyYXdSZWN0LCBFbmdpbmVDbGVhciwgRW5naW5lRHJhd0xpbmUsIEVuZ2luZURyYXdDaXJjbGUgfSBmcm9tIFwiLi4vbGliL2VuZ2luZS9iYXNlXCI7XHJcbmltcG9ydCB7IFRvQ2FtZXJhU3RhcnRQb3MgfSBmcm9tIFwiLi4vbGliL2NhbWVyYS91dGlsc1wiO1xyXG5cclxuLyoqXHJcbiAqIOa4hemZpOeUu+W4g1xyXG4gKi9cclxuZnVuY3Rpb24gQ2xlYXIoKXtcclxuICAgIEVuZ2luZUNsZWFyKEdldEVuZ2luZSgpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRPRE8g5Y+v6IO95Lya5pS55oiQc3ByaXRlRnJhbWVJZOWPguaVsFxyXG4gKi9cclxuZnVuY3Rpb24gRHJhd0ZyYW1lKHBvcyA9IG51bGwsIHNwcml0ZUZyYW1lID0gbnVsbCl7XHJcbiAgICBEcmF3RnJhbWVJbkNhbWVyYShcclxuICAgICAgICBHZXREZWZhdWx0Q2FtZXJhKCksIHBvcywgc3ByaXRlRnJhbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBEcmF3RnJhbWVJbkNhbWVyYShjYW1lcmEgPSBudWxsLCBwb3MgPSBudWxsLCBzcHJpdGVGcmFtZSA9IG51bGwpe1xyXG4gICAgbGV0IGNQb3MgPSBUb0NhbWVyYVN0YXJ0UG9zKGNhbWVyYSwgcG9zKTtcclxuICAgIEVuZ2luZURyYXdGcmFtZShHZXRFbmdpbmUoKSwgY1Bvcywgc3ByaXRlRnJhbWUpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBEcmF3UmVjdChwb3MgPSBudWxsLCByZWN0ID0gbnVsbCl7XHJcbiAgICBEcmF3UmVjdEluQ2FtZXJhKFxyXG4gICAgICAgIEdldERlZmF1bHRDYW1lcmEoKSwgcG9zLCByZWN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gRHJhd1JlY3RJbkNhbWVyYShjYW1lcmEgPSBudWxsLCBwb3MgPSBudWxsLCByZWN0ID0gbnVsbCl7XHJcbiAgICBsZXQgY1BvcyA9IFRvQ2FtZXJhU3RhcnRQb3MoY2FtZXJhLCBwb3MpO1xyXG4gICAgRW5naW5lRHJhd1JlY3QoR2V0RW5naW5lKCksIGNQb3MsIHJlY3QpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBEcmF3TGluZShwb3NTdGFydCA9IG51bGwsIHBvc0VuZCA9IG51bGwpe1xyXG4gICAgRHJhd0xpbmVJbkNhbWVyYShcclxuICAgICAgICBHZXREZWZhdWx0Q2FtZXJhKCksIHBvc1N0YXJ0LCBwb3NFbmQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBEcmF3TGluZUluQ2FtZXJhKGNhbWVyYSA9IG51bGwsIHBvc1N0YXJ0ID0gbnVsbCwgcG9zRW5kID0gbnVsbCl7XHJcbiAgICBsZXQgY1BvczEgPSBUb0NhbWVyYVN0YXJ0UG9zKGNhbWVyYSwgcG9zU3RhcnQpO1xyXG4gICAgbGV0IGNQb3MyID0gVG9DYW1lcmFTdGFydFBvcyhjYW1lcmEsIHBvc0VuZCk7XHJcbiAgICBFbmdpbmVEcmF3TGluZShHZXRFbmdpbmUoKSwgY1BvczEsIGNQb3MyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gRHJhd0NpcmNsZShwb3MgPSBudWxsLCByYWRpdXMgPSAwKXtcclxuICAgIERyYXdDaXJjbGVJbkNhbWVyYShcclxuICAgICAgICBHZXREZWZhdWx0Q2FtZXJhKCksIHBvcywgcmFkaXVzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gRHJhd0NpcmNsZUluQ2FtZXJhKGNhbWVyYSA9IG51bGwsIHBvcyA9IG51bGwsIHJhZGl1cyA9IDApe1xyXG4gICAgbGV0IGNQb3MgPSBUb0NhbWVyYVN0YXJ0UG9zKGNhbWVyYSwgcG9zKTtcclxuICAgIEVuZ2luZURyYXdDaXJjbGUoR2V0RW5naW5lKCksIGNQb3MsIHJhZGl1cyk7XHJcbn1cclxuXHJcbmV4cG9ydHtcclxuICAgIENsZWFyLCBEcmF3RnJhbWUsIERyYXdGcmFtZUluQ2FtZXJhLFxyXG4gICAgRHJhd1JlY3QsIERyYXdSZWN0SW5DYW1lcmEsIFxyXG4gICAgRHJhd0xpbmUsIERyYXdMaW5lSW5DYW1lcmEsXHJcbiAgICBEcmF3Q2lyY2xlLCBEcmF3Q2lyY2xlSW5DYW1lcmFcclxufSIsIlxyXG4vKipcclxuICog5aSW6YOo5byV5pOO5oq96LGh57G7XHJcbiAqIHgsIHkg6YO95piv5bGP5bmV5Z2Q5qCH77yM5rOo5oSPXHJcbiAqL1xyXG5jbGFzcyBBYnN0cmFjdEVuZ2luZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihmcHMgPSA2MCl7XHJcbiAgICAgICAgdGhpcy5mcHMgPSBmcHM7XHJcbiAgICAgICAgdGhpcy50aWNrID0gMTAwMCAvIGZwcztcclxuICAgIH1cclxuXHJcbiAgICAvL+a4hemZpOeUu+W4g1xyXG4gICAgY2xlYXIoKXt9XHJcblxyXG4gICAgLy/nlLvluKdcclxuICAgIGRyYXdGcmFtZShjZW50ZXJQb3MgPSBudWxsLCBzcHJpdGVGcmFtZSA9IG51bGwpe31cclxuXHJcbiAgICAvL+eUu+efqeW9olxyXG4gICAgZHJhd1JlY3QoY2VudGVyUG9zID0gbnVsbCwgcmVjdCA9IG51bGwpe31cclxuXHJcbiAgICAvL+eUu+e6v+autVxyXG4gICAgZHJhd0xpbmUoY2VudGVyUG9zID0gbnVsbCwgZW5kUG9zID0gbnVsbCl7fVxyXG5cclxuICAgIC8v55S75ZyGXHJcbiAgICBkcmF3Q2lyY2xlKGNlbnRlclBvcyA9IG51bGwsIHJhZGl1cyA9IDApe31cclxuXHJcbiAgICAvL2ltZ1NyY+aYr+WbvuWDj+WcsOWdgFxyXG4gICAgbG9hZFJlc291cmNlKGltZ1NyYyA9IFwiXCIsIG9uTG9hZENhbGxiYWNrID0gbnVsbCl7fVxyXG5cclxuICAgIG9uS2V5Q2FsbGJhY2soa2V5RG93bkNhbGxiYWNrID0gbnVsbCwga2V5VXBDYWxsYmFjayA9IG51bGwpe31cclxuICAgIG9uVG91Y2hDYWxsYmFjayh0b3VjaE9uQ2FsbGJhY2sgPSBudWxsLCB0b3VjaE92ZXJDYWxsYmFjayA9IG51bGwpe31cclxuICAgIHN0YXJ0KG9uRW50ZXJGcmFtZUNhbGxiYWNrID0gbnVsbCl7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBFbmdpbmVDbGVhcihlbmdpbmUgPSBudWxsKXtcclxuICAgIGVuZ2luZS5jbGVhcigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBFbmdpbmVEcmF3RnJhbWUoZW5naW5lID0gbnVsbCwgY2VudGVyUG9zID0gbnVsbCwgc3ByaXRlRnJhbWUgPSBudWxsKXtcclxuICAgIGVuZ2luZS5kcmF3RnJhbWUoY2VudGVyUG9zLCBzcHJpdGVGcmFtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEVuZ2luZURyYXdSZWN0KGVuZ2luZSA9IG51bGwsIGNlbnRlclBvcyA9IG51bGwsIHJlY3QgPSBudWxsKXtcclxuICAgIGVuZ2luZS5kcmF3UmVjdChjZW50ZXJQb3MsIHJlY3QpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBFbmdpbmVEcmF3TGluZShlbmdpbmUgPSBudWxsLCBzdGFydFBvcyA9IG51bGwsIGVuZFBvcyA9IG51bGwpe1xyXG4gICAgZW5naW5lLmRyYXdMaW5lKHN0YXJ0UG9zLCBlbmRQb3MpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBFbmdpbmVEcmF3Q2lyY2xlKGVuZ2luZSA9IG51bGwsIGNlbnRlclBvcyA9IG51bGwsIHJhZGl1cyA9IDApe1xyXG4gICAgZW5naW5lLmRyYXdDaXJjbGUoY2VudGVyUG9zLCByYWRpdXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBFbmdpbmVMb2FkUmVzb3VyY2UoZW5naW5lID0gbnVsbCwgaW1nU3JjID0gXCJcIiwgb25Mb2FkQ2FsbGJhY2sgPSBudWxsKXtcclxuICAgIGVuZ2luZS5sb2FkUmVzb3VyY2UoaW1nU3JjLCBvbkxvYWRDYWxsYmFjayk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEVuZ2luZU9uS2V5Q2FsbGJhY2soZW5naW5lID0gbnVsbCwga2V5RG93bkNhbGxiYWNrID0gbnVsbCwga2V5VXBDYWxsYmFjayA9IG51bGwpe1xyXG4gICAgZW5naW5lLm9uS2V5Q2FsbGJhY2soa2V5RG93bkNhbGxiYWNrLCBrZXlVcENhbGxiYWNrKTtcclxufVxyXG5cclxuZnVuY3Rpb24gRW5naW5lT25Ub3VjaENhbGxiYWNrKGVuZ2luZSA9IG51bGwsIHRvdWNoT25DYWxsYmFjayA9IG51bGwsIHRvdWNoT3ZlckNhbGxiYWNrID0gbnVsbCl7XHJcbiAgICBlbmdpbmUub25Ub3VjaENhbGxiYWNrKHRvdWNoT25DYWxsYmFjaywgdG91Y2hPdmVyQ2FsbGJhY2spO1xyXG59XHJcblxyXG5mdW5jdGlvbiBFbmdpbmVTdGFydChlbmdpbmUgPSBudWxsLCBvbkVudGVyRnJhbWVDYWxsYmFjayA9IG51bGwpe1xyXG4gICAgZW5naW5lLnN0YXJ0KG9uRW50ZXJGcmFtZUNhbGxiYWNrKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIEFic3RyYWN0RW5naW5lLCBFbmdpbmVDbGVhciwgXHJcbiAgICBFbmdpbmVEcmF3RnJhbWUsIEVuZ2luZURyYXdSZWN0LCBFbmdpbmVEcmF3TGluZSwgRW5naW5lRHJhd0NpcmNsZSxcclxuICAgIEVuZ2luZUxvYWRSZXNvdXJjZSwgRW5naW5lT25LZXlDYWxsYmFjaywgRW5naW5lT25Ub3VjaENhbGxiYWNrLCBFbmdpbmVTdGFydFxyXG59IiwiLyoqXHJcbiAqIOaKveixoeWIl+ihqOaTjeS9nFxyXG4gKi9cclxuY2xhc3MgQWJzdHJhY3RMaXN0IHtcclxuICAgIGNvbnN0cnVjdG9yKCl7fVxyXG4gICAgZ2V0KGlkID0gMCl7fSAgICAgICAgICAvL+agueaNrmlk6I635b6XXHJcbiAgICBmaXJzcigpe31cclxuICAgIGxhc3QoKXt9XHJcbiAgICBzaXplKCl7fSAgICAgICAgICAgICAgICAvL+i/lOWbnumVv+W6plxyXG4gICAgYWRkKGRhdGEgPSBudWxsKXt9ICAgICAgLy/lsL7pg6jov73liqBcclxuICAgIHB1c2goZGF0YSA9IG51bGwpe30gICAgIC8v5aS06YOo6L+95YqgXHJcbiAgICBpbnNlcnQoZGF0YSA9IG51bGwsIG9yZGVyID0gMCl7fSAgICAvL+aPkuWFpeWIsOaMh+WumumhuuW6j++8jOebuOWQjG9yZGVy6Ze055qE5YWI5ZCO6aG65bqP55yL5YW35L2T5a6e546w6YC76L6RXHJcbiAgICBwb3AoKXt9ICAgICAgICAgICAgICAgLy/np7vpmaTlpLTpg6jlhYPntKBcclxuICAgIHB1bGwoKXt9ICAgICAgICAgICAgICAvL+enu+mZpOWwvumDqOWFg+e0oFxyXG4gICAgcmVtb3ZlKGlkID0gMCl7fSAgICAgIC8v5qC55o2uaWTnp7vpmaRcclxuICAgIGl0ZXJhdG9yKGNhbGxiYWNrID0gbnVsbCl7fVxyXG4gICAgaXRlcmF0b3JSZXZlcnNlKGNhbGxiYWNrID0gbnVsbCl7fVxyXG4gICAgaXRlcmF0b3JDb21wYXJlKGNhbGxiYWNrID0gbnVsbCl7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBHZXRMaXN0RGF0YShsaXN0ID0gbnVsbCwgaWQgPSAwLCByZXF1aXJlZCA9IGZhbHNlKXtcclxuICAgIGxldCBkYXRhID0gbGlzdC5nZXQoaWQpO1xyXG4gICAgaWYoIWRhdGEgJiYgcmVxdWlyZWQpe1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJjYW4ndCBmaW5kIGtleUlkOiBcIiwgaWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldExpc3RGaXJzdChsaXN0ID0gbnVsbCl7XHJcbiAgICByZXR1cm4gbGlzdC5maXJzdCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBHZXRMaXN0TGFzdChsaXN0ID0gbnVsbCl7XHJcbiAgICByZXR1cm4gbGlzdC5sYXN0KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldExpc3RTaXplKGxpc3QgPSBudWxsKXtcclxuICAgIHJldHVybiBsaXN0LnNpemUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tBZGQobGlzdCA9IG51bGwsIGRhdGEgPSBudWxsKXtcclxuICAgIGlmKCFsaXN0IHx8ICFkYXRhIHx8ICFkYXRhLmlkKXtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiZXJyb3IgcGFyYW0uXCIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8v5LiN6IO96YeN5aSN5re75YqgXHJcbiAgICBsZXQgZCA9IEdldExpc3REYXRhKGxpc3QsIGRhdGEuaWQpO1xyXG4gICAgaWYoZCl7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcImVycm9yIGlkOiVkIGlzIGV4aXN0XCIsIGRhdGEuaWQpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICog5bC+6YOo6L+95YqgXHJcbiAqIEBwYXJhbSB7Kn0gbGlzdCBcclxuICogQHBhcmFtIHsqfSBkYXRhIFxyXG4gKi9cclxuZnVuY3Rpb24gQWRkVG9MaXN0KGxpc3QgPSBudWxsLCBkYXRhID0gbnVsbCl7XHJcbiAgICBpZihjaGVja0FkZChsaXN0LCBkYXRhKSl7XHJcbiAgICAgICAgbGlzdC5hZGQoZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlpLTpg6jov73liqBcclxuICogQHBhcmFtIHsqfSBsaXN0IFxyXG4gKiBAcGFyYW0geyp9IGRhdGEgXHJcbiAqL1xyXG5mdW5jdGlvbiBQdXNoVG9MaXN0KGxpc3QgPSBudWxsLCBkYXRhID0gbnVsbCl7XHJcbiAgICBpZihjaGVja0FkZChsaXN0LCBkYXRhKSl7XHJcbiAgICAgICAgbGlzdC5wdXNoKGRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog5qC55o2u6aG65bqP5Y+35o+S5YWlXHJcbiAqIEBwYXJhbSB7Kn0gbGlzdCBcclxuICogQHBhcmFtIHsqfSBkYXRhIFxyXG4gKiBAcGFyYW0geyp9IG9yZGVyIFxyXG4gKi9cclxuZnVuY3Rpb24gSW5zZXJ0VG9MaXN0KGxpc3QgPSBudWxsLCBkYXRhID0gbnVsbCwgb3JkZXIgPSAwKXtcclxuICAgIGlmKGNoZWNrQWRkKGxpc3QsIGRhdGEpKXtcclxuICAgICAgICBsaXN0Lmluc2VydChkYXRhLCBvcmRlcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlpLTpg6jnp7vpmaRcclxuICogQHBhcmFtIHsqfSBsaXN0IFxyXG4gKi9cclxuZnVuY3Rpb24gUG9wRnJvbUxpc3QobGlzdCA9IG51bGwpe1xyXG4gICAgbGlzdC5wb3AoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWwvumDqOenu+mZpFxyXG4gKiBAcGFyYW0geyp9IGxpc3QgXHJcbiAqL1xyXG5mdW5jdGlvbiBQdWxsRnJvbUxpc3QobGlzdCA9IG51bGwpe1xyXG4gICAgbGlzdC5wdWxsKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmoLnmja5pZOenu+mZpFxyXG4gKiBAcGFyYW0geyp9IGxpc3QgXHJcbiAqIEBwYXJhbSB7Kn0gaWQgXHJcbiAqL1xyXG5mdW5jdGlvbiBSZW1vdmVGcm9tTGlzdChsaXN0ID0gbnVsbCwgaWQgPSAwKXtcclxuICAgIGxpc3QucmVtb3ZlKGlkKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOato+WQkemBjeWOhlxyXG4gKiBAcGFyYW0geyp9IGxpc3QgXHJcbiAqIEBwYXJhbSB7Kn0gY2FsbGJhY2sgZnVuYyhkYXRhKXsgcmV0dXJuIGJvb2x9IOiLpWJvb2w9dHJ1Ze+8jOWImee7iOatoumBjeWOhlxyXG4gKi9cclxuZnVuY3Rpb24gTGlzdEl0ZXJhdG9yKGxpc3QgPSBudWxsLCBjYWxsYmFjayA9IG51bGwpe1xyXG4gICAgaWYoIWxpc3QgfHwgIWNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy9sb2cgaGVyZVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgbGlzdC5pdGVyYXRvcihjYWxsYmFjayk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlj43lkJHpgY3ljoZcclxuICogQHBhcmFtIHsqfSBsaXN0IFxyXG4gKiBAcGFyYW0geyp9IGNhbGxiYWNrIFxyXG4gKi9cclxuZnVuY3Rpb24gTGlzdEl0ZXJhdG9yUmV2ZXJzZShsaXN0ID0gbnVsbCwgY2FsbGJhY2sgPSBudWxsKXtcclxuICAgIGlmKCFsaXN0IHx8ICFjYWxsYmFjaykge1xyXG4gICAgICAgIC8vbG9nIGhlcmVcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGxpc3QuaXRlcmF0b3JSZXZlcnNlKGNhbGxiYWNrKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWGhemDqOS+neasoeWvueavlFxyXG4gKiBAcGFyYW0geyp9IGxpc3QgXHJcbiAqIEBwYXJhbSB7Kn0gY2FsbGJhY2sgZnVuYyhkYXRhMSwgZGF0YTIpIHJldHVybiBib29sIOiLpWJvb2w9dHJ1Ze+8jOWImee7iOatoumBjeWOhlxyXG4gKi9cclxuZnVuY3Rpb24gTGlzdEl0ZXJhdG9yQ29tcGFyZShsaXN0ID0gbnVsbCwgY2FsbGJhY2sgPSBudWxsKXtcclxuICAgIGlmKCFsaW5rIHx8ICFjYWxsYmFjaykge1xyXG4gICAgICAgIC8vbG9nIGhlcmVcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGxpc3QuaXRlcmF0b3JDb21wYXJlKGNhbGxiYWNrKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIEFic3RyYWN0TGlzdCxcclxuICAgIEdldExpc3REYXRhLCBHZXRMaXN0Rmlyc3QsIEdldExpc3RMYXN0LCBHZXRMaXN0U2l6ZSwgXHJcbiAgICBBZGRUb0xpc3QsIFB1c2hUb0xpc3QsIEluc2VydFRvTGlzdCwgUG9wRnJvbUxpc3QsIFB1bGxGcm9tTGlzdCwgUmVtb3ZlRnJvbUxpc3QsXHJcbiAgICBMaXN0SXRlcmF0b3IsIExpc3RJdGVyYXRvclJldmVyc2UsIExpc3RJdGVyYXRvckNvbXBhcmVcclxufSIsImltcG9ydCB7IEFic3RyYWN0TGlzdCB9IGZyb20gXCIuLi8uLi9mb3VuZGF0aW9uL2NvbnRhaW5lci9saXN0XCI7XHJcblxyXG5jbGFzcyBMaW5rTm9kZSB7XHJcblx0Y29uc3RydWN0b3IoZGF0YSA9IG51bGwsIHByZXAgPSBudWxsLCBuZXh0ID0gbnVsbCwgb3JkZXIgPSAwKSB7XHJcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xyXG5cdFx0dGhpcy5wcmVwID0gcHJlcDtcclxuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xyXG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIExpbmtMaXN0IGV4dGVuZHMgQWJzdHJhY3RMaXN0IHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cdFx0dGhpcy5oZWFkID0gbmV3IExpbmtOb2RlKCk7XHRcdC8vZW1wdHkgZGF0YSBub2RlXHJcblx0XHR0aGlzLnRhaWwgPSBuZXcgTGlua05vZGUoKTtcclxuXHRcdHRoaXMuaGVhZC5uZXh0ID0gdGhpcy50YWlsO1xyXG5cdFx0dGhpcy50YWlsLnByZXAgPSB0aGlzLmhlYWQ7XHJcblx0XHR0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XHJcblx0XHR0aGlzLl9zaXplID0gMDtcclxuICAgICAgICB0aGlzLl9kZWxMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5fY3VyciA9IHRoaXMuaGVhZDtcclxuICAgICAgICB0aGlzLl9sb2NrID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGdldChpZCA9IDApe1xyXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5fbWFwLmdldChpZCk7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUgPyBub2RlLmRhdGEgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGZpcnN0KCl7XHJcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmhlYWQubmV4dDtcclxuICAgICAgICByZXR1cm4gbm9kZSA9PSB0aGlzLnRhaWwgPyBudWxsIDogbm9kZS5kYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGxhc3QoKXtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMudGFpbC5wcmVwO1xyXG4gICAgICAgIHJldHVybiBub2RlID09IHRoaXMuaGVhZCA/IG51bGwgOiBub2RlLmRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgc2l6ZSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZChkYXRhID0gbnVsbCl7XHJcbiAgICAgICAgYWRkVG9MaW5rKHRoaXMsIGRhdGEsIHRoaXMudGFpbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVzaChkYXRhID0gbnVsbCl7XHJcbiAgICAgICAgYWRkVG9MaW5rKHRoaXMsIGRhdGEsIHRoaXMuaGVhZC5uZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBpbnNlcnQoZGF0YSA9IG51bGwsIG9yZGVyID0gMCl7XHJcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmhlYWQubmV4dDtcclxuICAgICAgICB3aGlsZShub2RlICE9IHRoaXMudGFpbCl7XHJcbiAgICAgICAgICAgIGlmKG9yZGVyIDwgbm9kZS5vcmRlcil7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZGRUb0xpbmsodGhpcywgZGF0YSwgbm9kZSwgb3JkZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvcCgpe1xyXG4gICAgICAgIHJlbW92ZVdpdGhDaGVjayh0aGlzLCB0aGlzLmhlYWQubmV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVsbCgpe1xyXG4gICAgICAgIHJlbW92ZVdpdGhDaGVjayh0aGlzLCB0aGlzLnRhaWwucHJlcCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKGlkID0gMCl7XHJcbiAgICAgICAgcmVtb3ZlV2l0aENoZWNrKHRoaXMsIHRoaXMuX21hcC5nZXQoaWQpKTtcclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRvcihjYWxsYmFjayA9IG51bGwpe1xyXG4gICAgICAgIHRoaXMuX2xvY2sgPSB0cnVlO1xyXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5oZWFkLm5leHQ7XHJcbiAgICAgICAgd2hpbGUobm9kZSAhPSB0aGlzLnRhaWwpe1xyXG4gICAgICAgICAgICBpZihjYWxsYmFjayhub2RlLmRhdGEpKXtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2xvY2sgPSBmYWxzZTtcclxuICAgICAgICB3aGlsZSh0aGlzLl9kZWxMaXN0Lmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICByZW1vdmVOb2RlKHRoaXMsIHRoaXMuX2RlbExpc3QucG9wKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpdGVyYXRvclJldmVyc2UoY2FsbGJhY2sgPSBudWxsKXtcclxuICAgICAgICB0aGlzLl9sb2NrID0gdHJ1ZTtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMudGFpbC5wcmVwO1xyXG4gICAgICAgIHdoaWxlKG5vZGUgIT0gdGhpcy5oZWFkKXtcclxuICAgICAgICAgICAgaWYoY2FsbGJhY2sobm9kZS5kYXRhKSl7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wcmVwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2NrID0gZmFsc2U7XHJcbiAgICAgICAgd2hpbGUodGhpcy5fZGVsTGlzdC5sZW5ndGggPiAwKXtcclxuICAgICAgICAgICAgcmVtb3ZlTm9kZSh0aGlzLCB0aGlzLl9kZWxMaXN0LnBvcCgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaXRlcmF0b3JDb21wYXJlKGNhbGxiYWNrID0gbnVsbCl7XHJcbiAgICAgICAgdGhpcy5fbG9jayA9IHRydWU7XHJcbiAgICAgICAgbGV0IG91dE5vZGUgPSB0aGlzLmhlYWQubmV4dDtcclxuICAgICAgICB3aGlsZShvdXROb2RlICE9IHRoaXMudGFpbCl7XHJcbiAgICAgICAgICAgIGxldCBpbk5vZGUgPSBvdXROb2RlLm5leHQ7XHJcbiAgICAgICAgICAgIHdoaWxlKGluTm9kZSAhPSB0aGlzLnRhaWwpe1xyXG4gICAgICAgICAgICAgICAgaWYoY2FsbGJhY2sob3V0Tm9kZS5kYXRhLCBpbk5vZGUuZGF0YSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5Ob2RlID0gaW5Ob2RlLm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3V0Tm9kZSA9IG91dE5vZGUubmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9jayA9IGZhbHNlO1xyXG4gICAgICAgIHdoaWxlKHRoaXMuX2RlbExpc3QubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgIHJlbW92ZU5vZGUodGhpcywgdGhpcy5fZGVsTGlzdC5wb3AoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRUb0xpbmsobGluayA9IG51bGwsIGRhdGEgPSBudWxsLCBuZXh0ID0gbnVsbCwgb3JkZXIgPSAwKXtcclxuICAgIC8v5paw6IqC54K56L+e5o6lXHJcbiAgICBsZXQgcHJlcCA9IG5leHQucHJlcDtcclxuICAgIGxldCBub2RlID0gbmV3IExpbmtOb2RlKGRhdGEsIHByZXAsIG5leHQsIG9yZGVyKTtcclxuICAgIHByZXAubmV4dCA9IG5vZGU7XHJcbiAgICBuZXh0LnByZXAgPSBub2RlO1xyXG5cclxuICAgIGxpbmsuX21hcC5zZXQoZGF0YS5pZCwgbm9kZSk7XHJcbiAgICBsaW5rLl9zaXplKys7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVdpdGhDaGVjayhsaW5rID0gbnVsbCwgdGFyZ2V0Tm9kZSA9IG51bGwpe1xyXG4gICAgaWYoIWxpbmsgfHwgIXRhcmdldE5vZGUgfHwgbGluay5fc2l6ZSA8PSAwKXtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZihsaW5rLl9sb2NrKXtcclxuICAgICAgICBsaW5rLl9kZWxMaXN0LnB1c2godGFyZ2V0Tm9kZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlTm9kZShsaW5rLCB0YXJnZXROb2RlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlTm9kZShsaW5rID0gbnVsbCwgbm9kZSA9IG51bGwpe1xyXG4gICAgbGluay5fbWFwLmRlbGV0ZShrZXlJZCk7XHJcbiAgICBsZXQgcCA9IG5vZGUucHJlcDtcclxuICAgIGxldCBuID0gbm9kZS5uZXh0O1xyXG4gICAgcC5uZXh0ID0gbjtcclxuICAgIG4ucHJlcCA9IHA7XHJcbiAgICBsaW5rLl9zaXplLS07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIE5ld0xpbmsoKXtcclxuICAgIHJldHVybiBuZXcgTGlua0xpc3QoKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIE5ld0xpbmtcclxufSIsIlxyXG4vKipcclxuICog5q+P5LiA56eN5paw57G75a+55bqU5LiA5LiqSUTvvIzkvr/kuo7lm57mlLZcclxuICovXHJcbnZhciBjbHpJZCA9IDE7XHJcbmZ1bmN0aW9uIE5leHRDbGFzc0lkKCl7XHJcblx0cmV0dXJuIGNseklkKys7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmr4/kuKrlrp7kvZPmi6XmnInkuIDkuKrni6znq4tJRFxyXG4gKi9cclxudmFyIGVudGl0eUlkID0gMTtcclxuZnVuY3Rpb24gTmV3RW50aXR5SWQoKXtcclxuXHRyZXR1cm4gZW50aXR5SWQrKztcclxufVxyXG5cclxuLyoqXHJcbiAqIOaaguWumui/meS4quWQjVxyXG4gKi9cclxuY2xhc3MgREZDbGFzcyB7XHJcblx0Y29uc3RydWN0b3IoY2x6SWQgPSAwKSB7XHJcblx0XHR0aGlzLmNseklkID0gY2x6SWQ7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICog5oul5pyJaWTlsZ7mgKfnmoTpg73nu6fmib/mraTnsbvvvIzljbNFQ1PkuK3nmoRFbnRpdHlcclxuICovXHJcbmNsYXNzIEdhbWVPYmplY3Qge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5pZCA9IE5ld0VudGl0eUlkKCk7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuKlx0VGhlIGJhc2UgQ29tcG9uZW50XHJcbipcdOavj+S4qmVudGl0eeWvueavj+enjee7hOS7tuWPquiDveaMgeacieS4gOS4qlxyXG4qL1xyXG5jbGFzcyBDb21wb25lbnQge1xyXG5cdGNvbnN0cnVjdG9yKGVudGl0eUlkID0gMCkge1xyXG5cdFx0dGhpcy5lbnRpdHlJZCA9IGVudGl0eUlkO1xyXG5cdFx0dGhpcy5pZCA9IGVudGl0eUlkO1x0XHRcdC8v57uZbGlua+S9v+eUqFxyXG5cdH1cclxufVxyXG5cclxuLyoqXHJcbipcdFRoZSBiYXNlIFN5c3RlbVxyXG4qL1xyXG5jbGFzcyBTeXN0ZW0ge1xyXG5cdGNvbnN0cnVjdG9yKCl7XHJcblx0XHR0aGlzLmlkID0gTmV3RW50aXR5SWQoKTtcclxuXHR9XHJcbiAgICBvblN0YXJ0KCl7fVxyXG4gICAgb25VcGRhdGUoZHQgPSAwKXt9XHJcbiAgICBvbkVuZCgpe31cclxufVxyXG5cclxuZXhwb3J0IHtOZXdFbnRpdHlJZCwgR2FtZU9iamVjdCwgQ29tcG9uZW50LCBTeXN0ZW19IiwiaW1wb3J0IHsgTmV3TGluayB9IGZyb20gXCIuLi8uLi9saXN0L2xpbmtsaXN0XCI7XHJcbmltcG9ydCB7IEluc2VydFRvTGlzdCwgR2V0TGlzdERhdGEsIFJlbW92ZUZyb21MaXN0LCBMaXN0SXRlcmF0b3IgfSBmcm9tIFwiLi4vLi4vLi4vZm91bmRhdGlvbi9jb250YWluZXIvbGlzdFwiO1xyXG5cclxuLyoqXHJcbiAqIOaYvuekuuWbvuWxglxyXG4gKiAgb3JkZXLotorkvY7vvIzotorlhYjmuLLmn5PvvIzlkI7muLLmn5PnmoTkvJrpga7kvY/liY3pnaLmuLLmn5PnmoRcclxuICovXHJcbmNsYXNzIExheWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9yZGVyID0gMCl7XHJcbiAgICAgICAgdGhpcy5pZCA9IG9yZGVyO1xyXG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcclxuICAgICAgICB0aGlzLmxpc3QgPSBOZXdMaW5rKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBsYXllckxpc3QgPSBOZXdMaW5rKCk7XHJcbmZ1bmN0aW9uIGFkZExheWVyKG9yZGVyID0gMCl7XHJcbiAgICBsZXQgbGF5ZXIgPSBuZXcgTGF5ZXIob3JkZXIpO1xyXG4gICAgSW5zZXJ0VG9MaXN0KGxheWVyTGlzdCwgbGF5ZXIpO1xyXG4gICAgcmV0dXJuIGxheWVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBHZXRMYXllcihvcmRlciA9IDApe1xyXG4gICAgbGV0IGxheWVyID0gR2V0TGlzdERhdGEobGF5ZXJMaXN0LCBvcmRlcik7XHJcbiAgICBpZighbGF5ZXIpe1xyXG4gICAgICAgIGxheWVyID0gYWRkTGF5ZXIob3JkZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxheWVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBJdGVyYXRvckxheWVycyhjYWxsYmFjayA9IG51bGwpe1xyXG4gICAgTGlzdEl0ZXJhdG9yKGxheWVyTGlzdCwgbGF5ZXIgPT4ge1xyXG4gICAgICAgIExpc3RJdGVyYXRvcihsYXllci5saXN0LCBkaXNwbGF5VHVwbGUgPT4ge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhkaXNwbGF5VHVwbGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gQWRkVG9MYXllcihkaXNwbGF5VHVwbGUgPSBudWxsKXtcclxuICAgIGxldCBsYXllciA9IEdldExheWVyKGRpc3BsYXlUdXBsZS5sYXllck9yZGVyKTtcclxuICAgIEluc2VydFRvTGlzdChsYXllci5saXN0LCBkaXNwbGF5VHVwbGUsIGRpc3BsYXlUdXBsZS5vcmRlcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFJlbW92ZUZyb21MYXllcihkaXNwbGF5VHVwbGUgPSBudWxsKXtcclxuICAgIGxldCBsYXllciA9IEdldExheWVyKGRpc3BsYXlUdXBsZS5vcmRlcik7XHJcbiAgICBSZW1vdmVGcm9tTGlzdChsYXllci5saXN0LCBkaXNwbGF5VHVwbGUuaWQpO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgR2V0TGF5ZXIsIEl0ZXJhdG9yTGF5ZXJzLCBBZGRUb0xheWVyLCBSZW1vdmVGcm9tTGF5ZXJcclxufSIsIi8qKlxyXG4gKiBkYXRh5bCx5piv5Zu+54mH5paH5Lu2XHJcbiAqIHdpZHRoLCBoZWlnaHTlj6/pgInvvIzmnIDlpb3mnIlcclxuICovXHJcbmNsYXNzIEJpdG1hcCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhID0gbnVsbCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENyZWF0ZUJpdG1hcChiaXRtYXBEYXRhID0gbnVsbCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwKXtcclxuICAgIHJldHVybiBuZXcgQml0bWFwKGJpdG1hcERhdGEsIHdpZHRoLCBoZWlnaHQpO1xyXG59XHJcblxyXG4vKipcclxuICog55So5LqO6KGo56S6Yml0bWFw55qE5LiA5Liq5Yy65Z+f77yM5bm26Z2ecmVjdFxyXG4gKi9cclxuY2xhc3MgU2VnIHtcclxuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwKXtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog5LiA5byg5Zu+5Lit55qE5LiA5Liq5Yy65Z+f77yM57q555CG5bin5oiW57K+54G15bin77yM5Y2V5L6L77yM5ZKM5byV5pOO5pyJ5YWzXHJcbiAqIOeyvueBteW4p+eUqOS6juagh+WHuuS4gOW8oOe6ueeQhuWbvueahOaMh+WumuWPluadkOWMuuWfn++8jOS7peWPiuebuOWvueeahOaYvuekuuS9jee9rlxyXG4gKi9cclxuY2xhc3MgU3ByaXRlRnJhbWUge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSA9IFwiXCIsIHNlZyA9IG51bGwsIGJpdG1hcCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuc2VnID0gc2VnO1xyXG4gICAgICAgIHRoaXMuYml0bWFwID0gYml0bWFwO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBDcmVhdGVTcHJpdGVGcmFtZShuYW1lID0gXCJcIiwgYml0bWFwID0gbnVsbCwgeCA9IDAsIHkgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDApe1xyXG4gICAgbGV0IHNlZyA9IG5ldyBTZWcoeCwgeSwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICBsZXQgZiA9IG5ldyBTcHJpdGVGcmFtZShuYW1lLCBzZWcsIGJpdG1hcCk7XHJcbiAgICByZXR1cm4gZjtcclxufVxyXG5cclxuLyoqXHJcbiAqIHNwcml0ZUZyYW1l5byA5aeL57uY5Yi255qE5Z2Q5qCH77yM5bem5LiK6KeS5byA5aeL77yM5LiOcG9z5peg5YWzXHJcbiAqIEBwYXJhbSB7Kn0gc3ByaXRlRnJhbWUgXHJcbiAqL1xyXG5mdW5jdGlvbiBHZXRTcHJpdGVGcmFtZVN0YXJ0WChzcHJpdGVGcmFtZSA9IG51bGwpe1xyXG4gICAgcmV0dXJuIHNwcml0ZUZyYW1lLnNlZy54O1xyXG59XHJcbmZ1bmN0aW9uIEdldFNwcml0ZUZyYW1lU3RhcnRZKHNwcml0ZUZyYW1lID0gbnVsbCl7XHJcbiAgICByZXR1cm4gc3ByaXRlRnJhbWUuc2VnLnk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFNwcml0ZUZyYW1lV2lkdGgoc3ByaXRlRnJhbWUgPSBudWxsKXtcclxuICAgIHJldHVybiBzcHJpdGVGcmFtZS5zZWcud2lkdGg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFNwcml0ZUZyYW1lSGFsZldpZHRoKHNwcml0ZUZyYW1lID0gbnVsbCl7XHJcbiAgICByZXR1cm4gc3ByaXRlRnJhbWUuc2VnLndpZHRoICogMC41O1xyXG59XHJcblxyXG5mdW5jdGlvbiBHZXRTcHJpdGVGcmFtZUhlaWdodChzcHJpdGVGcmFtZSA9IG51bGwpe1xyXG4gICAgcmV0dXJuIHNwcml0ZUZyYW1lLnNlZy5oZWlnaHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFNwcml0ZUZyYW1lSGFsZkhlaWdodChzcHJpdGVGcmFtZSA9IG51bGwpe1xyXG4gICAgcmV0dXJuIHNwcml0ZUZyYW1lLnNlZy5oZWlnaHQgKiAwLjU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFNwcml0ZUZyYW1lQml0bWFwRGF0YShzcHJpdGVGcmFtZSA9IG51bGwpe1xyXG4gICAgcmV0dXJuIHNwcml0ZUZyYW1lLmJpdG1hcC5kYXRhO1xyXG59XHJcblxyXG5leHBvcnR7XHJcbiAgICBDcmVhdGVCaXRtYXAsIENyZWF0ZVNwcml0ZUZyYW1lLCBcclxuICAgIEdldFNwcml0ZUZyYW1lU3RhcnRYLCBHZXRTcHJpdGVGcmFtZVN0YXJ0WSxcclxuICAgIEdldFNwcml0ZUZyYW1lV2lkdGgsIEdldFNwcml0ZUZyYW1lSGFsZldpZHRoLCBHZXRTcHJpdGVGcmFtZUhlaWdodCwgR2V0U3ByaXRlRnJhbWVIYWxmSGVpZ2h0LFxyXG4gICAgR2V0U3ByaXRlRnJhbWVCaXRtYXBEYXRhXHJcbn0iLCJpbXBvcnQgeyBBZGRUb0xpc3QsIEdldExpc3REYXRhLCBSZW1vdmVGcm9tTGlzdCB9IGZyb20gXCIuLi8uLi9mb3VuZGF0aW9uL2NvbnRhaW5lci9saXN0XCI7XHJcbmltcG9ydCB7IE5ld1ZlYywgTmV3UG9zLCBVcGRhdGVQb3MsIFVwZGF0ZVZlYyB9IGZyb20gXCIuLi8uLi9mb3VuZGF0aW9uL3N0cnVjdHVyZS9nZW9tZXRyaWNcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL2ZvdW5kYXRpb24vY29tcG9uZW50L2Vjc1wiO1xyXG5pbXBvcnQgeyBOZXdMaW5rIH0gZnJvbSBcIi4uL2xpc3QvbGlua2xpc3RcIjtcclxuXHJcbi8qKlxyXG4gKiDkvY3nva7nu4Tku7ZcclxuICovXHJcbmNsYXNzIFBvc0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbnRpdHlJZCA9IDAsIHBvcyA9IG51bGwpe1xyXG4gICAgICAgIHN1cGVyKGVudGl0eUlkKTtcclxuICAgICAgICB0aGlzLnBvcyA9IHBvcztcclxuICAgICAgICB0aGlzLnZlYyA9IE5ld1ZlYygpO1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgcG9zQ29tcyA9IE5ld0xpbmsoKTtcclxuZnVuY3Rpb24gY3JlYXRlUG9zQ29tcG9uZW50KGVudGl0eUlkID0gMCkge1xyXG4gICAgbGV0IGNvbSA9IG5ldyBQb3NDb21wb25lbnQoZW50aXR5SWQsIE5ld1BvcygpKTtcclxuICAgIEFkZFRvTGlzdChwb3NDb21zLCBjb20pO1xyXG4gICAgcmV0dXJuIGNvbTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0UG9zQ29tcG9uZW50KGVudGl0eUlkID0gMCkge1xyXG4gICAgbGV0IGNvbSA9IEdldExpc3REYXRhKHBvc0NvbXMsIGVudGl0eUlkKTtcclxuICAgIHJldHVybiBjb20gPyBjb20gOiBjcmVhdGVQb3NDb21wb25lbnQoZW50aXR5SWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBSZW1vdmVQb3NDb21wb25lbnQoZW50aXR5SWQgPSAwKXtcclxuICAgIFJlbW92ZUZyb21MaXN0KHBvc0NvbXMsIGVudGl0eUlkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0VW5pdFBvcyhlbnRpdHlJZCA9IDApe1xyXG4gICAgcmV0dXJuIEdldFBvc0NvbXBvbmVudChlbnRpdHlJZCkucG9zO1xyXG59XHJcblxyXG5mdW5jdGlvbiBTZXRVbml0UG9zKGVudGl0eUlkID0gMCwgeCA9IDAsIHkgPSAwKXtcclxuICAgIFVwZGF0ZVBvcyhHZXRVbml0UG9zKGVudGl0eUlkKSwgeCwgeSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFVuaXRWZWMoZW50aXR5SWQgPSAwKXtcclxuICAgIHJldHVybiBHZXRQb3NDb21wb25lbnQoZW50aXR5SWQpLnZlYztcclxufVxyXG5cclxuZnVuY3Rpb24gU2V0VW5pdFZlYyhlbnRpdHlJZCA9IDAsIHggPSAwLCB5ID0gMCl7XHJcbiAgICBVcGRhdGVWZWMoR2V0VW5pdFZlYyhlbnRpdHlJZCksIHgsIHkpO1xyXG59XHJcblxyXG5leHBvcnR7IFxyXG4gICAgR2V0UG9zQ29tcG9uZW50LCBSZW1vdmVQb3NDb21wb25lbnQsXHJcbiAgICBHZXRVbml0UG9zLCBTZXRVbml0UG9zLCBHZXRVbml0VmVjLCBTZXRVbml0VmVjXHJcbn0iLCJpbXBvcnQgeyBHZXRSZWFsUG9zLCBHZXRQb3MsIEdldE9mZnNldCB9IGZyb20gXCIuLi8uLi8uLi9mb3VuZGF0aW9uL29mZnNldC9iYXNlXCI7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgR2FtZU9iamVjdCB9IGZyb20gXCIuLi8uLi8uLi9mb3VuZGF0aW9uL2NvbXBvbmVudC9lY3NcIjtcclxuaW1wb3J0IHsgTmV3TGluayB9IGZyb20gXCIuLi8uLi9saXN0L2xpbmtsaXN0XCI7XHJcbmltcG9ydCB7IEFkZFRvTGlzdCwgR2V0TGlzdERhdGEgfSBmcm9tIFwiLi4vLi4vLi4vZm91bmRhdGlvbi9jb250YWluZXIvbGlzdFwiO1xyXG5pbXBvcnQgeyBOZXdQb3MsIFVwZGF0ZVBvcywgTmV3UmVjdCB9IGZyb20gXCIuLi8uLi8uLi9mb3VuZGF0aW9uL3N0cnVjdHVyZS9nZW9tZXRyaWNcIjtcclxuaW1wb3J0IHsgTmV3UmVjdFBvc1JlbGF0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2ZvdW5kYXRpb24vb2Zmc2V0L3JlY3RcIjtcclxuaW1wb3J0IHsgR2V0U3ByaXRlRnJhbWVXaWR0aCwgR2V0U3ByaXRlRnJhbWVIZWlnaHQgfSBmcm9tIFwiLi4vLi4vLi4vZm91bmRhdGlvbi9zdHJ1Y3R1cmUvZnJhbWVcIjtcclxuaW1wb3J0IHsgR2V0UG9zQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL3Bvcy9jb21wb25lbnRcIjtcclxuXHJcbi8qKlxyXG4gKiDmmL7npLrnu4Tku7bvvIzljIXlkKvkuIDkupvmmL7npLrlj4LmlbBcclxuICovXHJcbmNsYXNzIFJlbmRlckNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcblx0Y29uc3RydWN0b3IoZW50aXR5SWQgPSAwLCBpc29tZXRyaWNzID0gZmFsc2UsIGFuZ2xlID0gMCwgc2NhbGUgPSAxKSB7XHJcbiAgICAgICAgc3VwZXIoZW50aXR5SWQpO1xyXG4gICAgICAgIHRoaXMuaXNvbWV0cmljcyA9IGlzb21ldHJpY3M7XHJcbiAgICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcclxuXHR9XHJcbn1cclxuXHJcbnZhciByZW5kZXJDb21zID0gTmV3TGluaygpO1xyXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJDb21wb25lbnQoZW50aXR5SWQgPSAwLCBvcHRpb25zID0gbnVsbCkge1xyXG4gICAgLy/pu5jorqTlgLxcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zID8gb3B0aW9ucyA6IHt9O1xyXG4gICAgbGV0IGNvbSA9IG5ldyBSZW5kZXJDb21wb25lbnQoZW50aXR5SWQsIG9wdGlvbnMuaXNvbWV0cmljcywgb3B0aW9ucy5hbmdsZSwgb3B0aW9ucy5zY2FsZSk7XHJcbiAgICBBZGRUb0xpc3QocmVuZGVyQ29tcywgY29tKTtcclxuICAgIHJldHVybiBjb207XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmn6Xmib7muLLmn5PmmL7npLrnu4Tku7bvvIzmmoLml7bov5nmoLfmkJ5cclxuICogb3B0aW9ucyA6IHtcclxuICogICAgICBpc29tZXRyaWMgOiBmYWxzZSxcclxuICogICAgICBhbmdsZSA6IDE4MCxcclxuICogICAgICBzY2FsZSA6IDAuNVxyXG4gKiB9XHJcbiAqL1xyXG5mdW5jdGlvbiBHZXRSZW5kZXJDb21wb25lbnQoZW50aXR5SWQgPSAwLCBvcHRpb25zID0gbnVsbCkge1xyXG4gICAgbGV0IGNvbSA9IEdldExpc3REYXRhKHJlbmRlckNvbXMsIGVudGl0eUlkKTtcclxuICAgIHJldHVybiBjb20gPyBjb20gOiBjcmVhdGVSZW5kZXJDb21wb25lbnQoZW50aXR5SWQsIG9wdGlvbnMpO1xyXG59XHJcblxyXG4vKipcclxuICog5pi+56S65YWD5Lu2XHJcbiAqICDlkoxlbnRpdHnlhbPns7vkuI3lpKfvvIzkuIDkuKplbnRpdHnlj6/ku6Xmi6XmnInlpKfkuo7kuIDkuKpEaXNwbGF5VHVwbGVcclxuICogIOmcgOimgeiuvuiuoeacuuWItumBv+WFjea7peeUqOmXrumimFxyXG4gKi9cclxuY2xhc3MgRGlzcGxheVR1cGxlIGV4dGVuZHMgR2FtZU9iamVjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzcHJpdGVGcmFtZSA9IG51bGwsIHJlbmRlckNvbSA9IG51bGwsIHJlY3RQb3NSZWwgPSBudWxsLCBvcmRlciA9IDAsIGxheWVyT3JkZXIgPSAwKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlRnJhbWUgPSBzcHJpdGVGcmFtZTtcclxuICAgICAgICB0aGlzLnJlbmRlckNvbSA9IHJlbmRlckNvbTtcclxuICAgICAgICB0aGlzLnJlY3RQb3NSZWwgPSByZWN0UG9zUmVsO1xyXG4gICAgICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcclxuICAgICAgICB0aGlzLmxheWVyT3JkZXIgPSBsYXllck9yZGVyO1xyXG4gICAgICAgIHRoaXMuaXNvUG9zID0gTmV3UG9zKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIE5ld0Rpc3BsYXllcihlbnRpdHlJZCA9IDAsIHNwcml0ZUZyYW1lID0gbnVsbCwgb2Zmc2V0ID0gbnVsbCwgb3JkZXIgPSAwLCBsYXllck9yZGVyID0gMSl7XHJcbiAgICBsZXQgcmVuZGVyQ29tID0gR2V0UmVuZGVyQ29tcG9uZW50KGVudGl0eUlkKTtcclxuICAgIGxldCBwb3NDb20gPSBHZXRQb3NDb21wb25lbnQoZW50aXR5SWQpO1xyXG4gICAgbGV0IHJwID0gTmV3UmVjdFBvc1JlbGF0aW9uKHBvc0NvbS5wb3MsIG9mZnNldCwgTmV3UmVjdChcclxuICAgICAgICAgICAgR2V0U3ByaXRlRnJhbWVXaWR0aChzcHJpdGVGcmFtZSksIEdldFNwcml0ZUZyYW1lSGVpZ2h0KHNwcml0ZUZyYW1lKSkpO1xyXG4gICAgbGV0IGRzID0gbmV3IERpc3BsYXlUdXBsZShzcHJpdGVGcmFtZSwgcmVuZGVyQ29tLCBycCwgb3JkZXIsIGxheWVyT3JkZXIpO1xyXG4gICAgcmV0dXJuIGRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBJc0Rpc3BsYXlJU09tZXRyaWNzKGRpc3BsYXllciA9IG51bGwpe1xyXG4gICAgcmV0dXJuIGRpc3BsYXllci5yZW5kZXJDb20uaXNvbWV0cmljcztcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0RGlzcGxheVNwcml0ZUZyYW1lKGRpc3BsYXllciA9IG51bGwpe1xyXG4gICAgcmV0dXJuIGRpc3BsYXllci5zcHJpdGVGcmFtZTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0RGlzcGxheUNlbnRlclBvcyhkaXNwbGF5ZXIgPSBudWxsKXtcclxuICAgIHJldHVybiBHZXRSZWFsUG9zKGRpc3BsYXllci5yZWN0UG9zUmVsKTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0RGlzcGxheUlzb1BvcyhkaXNwbGF5ZXIgPSBudWxsKXtcclxuICAgIHJldHVybiBkaXNwbGF5ZXIuaXNvUG9zO1xyXG59XHJcblxyXG5mdW5jdGlvbiBVcGRhdGVJc29Qb3MoZGlzcGxheWVyID0gbnVsbCl7XHJcbiAgICBsZXQgcG9zID0gR2V0UG9zKGRpc3BsYXllci5yZWN0UG9zUmVsKTtcclxuICAgIGxldCBvZmZzZXQgPSBHZXRPZmZzZXQoZGlzcGxheWVyLnJlY3RQb3NSZWwpO1xyXG4gICAgVXBkYXRlUG9zKGRpc3BsYXllci5pc29Qb3MsXHJcbiAgICAgICAgKHBvcy54IC0gcG9zLnkpICogMC41ICsgb2Zmc2V0LngsXHJcbiAgICAgICAgKHBvcy54ICsgcG9zLnkpICogMC41ICsgb2Zmc2V0LnkpO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgR2V0UmVuZGVyQ29tcG9uZW50LCBOZXdEaXNwbGF5ZXIsIFxyXG4gICAgSXNEaXNwbGF5SVNPbWV0cmljcywgR2V0RGlzcGxheVNwcml0ZUZyYW1lLCBHZXREaXNwbGF5Q2VudGVyUG9zLFxyXG4gICAgR2V0RGlzcGxheUlzb1BvcywgVXBkYXRlSXNvUG9zXHJcbn0iLCJpbXBvcnQgeyBEcmF3RnJhbWUsIENsZWFyIH0gZnJvbSBcIi4uLy4uL2RpcmVjdG9yL3JlbmRlclwiO1xyXG5pbXBvcnQgeyBTeXN0ZW0gfSBmcm9tIFwiLi4vLi4vZm91bmRhdGlvbi9jb21wb25lbnQvZWNzXCI7XHJcbmltcG9ydCB7IEl0ZXJhdG9yTGF5ZXJzIH0gZnJvbSBcIi4vY29tcG9uZW50L2xheWVyXCI7XHJcbmltcG9ydCB7IEdldERpc3BsYXlJc29Qb3MsIEdldERpc3BsYXlTcHJpdGVGcmFtZSwgR2V0RGlzcGxheUNlbnRlclBvcywgVXBkYXRlSXNvUG9zLCBJc0Rpc3BsYXlJU09tZXRyaWNzIH0gZnJvbSBcIi4vY29tcG9uZW50L3JlbmRlclwiO1xyXG5cclxuLyoqXHJcbiAqIOa4suafk+ezu+e7n++8jOmAu+i+keatpemqpO+8mlxyXG4gKiAxLiAgIOa4hemZpOeUu+W4g1xyXG4gKiAyLiAgIOmHjeWumuS9jeaRhOWDj+aculxyXG4gKiAzLiAgIOiuoeeul+WNleS9jeaYvuekuuefqeW9ouaYr+WQpuWcqOaRhOWDj+acuuefqeW9ouWGhVxyXG4gKiA0LiAgIOi9rOaNouS4uueUu+W4g+WdkOagh1xyXG4gKiA1LiAgIOeUu+WHuuWbvuWDj1xyXG4gKi9cclxuY2xhc3MgUmVuZGVyVXBkYXRlU3lzdGVtIGV4dGVuZHMgU3lzdGVtIHtcclxuICAgIG9uVXBkYXRlKGR0ID0gMCl7XHJcbiAgICAgICAgQ2xlYXIoKTtcclxuICAgICAgICBMaW5rSXRlcmF0b3IoR2V0RGlzcGxheUxpc3QoKSwgZGlzcGxheVR1cGxlID0+IHtcclxuICAgICAgICAgICAgbGV0IHBvcyA9IEdldFBvcyhkaXNwbGF5VHVwbGUuZW50aXR5SWQpO1xyXG4gICAgICAgICAgICBVcGRhdGVSZWN0UG9zQnlVbml0KGRpc3BsYXlUdXBsZS5kaXNwbGF5QXJlYSwgcG9zLngsIHBvcy55KTtcclxuICAgICAgICAgICAgRHJhd0ZyYW1lKGRpc3BsYXlUdXBsZS5zcHJpdGVGcmFtZSwgZGlzcGxheVR1cGxlLnBvcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIExheWVyUmVuZGVyVXBkYXRlU3lzdGVtIGV4dGVuZHMgU3lzdGVtIHtcclxuICAgIG9uVXBkYXRlKGR0ID0gMCl7XHJcbiAgICAgICAgQ2xlYXIoKTtcclxuICAgICAgICBJdGVyYXRvckxheWVycyhkaXNwbGF5VHVwbGUgPT4ge1xyXG4gICAgICAgICAgICBpZihJc0Rpc3BsYXlJU09tZXRyaWNzKGRpc3BsYXlUdXBsZSkpe1xyXG4gICAgICAgICAgICAgICAgZHJhd0lzbyhkaXNwbGF5VHVwbGUpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGRyYXcoZGlzcGxheVR1cGxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3SXNvKGRpc3BsYXlUdXBsZSA9IG51bGwpe1xyXG4gICAgVXBkYXRlSXNvUG9zKGRpc3BsYXlUdXBsZSk7XHJcbiAgICBEcmF3RnJhbWUoXHJcbiAgICAgICAgR2V0RGlzcGxheUlzb1BvcyhkaXNwbGF5VHVwbGUpLFxyXG4gICAgICAgIEdldERpc3BsYXlTcHJpdGVGcmFtZShkaXNwbGF5VHVwbGUpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhdyhkaXNwbGF5VHVwbGUgPSBudWxsKXtcclxuICAgIERyYXdGcmFtZShcclxuICAgICAgICBHZXREaXNwbGF5Q2VudGVyUG9zKGRpc3BsYXlUdXBsZSksXHJcbiAgICAgICAgR2V0RGlzcGxheVNwcml0ZUZyYW1lKGRpc3BsYXlUdXBsZSkpO1xyXG59XHJcblxyXG52YXIgcmVuZGVyU3lzID0gbnVsbDtcclxuZnVuY3Rpb24gR2V0UmVuZGVyVXBkYXRlU3lzdGVtKCl7XHJcbiAgICBpZighcmVuZGVyU3lzKXtcclxuICAgICAgICByZW5kZXJTeXMgPSBuZXcgTGF5ZXJSZW5kZXJVcGRhdGVTeXN0ZW0oKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZW5kZXJTeXM7XHJcbn1cclxuXHJcbmV4cG9ydCB7R2V0UmVuZGVyVXBkYXRlU3lzdGVtfSIsImltcG9ydCB7IEdldEVuZ2luZSB9IGZyb20gXCIuL3Jlc291cmNlXCI7XHJcbmltcG9ydCB7IExpc3RJdGVyYXRvciB9IGZyb20gXCIuLi8uLi9mb3VuZGF0aW9uL2NvbnRhaW5lci9saXN0XCI7XHJcbmltcG9ydCB7IE5ld0xpbmsgfSBmcm9tIFwiLi4vLi4vbGliL2xpc3QvbGlua2xpc3RcIjtcclxuaW1wb3J0IHsgRW5naW5lU3RhcnQgfSBmcm9tIFwiLi4vLi4vbGliL2VuZ2luZS9iYXNlXCI7XHJcbmltcG9ydCB7IEdldFJlbmRlclVwZGF0ZVN5c3RlbSB9IGZyb20gXCIuLi8uLi9saWIvdmlldy9zeXN0ZW1cIjtcclxuXHJcbi8qKlxyXG4gKiDkuLvns7vnu5/liJfooahcclxuICovXHJcbnZhciBsb2dpY1N5c3RlbXMgPSBOZXdMaW5rKCk7XHJcbnZhciByZW5kZXJTeXN0ZW0gPSBudWxsO1xyXG5mdW5jdGlvbiBpbml0U3lzdGVtcyhkZWJ1ZyA9IGZhbHNlKXtcclxuICAgIC8vSW5zZXJ0VG9MaW5rKGxvZ2ljU3lzdGVtcywgR2V0QWN0aW9uU3lzdGVtKCkpO1xyXG4gICAgLy9JbnNlcnRUb0xpbmsobG9naWNTeXN0ZW1zLCBHZXRQb3NVcGRhdGVTeXN0ZW0oKSk7XHJcbiAgICByZW5kZXJTeXN0ZW0gPSBHZXRSZW5kZXJVcGRhdGVTeXN0ZW0oKTtcclxufVxyXG5cclxudmFyIGxvZ2ljVGljayA9IDE2OyAgICAgLy82MGZwc1xyXG52YXIgcmVuZGVyVGljayA9IDQxOyAgICAvLzI0ZnBzXHJcbnZhciBfdDEgPSAwO1xyXG52YXIgX3QyID0gMDtcclxuZnVuY3Rpb24gcnVuV2l0aFNjZW5lKHNjZW5lID0gbnVsbCl7XHJcbiAgICBMaXN0SXRlcmF0b3IobG9naWNTeXN0ZW1zLCBzeXN0ZW0gPT4ge1xyXG4gICAgICAgIHN5c3RlbS5vblN0YXJ0KCk7XHJcbiAgICB9KTtcclxuICAgIHJlbmRlclN5c3RlbS5vblN0YXJ0KCk7XHJcbiAgICBzY2VuZS5vblN0YXJ0KCk7XHJcblxyXG4gICAgLy9tYWluIGxvb3BcclxuICAgIEVuZ2luZVN0YXJ0KEdldEVuZ2luZSgpLCBkdCA9PiB7XHJcbiAgICAgICAgX3QxICs9IGR0O1xyXG4gICAgICAgIGlmKF90MSA+PSBsb2dpY1RpY2spe1xyXG4gICAgICAgICAgICBfdDEgLT0gbG9naWNUaWNrO1xyXG4gICAgICAgICAgICBzY2VuZS5vblVwZGF0ZShkdCk7XHJcbiAgICAgICAgICAgIExpc3RJdGVyYXRvcihsb2dpY1N5c3RlbXMsIHN5c3RlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzeXN0ZW0ub25VcGRhdGUoZHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF90MiArPSBkdDtcclxuICAgICAgICBpZihfdDIgPj0gcmVuZGVyVGljayl7XHJcbiAgICAgICAgICAgIF90MiAtPSByZW5kZXJUaWNrO1xyXG4gICAgICAgICAgICByZW5kZXJTeXN0ZW0ub25VcGRhdGUoZHQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRTeXN0ZW0oc3lzdGVtID0gbnVsbCl7XHJcbiAgICBpZighc3lzdGVtKXtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBJbnNlcnRUb0xpbmsobG9naWNTeXN0ZW1zLCBzeXN0ZW0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9wU3lzdGVtKCl7XHJcbiAgICBMaXN0SXRlcmF0b3IobG9naWNTeXN0ZW1zLCBzeXN0ZW0gPT4ge1xyXG4gICAgICAgIHN5c3RlbS5vbkVuZCgpO1xyXG4gICAgfSk7XHJcbiAgICByZW5kZXJTeXN0ZW0ub25FbmQoKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIGluaXRTeXN0ZW1zLCBydW5XaXRoU2NlbmUsIGFkZFN5c3RlbSwgc3RvcFN5c3RlbVxyXG59IiwiXHJcbiAvKipcclxuICAqIGdyaWRtYXDnmoTnvZHmoLzljZXlhYNcclxuICAqL1xyXG4gY2xhc3MgQmFzZUdyaWQge1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGggPSAwLCBoZWlnaHQgPSAwLCBkYXRhID0gbnVsbCl7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7ICAgICAgIC8v5a2Y5YKo55qE5a+56LGhXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnvZHmoLzooajmmK/kuKrln7rnoYDkuozlhYPlrrnlmajvvIzlupTlvZLnsbvkuLrlhYPmlbDmja5cclxuICogcm93cyA9IOihjOaVsFxyXG4gKiBjb2x1bW5zID0g5YiX5pWwXHJcbiAqIGdyaWRXaWR0aCwgZ3JpZEhlaWdodCA9IOavj+S4que9keagvOeahOWuvemrmOiMg+WbtO+8jOW7uuiurjE6MVxyXG4gKiBcclxuICovXHJcbmNsYXNzIEFic3RyYWN0R3JpZE1hcCB7XHJcbiAgICBnZXREYXRhKHBvcyA9IG51bGwpe31cclxuICAgIHNldERhdGEocG9zID0gbnVsbCwgZGF0YSA9IG51bGwpe31cclxuICAgIGdldEdyaWQocG9zID0gbnVsbCl7fVxyXG4gICAgZ2V0R3JpZE1hcFdpZHRoKCl7fVxyXG4gICAgZ2V0R3JpZE1hcEhlaWdodCgpe31cclxuICAgIGl0ZXJhdG9yKGNhbGxiYWNrID0gbnVsbCl7fVxyXG59XHJcblxyXG5mdW5jdGlvbiBHZXRHcmlkRGF0YVdpdGhQb3MoZ3JpZG1hcCA9IG51bGwsIHBvcyA9IG51bGwpe1xyXG4gICAgcmV0dXJuIGdyaWRtYXAuZ2V0RGF0YShwb3MpO1xyXG59XHJcbmZ1bmN0aW9uIFNldEdyaWREYXRhV2l0aFBvcyhncmlkbWFwID0gbnVsbCwgcG9zID0gbnVsbCwgZGF0YSA9IG51bGwpe1xyXG4gICAgcmV0dXJuIGdyaWRtYXAuc2V0RGF0YShwb3MsIGRhdGEpO1xyXG59XHJcbmZ1bmN0aW9uIEdldEdyaWREYXRhKGdyaWQgPSBudWxsKXtcclxuICAgIHJldHVybiBncmlkLmRhdGE7XHJcbn1cclxuZnVuY3Rpb24gU2V0R3JpZERhdGEoZ3JpZCA9IG51bGwsIGRhdGEgPSBudWxsKXtcclxuICAgIHJldHVybiBncmlkLmRhdGEgPSBkYXRhO1xyXG59XHJcbmZ1bmN0aW9uIEdldEdyaWQoZ3JpZG1hcCA9IG51bGwsIHBvcyA9IG51bGwpe1xyXG4gICAgcmV0dXJuIGdyaWRtYXAuZ2V0R3JpZChwb3MpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIOWfuuehgOWxnuaAp++8muWuveW6plxyXG4gKi9cclxuZnVuY3Rpb24gR2V0R3JpZFdpZHRoKGdyaWQgPSBudWxsKXtcclxuICAgIHJldHVybiBncmlkLndpZHRoO1xyXG59XHJcbmZ1bmN0aW9uIEdldEhhbGZHcmlkV2lkdGgoZ3JpZCA9IG51bGwpe1xyXG4gICAgcmV0dXJuIEdldEdyaWRXaWR0aChncmlkKSAqIDAuNTtcclxufVxyXG5mdW5jdGlvbiBHZXRHcmlkTWFwV2lkdGgoZ3JpZG1hcCA9IG51bGwpe1xyXG4gICAgcmV0dXJuIGdyaWRtYXAuZ2V0R3JpZE1hcFdpZHRoKCk7XHJcbn1cclxuZnVuY3Rpb24gR2V0SGFsZkdyaWRNYXBXaWR0aChncmlkbWFwID0gbnVsbCl7XHJcbiAgICByZXR1cm4gR2V0R3JpZE1hcFdpZHRoKGdyaWRtYXApICogMC41O1xyXG59XHJcblxyXG4vKipcclxuICog5Z+656GA5bGe5oCn77ya6auY5bqmXHJcbiAqL1xyXG5mdW5jdGlvbiBHZXRHcmlkSGVpZ2h0KGdyaWQgPSBudWxsKXtcclxuICAgIHJldHVybiBncmlkLmhlaWdodDtcclxufVxyXG5mdW5jdGlvbiBHZXRIYWxmR3JpZEhlaWdodChncmlkID0gbnVsbCl7XHJcbiAgICByZXR1cm4gR2V0R3JpZEhlaWdodChncmlkKSAqIDAuNTtcclxufVxyXG5mdW5jdGlvbiBHZXRHcmlkTWFwSGVpZ2h0KGdyaWRtYXAgPSBudWxsKXtcclxuICAgIHJldHVybiBncmlkbWFwLmdldEdyaWRNYXBIZWlnaHQoKTtcclxufVxyXG5mdW5jdGlvbiBHZXRIYWxmR3JpZE1hcEhlaWdodChncmlkbWFwID0gbnVsbCl7XHJcbiAgICByZXR1cm4gR2V0R3JpZE1hcEhlaWdodChncmlkbWFwKSAqIDAuNTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOmBjeWOhlxyXG4gKiBAcGFyYW0geyp9IGdyaWRtYXAgXHJcbiAqIEBwYXJhbSB7Kn0gY2FsbGJhY2sgXHJcbiAqL1xyXG5mdW5jdGlvbiBHcmlkTWFwSXRlcmF0b3IoZ3JpZG1hcCA9IG51bGwsIGNhbGxiYWNrID0gbnVsbCl7XHJcbiAgICBncmlkbWFwLml0ZXJhdG9yKGNhbGxiYWNrKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIEJhc2VHcmlkLCBBYnN0cmFjdEdyaWRNYXAsIFxyXG4gICAgR2V0R3JpZERhdGFXaXRoUG9zLCBTZXRHcmlkRGF0YVdpdGhQb3MsIEdldEdyaWREYXRhLCBTZXRHcmlkRGF0YSwgR2V0R3JpZCxcclxuICAgIEdldEdyaWRXaWR0aCwgR2V0SGFsZkdyaWRXaWR0aCwgR2V0R3JpZE1hcFdpZHRoLCBHZXRIYWxmR3JpZE1hcFdpZHRoLFxyXG4gICAgR2V0R3JpZEhlaWdodCwgR2V0SGFsZkdyaWRIZWlnaHQsIEdldEdyaWRNYXBIZWlnaHQsIEdldEhhbGZHcmlkTWFwSGVpZ2h0LFxyXG4gICAgR3JpZE1hcEl0ZXJhdG9yXHJcbn0iLCJpbXBvcnQgeyBOZXdQb3MsIFRvTG9jYXRlUG9zIH0gZnJvbSBcIi4uLy4uLy4uL2ZvdW5kYXRpb24vc3RydWN0dXJlL2dlb21ldHJpY1wiO1xyXG5pbXBvcnQgeyBHZXRJbnQgfSBmcm9tIFwiLi4vLi4vLi4vZm91bmRhdGlvbi9zdHJ1Y3R1cmUvbWF0aFwiO1xyXG5pbXBvcnQgeyBHZXRIYWxmR3JpZE1hcFdpZHRoLCBHZXRIYWxmR3JpZE1hcEhlaWdodCwgR2V0R3JpZFdpZHRoLCBHZXRHcmlkSGVpZ2h0LCBCYXNlR3JpZCwgQWJzdHJhY3RHcmlkTWFwIH0gZnJvbSBcIi4uLy4uLy4uL2ZvdW5kYXRpb24vY29udGFpbmVyL2dyaWRtYXBcIjtcclxuXHJcbi8qKlxyXG4gICogZ3JpZG1hcOeahOe9keagvOWNleWFg1xyXG4gICovXHJcbiBjbGFzcyBUaWxlR3JpZCBleHRlbmRzIEJhc2VHcmlkIHtcclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoID0gMCwgaGVpZ2h0ID0gMCwgcm93SW5kZXggPSAwLCBjb2xJbmRleCA9IDAsIGRhdGEgPSBudWxsKXtcclxuICAgICAgICBzdXBlcih3aWR0aCwgaGVpZ2h0LCBkYXRhKTtcclxuICAgICAgICB0aGlzLnJvd0luZGV4ID0gcm93SW5kZXg7XHJcbiAgICAgICAgdGhpcy5jb2xJbmRleCA9IGNvbEluZGV4O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogMmTnk7fnoJblnLDlm77vvIznlLFHcmlkTWFw5omp5bGVXHJcbiAqIHNhbXBsZTpcclxuICogW1xyXG5cdDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIFxyXG5cdDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIFxyXG5cdDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDEsIDEsIDEsIDEsIDEsIFxyXG5cdDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDEsIDEsXHJcblx0MSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgXHJcblx0MSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgXHJcbl1cclxuICovXHJcbmNsYXNzIFRpbGVNYXAgZXh0ZW5kcyBBYnN0cmFjdEdyaWRNYXAge1xyXG4gICAgY29uc3RydWN0b3IocG9zID0gbnVsbCwgcm93cyA9IDAsIGNvbHVtbnMgPSAwLCBncmlkV2lkdGggPSAwLCBncmlkSGVpZ2h0ID0gMCwgZ3JpZHMgPSBudWxsKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xyXG4gICAgICAgIHRoaXMucm93cyA9IHJvd3M7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zID0gY29sdW1ucztcclxuICAgICAgICB0aGlzLmdyaWRXaWR0aCA9IGdyaWRXaWR0aDtcclxuICAgICAgICB0aGlzLmdyaWRIZWlnaHQgPSBncmlkSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuZ3JpZHMgPSBncmlkcztcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKHBvcyA9IG51bGwpe1xyXG4gICAgICAgIGxldCBncmlkID0gZ2V0R3JpZFdpdGhQb3MocG9zLCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gZ3JpZCA/IGdyaWQuZGF0YSA6IG51bGw7XHJcbiAgICB9XHJcbiAgICBzZXREYXRhKHBvcyA9IG51bGwsIGRhdGEgPSBudWxsKXtcclxuICAgICAgICBsZXQgZ3JpZCA9IGdldEdyaWRXaXRoUG9zKHBvcywgdGhpcyk7XHJcbiAgICAgICAgaWYoZ3JpZCl7XHJcbiAgICAgICAgICAgIGdyaWQuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0R3JpZChwb3MgPSBudWxsKXtcclxuICAgICAgICByZXR1cm4gZ2V0R3JpZFdpdGhQb3MocG9zLCB0aGlzKTtcclxuICAgIH1cclxuICAgIGdldEdyaWRNYXBXaWR0aCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbnMgKiB0aGlzLmdyaWRXaWR0aDtcclxuICAgIH1cclxuICAgIGdldEdyaWRNYXBIZWlnaHQoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dzICogdGhpcy5ncmlkSGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgaXRlcmF0b3IoY2FsbGJhY2sgPSBudWxsKXtcclxuICAgICAgICB0aGlzLmdyaWRzLmZvckVhY2goZ3JpZCA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGdyaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBOZXdUaWxlTWFwKHJvd3MgPSAwLCBjb2x1bW5zID0gMCwgZ3JpZFdpZHRoID0gMCwgZ3JpZEhlaWdodCA9IDAsIHBvcyA9IG51bGwpe1xyXG4gICAgbGV0IGdyaWRzID0gW107XHJcbiAgICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgcm93czsgcm93SW5kZXgrKykge1xyXG4gICAgICAgIGZvciAobGV0IGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBjb2x1bW5zOyBjb2xJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGdyaWRzLnB1c2gobmV3IFRpbGVHcmlkKGdyaWRXaWR0aCwgZ3JpZEhlaWdodCwgcm93SW5kZXgsIGNvbEluZGV4KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcG9zID0gcG9zID8gcG9zIDogTmV3UG9zKCk7XHJcbiAgICByZXR1cm4gbmV3IFRpbGVNYXAocG9zLCByb3dzLCBjb2x1bW5zLCBncmlkV2lkdGgsIGdyaWRIZWlnaHQsIGdyaWRzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tJbih4ID0gMCwgeSA9IDAsIHRpbGVtYXAgPSBudWxsKXtcclxuICAgIHJldHVybiB4ID4gMCAmJiB4IDwgdGlsZW1hcC5nZXRHcmlkTWFwV2lkdGgoKSAmJiB5ID4gMCAmJiB5IDwgdGlsZW1hcC5nZXRHcmlkTWFwSGVpZ2h0KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEdyaWRXaXRoUG9zKHBvcyA9IG51bGwsIHRpbGVtYXAgPSBudWxsKXtcclxuICAgIGxldCB0UG9zID0gVG9Mb2NhdGVQb3MocG9zLCB0aWxlbWFwLnBvcyk7XHJcbiAgICBpZighY2hlY2tJbih0UG9zLngsIHRQb3MueSwgdGlsZW1hcCkpe1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgbGV0IGNvbHVtbiA9IEdldEludCh0UG9zLnggLyBncmlkbWFwLmdyaWRXaWR0aCk7XHJcbiAgICBsZXQgcm93ID0gR2V0SW50KHRQb3MueSAvIGdyaWRtYXAuZ3JpZEhlaWdodCk7XHJcbiAgICByZXR1cm4gZ3JpZG1hcC5ncmlkc1tyb3cgKiBncmlkbWFwLmNvbHVtbnMgKyBjb2x1bW5dO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIOWfuuehgOWdkOagh1xyXG4gKiBAcGFyYW0geyp9IHRpbGVtYXAgXHJcbiAqL1xyXG5mdW5jdGlvbiBHZXRUaWxlbWFwU3RhcnQodGlsZW1hcCA9IG51bGwpe1xyXG4gICAgcmV0dXJuIE5ld1BvcyhcclxuICAgICAgICB0aWxlbWFwLnBvcy54IC0gR2V0SGFsZkdyaWRNYXBXaWR0aCh0aWxlbWFwKSxcclxuICAgICAgICB0aWxlbWFwLnBvcy55IC0gR2V0SGFsZkdyaWRNYXBIZWlnaHQodGlsZW1hcClcclxuICAgICk7XHJcbn1cclxuZnVuY3Rpb24gR2V0VGlsZW1hcEVuZCh0aWxlbWFwID0gbnVsbCl7XHJcbiAgICByZXR1cm4gTmV3UG9zKFxyXG4gICAgICAgIHRpbGVtYXAucG9zLnggKyBHZXRIYWxmR3JpZE1hcFdpZHRoKHRpbGVtYXApLFxyXG4gICAgICAgIHRpbGVtYXAucG9zLnkgKyBHZXRIYWxmR3JpZE1hcEhlaWdodCh0aWxlbWFwKVxyXG4gICAgKTtcclxufVxyXG5mdW5jdGlvbiBHZXRUaWxlbWFwQ2VudGVyKHRpbGVtYXAgPSBudWxsKXtcclxuICAgIHJldHVybiBOZXdQb3ModGlsZW1hcC5wb3MueCwgdGlsZW1hcC5wb3MueSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFRpbGVHcmlkU3RhcnQodGlsZW1hcCA9IG51bGwsIGdyaWQgPSBudWxsKXtcclxuICAgIGxldCBzdGFydCA9IEdldFRpbGVtYXBTdGFydCh0aWxlbWFwKTtcclxuICAgIHJldHVybiBOZXdQb3MoXHJcbiAgICAgICAgc3RhcnQueCArIEdldEdyaWRXaWR0aCh0aWxlbWFwLmdyaWRtYXApICogZ3JpZC5jb2xJbmRleCxcclxuICAgICAgICBzdGFydC55ICsgR2V0R3JpZEhlaWdodCh0aWxlbWFwLmdyaWRtYXApICogZ3JpZC5yb3dJbmRleFxyXG4gICAgKTtcclxufVxyXG5mdW5jdGlvbiBHZXRUaWxlR3JpZEVuZCh0aWxlbWFwID0gbnVsbCwgZ3JpZCA9IG51bGwpe1xyXG4gICAgbGV0IHN0YXJ0ID0gR2V0VGlsZW1hcFN0YXJ0KHRpbGVtYXApO1xyXG4gICAgcmV0dXJuIE5ld1BvcyhcclxuICAgICAgICBzdGFydC54ICsgdGlsZW1hcC5ncmlkV2lkdGggKiAoZ3JpZC5jb2xJbmRleCArIDEpLFxyXG4gICAgICAgIHN0YXJ0LnkgKyB0aWxlbWFwLmdyaWRIZWlnaHQgKiAoZ3JpZC5yb3dJbmRleCArIDEpXHJcbiAgICApO1xyXG59XHJcbmZ1bmN0aW9uIEdldFRpbGVHcmlkQ2VudGVyKHRpbGVtYXAgPSBudWxsLCBncmlkID0gbnVsbCl7XHJcbiAgICBsZXQgc3RhcnQgPSBHZXRUaWxlbWFwU3RhcnQodGlsZW1hcCk7XHJcbiAgICBsZXQgcyA9ICBOZXdQb3MoXHJcbiAgICAgICAgc3RhcnQueCArIHRpbGVtYXAuZ3JpZFdpZHRoICogKGdyaWQuY29sSW5kZXggKyAwLjUpLFxyXG4gICAgICAgIHN0YXJ0LnkgKyB0aWxlbWFwLmdyaWRIZWlnaHQgKiAoZ3JpZC5yb3dJbmRleCArIDAuNSlcclxuICAgICk7XHJcbiAgICByZXR1cm4gcztcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIE5ld1RpbGVNYXAsIFxyXG4gICAgR2V0VGlsZW1hcFN0YXJ0LCBHZXRUaWxlbWFwRW5kLCBHZXRUaWxlbWFwQ2VudGVyLCBcclxuICAgIEdldFRpbGVHcmlkU3RhcnQsIEdldFRpbGVHcmlkRW5kLCBHZXRUaWxlR3JpZENlbnRlclxyXG59XHJcblxyXG4vKipcclxuICog5om+5Ye65LiOcmVjdOebuOS6pOeahOaJgOaciWdyaWRcclxuICogVE9ETyDmnKrlrprvvIzlj6/og73kuI3pnIDopoHov5nnp43lgZrms5VcclxuICovXHJcbmZ1bmN0aW9uIEdldEdyaWRzQnlSZWN0KHRpbGVNYXAgPSBudWxsLCByZWN0ID0gbnVsbCl7XHJcbiAgICAvL+aYr+WQpuWcqHRpbGVtYXDkuK1cclxuICAgIGlmKCFJc1JlY3RDcm9zcyh0aWxlTWFwLnJlY3QsIHJlY3QpKXtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGxldCBncmlkcyA9IFtdO1xyXG4gICAgbGV0IHBvc1N0YXJ0ID0gcmVjdC5wb3NTdGFydDtcclxuICAgIGxldCBjb2x1bW5TdGFydCA9IHBhcnNlSW50KHBvc1N0YXJ0LnggLyB0aWxlTWFwLmdyaWRXaWR0aCk7XHJcbiAgICBsZXQgcm93U3RhcnQgPSBwYXJzZUludChwb3NTdGFydC55IC8gdGlsZU1hcC5ncmlkSGVpZ2h0KTtcclxuICAgIGNvbHVtblN0YXJ0ID0gY29sdW1uU3RhcnQgPCAwID8gMCA6IGNvbHVtblN0YXJ0O1xyXG4gICAgcm93U3RhcnQgPSByb3dTdGFydCA8IDAgPyAwIDogcm93U3RhcnQ7XHJcblxyXG4gICAgbGV0IHBvc0VuZCA9IHJlY3QucG9zRW5kO1xyXG4gICAgbGV0IGNvbHVtbkVuZCA9IHBhcnNlSW50KHBvc0VuZC54IC8gdGlsZU1hcC5ncmlkV2lkdGgpO1xyXG4gICAgbGV0IHJvd0VuZCA9IHBhcnNlSW50KHBvc0VuZC55IC8gdGlsZU1hcC5ncmlkSGVpZ2h0KTtcclxuICAgIGNvbHVtbkVuZCA9IGNvbHVtbkVuZCA+IHRpbGVNYXAuY29sdW1ucyAtIDEgPyB0aWxlTWFwLmNvbHVtbnMgLSAxIDogY29sdW1uRW5kO1xyXG4gICAgcm93RW5kID0gcm93RW5kID4gdGlsZU1hcC5yb3dzIC0gMSA/IHRpbGVNYXAucm93cyAtIDEgOiByb3dFbmQ7XHJcblxyXG4gICAgZm9yKGxldCByb3c9cm93U3RhcnQ7IHJvdzw9cm93RW5kOyByb3crKyl7XHJcbiAgICAgICAgZm9yKGxldCBjb2x1bW49Y29sdW1uU3RhcnQ7IGNvbHVtbjw9Y29sdW1uRW5kOyBjb2x1bW4rKyl7XHJcbiAgICAgICAgICAgIGdyaWRzLnB1c2godGlsZU1hcC5ncmlkc1tyb3ddW2NvbHVtbl0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBncmlkcztcclxufSIsImltcG9ydCB7IEdyaWRNYXBJdGVyYXRvciwgU2V0R3JpZERhdGEgfSBmcm9tIFwiLi4vLi4vZm91bmRhdGlvbi9jb250YWluZXIvZ3JpZG1hcFwiO1xyXG5pbXBvcnQgeyBHZXRJbnQgfSBmcm9tIFwiLi4vLi4vZm91bmRhdGlvbi9zdHJ1Y3R1cmUvbWF0aFwiO1xyXG5pbXBvcnQgeyBOZXdUaWxlTWFwIH0gZnJvbSBcIi4vdGlsZW1hcC9iYXNlXCI7XHJcbmltcG9ydCB7IE5ld1BvcyB9IGZyb20gXCIuLi8uLi9mb3VuZGF0aW9uL3N0cnVjdHVyZS9nZW9tZXRyaWNcIjtcclxuaW1wb3J0IHsgR2V0RGVmIH0gZnJvbSBcIi4uLy4uL2RpcmVjdG9yL3NlcnZpY2UvcmVzb3VyY2VcIjtcclxuXHJcbi8qKlxyXG4gKiB0aWxlbWFwID0gZ3JpZG1hcCArIHBvc1xyXG4gKiBncmlkbWFw55qE55u45a+55Z2Q5qCH5pivKDAsIDAp77yM5Y2z5bem5LiK6KeSXHJcbiAqIHRpbGVtYXAucG9z5ZKM5YW25LuW5a+56LGh5LiA5qC377yM5LuO5Lit6Ze05byA5aeLXHJcbiAqIGdyaWRQb3PmmK9ncmlk55+p5b2i5Lit6Ze0XHJcbiAqIOS+i+Wmgu+8mnRpbGVtYXAucG9zLnggPSAyMCwgZ3JpZFdpZHRoID0gNTAsIGNvbHVtbiA9IDU7XHJcbiAqIOmCo+S5iGdyaWRbMF3nmoRwb3MueD0gMjAgKyAwKjUwICsgNTAvMiA9IDQ1LCBwb3NTdGFydC54ID0gNDUgLSA1MC8yID0gMjBcclxuICog5ZCM55CGZ3JpZFs0XeeahHBvcy54PSAyMCArIDQqNTAgKyA1MC8yID0gMjQ1LCBwb3NTdGFydC54ID0gMjQ1IC0gNTAvMiA9IDIyMFxyXG4gKiBcclxuICogb3B0aW9uczp7XHJcbiAqICAgICAgZGF0YSA6IFsgICAgICAgICAgICAgICAg5LiA57u05pWw57uEXHJcbiAqICAgICAgICAgIDEsIDEsIDEsIDAsIDAsIDEsXHJcbiAqICAgICAgICAgIDIsIDEsIDAsIDAsIDEsIDIsXHJcbiAqICAgICAgICAgIDIsIDIsIDEsIDEsIDEsIDFcclxuICogICAgICAgICAgXVxyXG4gKiAgICAgIGNvbHVtbnMgOiA2ICAgICDliJfmlbBcclxuICogICAgICBncmlkLXdpZHRoIDogMzJcclxuICogICAgICBncmlkaWhlaWdodCA6IDMyICAgICDmr4/kuKrmoLzlrZDnmoTlrr3pq5hcclxuICogICAgICB4IDogMFxyXG4gKiAgICAgIHkgOiAwICAgICAgICAgICDliJ3lp4vkvY3nva7vvIzpu5jorqTkuLpzdGFnZeS4reW/g++8jOWNsygwLCAwKVxyXG4gKiB9XHJcbiAqL1xyXG5mdW5jdGlvbiBDcmVhdGVUaWxlTWFwV2l0aERhdGEob3B0aW9ucyA9IG51bGwpe1xyXG4gICAgLy/pu5jorqTlgLxcclxuICAgIGRlZmF1bHRUaWxlTWFwRGF0YShvcHRpb25zKTtcclxuICAgIFxyXG4gICAgLy/pqozor4F0aWxlbWFw5pWw5o2u5a6M5pW05oCnXHJcbiAgICBsZXQgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucztcclxuICAgIGxldCByb3dzID0gR2V0SW50KG9wdGlvbnMuZGF0YS5sZW5ndGggLyBjb2x1bW5zKTtcclxuICAgIGlmKHJvd3MgKiBjb2x1bW5zICE9IG9wdGlvbnMuZGF0YS5sZW5ndGgpe1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvciBwYXJhbTogbGVuKGdyaWRzKTogJWQsIGNvbHVtbnM6ICVkXCIsIG9wdGlvbnMuZGF0YS5sZW5ndGgsIGNvbHVtbnMpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgbGV0IHRpbGVtYXAgPSBOZXdUaWxlTWFwKFxyXG4gICAgICAgIHJvd3MsIGNvbHVtbnMsIG9wdGlvbnNbJ2dyaWQtd2lkdGgnXSwgb3B0aW9uc1snZ3JpZC1oZWlnaHQnXSwgTmV3UG9zKG9wdGlvbnMueCwgb3B0aW9ucy55KSk7XHJcbiAgICAgICAgR3JpZE1hcEl0ZXJhdG9yKHRpbGVtYXAsIGdyaWQgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IEdldERlZihvcHRpb25zLmRhdGFbZ3JpZC5yb3dJbmRleCAqIGNvbHVtbnMgKyBncmlkLmNvbEluZGV4XSk7XHJcbiAgICAgICAgICAgIFNldEdyaWREYXRhKGdyaWQsIGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgcmV0dXJuIHRpbGVtYXA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmF1bHRUaWxlTWFwRGF0YShvcHRpb25zID0gbnVsbCl7XHJcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgY29sdW1ucyA6IDEsXHJcbiAgICAgICAgXCJncmlkLXdpZHRoXCIgOiAzMixcclxuICAgICAgICBcImdyaWQtaGVpZ2h0XCIgOiAzMixcclxuICAgICAgICB4IDogMCxcclxuICAgICAgICB5IDogMCxcclxuICAgICAgICBkYXRhIDogWzBdXHJcbiAgICB9LCBvcHRpb25zKTtcclxuICAgIG9wdGlvbnNbJ2dyaWQtd2lkdGgnXSA9IG9wdGlvbnNbJ2dyaWQtd2lkdGgnXSA+IDAgPyBvcHRpb25zWydncmlkLXdpZHRoJ10gOiAzMjtcclxuICAgIG9wdGlvbnNbJ2dyaWQtaGVpZ2h0J10gPSBvcHRpb25zWydncmlkLWhlaWdodCddID4gMCA/IG9wdGlvbnNbJ2dyaWQtaGVpZ2h0J10gOiAzMjtcclxufVxyXG5cclxuZXhwb3J0e1xyXG4gICAgQ3JlYXRlVGlsZU1hcFdpdGhEYXRhXHJcbn0iLCJcclxudmFyIF9jYWxsYmFjaztcclxudmFyIF9mcmFtZU5vID0gMDtcclxudmFyIF9kdCA9IDA7XHJcbnZhciBfbGFzdCA9IDA7XHJcbnZhciBfaXNFbmQgPSBmYWxzZTtcclxuZnVuY3Rpb24gcnVuVGljayh0aW1lc3RhbXApIHtcclxuICAgIF9kdCA9IHRpbWVzdGFtcCAtIF9sYXN0O1xyXG4gICAgX2xhc3QgPSB0aW1lc3RhbXA7XHJcbiAgICBfY2FsbGJhY2soX2R0KTtcclxuICAgIGlmKCFfaXNFbmQpe1xyXG4gICAgICAgIF9mcmFtZU5vID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBkZWJ1Z1xyXG4gKi9cclxudmFyIHN0YXJ0ID0gbnVsbDtcclxudmFyIGxhc3QgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuZnVuY3Rpb24gcnVuVGljazIoZnBzID0gMCwgb25VcGRhdGVDYWxsYmFjayA9IG51bGwpIHtcclxuICAgIF9pc0VuZCA9IGZhbHNlO1xyXG4gICAgb25VcGRhdGVDYWxsYmFjaztcclxuICAgIGxldCB0aWNrID0gMTAwMCAvIGZwcztcclxuICAgIHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGlmKCFfaXNFbmQpe1xyXG4gICAgICAgICAgICBvblVwZGF0ZUNhbGxiYWNrKHN0YXJ0IC0gbGFzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3QgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIH0sIHRpY2spO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9wKCl7XHJcbiAgICBfaXNFbmQgPSB0cnVlO1xyXG59XHJcblxyXG5cclxuLy/lm6DkuLrmjInkvY/plK7nmoTor53vvIzkvJrkuI3mlq3op6blj5FvbktleWRvd27vvIzmiYDku6XlgZrkuKptYXDliKTmlq1cclxudmFyIF9rZXlEb3duTWFwID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBjYW52YXNPbktleUNhbGxiYWNrKGtleURvd25DYWxsYmFjayA9IG51bGwsIGtleVVwQ2FsbGJhY2sgPSBudWxsKXtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBlID0+IHtcclxuICAgICAgICBsZXQgY29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICBpZihfa2V5RG93bk1hcC5nZXQoY29kZSkpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9rZXlEb3duTWFwLnNldChjb2RlLCAxKTtcclxuICAgICAgICBrZXlEb3duQ2FsbGJhY2soZS5rZXlDb2RlKTtcclxuICAgIH0pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBlID0+IHtcclxuICAgICAgICBsZXQgY29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICBfa2V5RG93bk1hcC5kZWxldGUoY29kZSk7XHJcbiAgICAgICAga2V5VXBDYWxsYmFjayhlLmtleUNvZGUpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBodHRwczovL2Jsb2cuY3Nkbi5uZXQvcXFfMTc2MTYxNjkvYXJ0aWNsZS9kZXRhaWxzLzcyODMzMDQ0XHJcbiAqL1xyXG5mdW5jdGlvbiBjYW52YXNPbk1vdXNlQ2FsbGJhY2soZW5naW5lID0gbnVsbCwgbW91c2Vkb3duQ2FsbGJhY2sgPSBudWxsLCBtb3VzZXVwQ2FsbGJhY2sgPSBudWxsKXtcclxuICAgIGVuZ2luZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgbGV0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0ICogKGNhbnZhcy53aWR0aCAvIHJlY3Qud2lkdGgpO1xyXG4gICAgICAgIGxldCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wICogKGNhbnZhcy5oZWlnaHQgLyByZWN0LmhlaWdodCk7XHJcbiAgICAgICAgbW91c2Vkb3duQ2FsbGJhY2soeCwgeSk7XHJcbiAgICB9KTtcclxuICAgIGVuZ2luZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZXZlbnQgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGxldCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAqIChjYW52YXMud2lkdGggLyByZWN0LndpZHRoKTtcclxuICAgICAgICBsZXQgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAqIChjYW52YXMuaGVpZ2h0IC8gcmVjdC5oZWlnaHQpO1xyXG4gICAgICAgIG1vdXNldXBDYWxsYmFjayh4LCB5KTtcclxuICAgIH0pO1xyXG4gICAgLy8gZW5naW5lLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnQgPT4ge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGV2ZW50LngsIGV2ZW50LnkpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvL2VuZ2luZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLGRvTW91c2VNb3ZlLGZhbHNlKTtcclxuICAgIC8vZW5naW5lLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIixkb01vdXNlT3V0LGZhbHNlKTtcclxufVxyXG5cclxuZXhwb3J0e1xyXG4gICAgcnVuVGljazIsIHN0b3AsIGNhbnZhc09uS2V5Q2FsbGJhY2ssIGNhbnZhc09uTW91c2VDYWxsYmFja1xyXG59IiwiaW1wb3J0IHsgcnVuVGljazIsIGNhbnZhc09uS2V5Q2FsbGJhY2ssIGNhbnZhc09uTW91c2VDYWxsYmFjayB9IGZyb20gXCIuL3Byb2Nlc3NvclwiO1xyXG5pbXBvcnQgeyBHZXRTcHJpdGVGcmFtZUJpdG1hcERhdGEsIEdldFNwcml0ZUZyYW1lU3RhcnRYLCBHZXRTcHJpdGVGcmFtZVN0YXJ0WSwgR2V0U3ByaXRlRnJhbWVXaWR0aCwgR2V0U3ByaXRlRnJhbWVIZWlnaHQsIEdldFNwcml0ZUZyYW1lSGFsZldpZHRoLCBHZXRTcHJpdGVGcmFtZUhhbGZIZWlnaHQgfSBmcm9tIFwiLi4vLi4vLi4vZm91bmRhdGlvbi9zdHJ1Y3R1cmUvZnJhbWVcIjtcclxuaW1wb3J0IHsgQWJzdHJhY3RFbmdpbmUgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBHZXRSZWN0SGFsZldpZHRoLCBHZXRSZWN0SGFsZkhlaWdodCwgR2V0UmVjdEhlaWdodCwgR2V0UmVjdFdpZHRoIH0gZnJvbSBcIi4uLy4uLy4uL2ZvdW5kYXRpb24vc3RydWN0dXJlL2dlb21ldHJpY1wiO1xyXG5cclxuLyoqXHJcbiAqIOa1j+iniOWZqOeahGtleS1jb2RlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgS0VZX1JJR0hUID0gMzk7XHJcbmV4cG9ydCBjb25zdCBLRVlfTEVGVCA9IDM3O1xyXG5leHBvcnQgY29uc3QgS0VZX1VQID0gMzg7XHJcbmV4cG9ydCBjb25zdCBLRVlfRE9XTiA9IDQwO1xyXG5cclxuZXhwb3J0IGNvbnN0IEtFWV9TUEFDRSA9IDMyO1xyXG5cclxuZXhwb3J0IGNvbnN0IEtFWV9XID0gODc7XHJcbmV4cG9ydCBjb25zdCBLRVlfQSA9IDY1O1xyXG5leHBvcnQgY29uc3QgS0VZX1MgPSA4MztcclxuZXhwb3J0IGNvbnN0IEtFWV9EID0gNjg7XHJcblxyXG5jbGFzcyBINUVuZ2luZSBleHRlbmRzIEFic3RyYWN0RW5naW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKGZwcyA9IDYwLCBjYW52YXMgPSBudWxsLCBjdHggPSBudWxsKXtcclxuICAgICAgICBzdXBlcihmcHMpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCl7XHJcbiAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdGcmFtZShjZW50ZXJQb3MgPSBudWxsLCBzcHJpdGVGcmFtZSA9IG51bGwpe1xyXG4gICAgICAgIC8v5Y+C6ICD77yaY29udGV4dC5kcmF3SW1hZ2UoaW1nLHN4LHN5LHN3aWR0aCxzaGVpZ2h0LHgseSx3aWR0aCxoZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcclxuICAgICAgICAgICAgR2V0U3ByaXRlRnJhbWVCaXRtYXBEYXRhKHNwcml0ZUZyYW1lKSxcclxuICAgICAgICAgICAgR2V0U3ByaXRlRnJhbWVTdGFydFgoc3ByaXRlRnJhbWUpLCBHZXRTcHJpdGVGcmFtZVN0YXJ0WShzcHJpdGVGcmFtZSksIEdldFNwcml0ZUZyYW1lV2lkdGgoc3ByaXRlRnJhbWUpLCBHZXRTcHJpdGVGcmFtZUhlaWdodChzcHJpdGVGcmFtZSksXHJcbiAgICAgICAgICAgIGNlbnRlclBvcy54IC0gR2V0U3ByaXRlRnJhbWVIYWxmV2lkdGgoc3ByaXRlRnJhbWUpLCBjZW50ZXJQb3MueSAtIEdldFNwcml0ZUZyYW1lSGFsZkhlaWdodChzcHJpdGVGcmFtZSksIEdldFNwcml0ZUZyYW1lV2lkdGgoc3ByaXRlRnJhbWUpLCBHZXRTcHJpdGVGcmFtZUhlaWdodChzcHJpdGVGcmFtZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdSZWN0KGNlbnRlclBvcyA9IG51bGwsIHJlY3QgPSBudWxsKXtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxyXG4gICAgICAgICAgICBjZW50ZXJQb3MueCAtIEdldFJlY3RIYWxmV2lkdGgocmVjdCksIGNlbnRlclBvcy55IC0gR2V0UmVjdEhhbGZIZWlnaHQocmVjdCksXHJcbiAgICAgICAgICAgIEdldFJlY3RXaWR0aChyZWN0KSwgR2V0UmVjdEhlaWdodChyZWN0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0xpbmUoc3RhcnRQb3MgPSBudWxsLCBlbmRQb3MgPSBudWxsKXtcclxuICAgICAgICBsZXQgY3R4ID0gdGhpcy5jdHg7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oc3RhcnRQb3MueCwgc3RhcnRQb3MueSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhlbmRQb3MueCwgZW5kUG9zLnkpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3Q2lyY2xlKGNlbnRlclBvcyA9IG51bGwsIHJhZGl1cyA9IDApe1xyXG4gICAgICAgIGxldCBjdHggPSB0aGlzLmN0eDtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyhjZW50ZXJQb3MueCwgY2VudGVyUG9zLnksIHJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkUmVzb3VyY2UoaW1nU3JjID0gXCJcIiwgb25Mb2FkQ2FsbGJhY2sgPSBudWxsKXtcclxuICAgICAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaW1nLnNyYyA9IGltZ1NyYztcclxuICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBvbkxvYWRDYWxsYmFjayhpbWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbktleUNhbGxiYWNrKGtleURvd25DYWxsYmFjayA9IG51bGwsIGtleVVwQ2FsbGJhY2sgPSBudWxsKXtcclxuICAgICAgICBjYW52YXNPbktleUNhbGxiYWNrKGtleURvd25DYWxsYmFjaywga2V5VXBDYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaENhbGxiYWNrKHRvdWNoT25DYWxsYmFjayA9IG51bGwsIHRvdWNoT3ZlckNhbGxiYWNrID0gbnVsbCl7XHJcbiAgICAgICAgY2FudmFzT25Nb3VzZUNhbGxiYWNrKHRoaXMsIHRvdWNoT25DYWxsYmFjaywgdG91Y2hPdmVyQ2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KG9uRW50ZXJGcmFtZUNhbGxiYWNrID0gbnVsbCl7XHJcbiAgICAgICAgcnVuVGljazIodGhpcy5mcHMsIG9uRW50ZXJGcmFtZUNhbGxiYWNrKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIE5ld0g1RW5naW5lKHdpZHRoID0gMCwgaGVpZ2h0ID0gMCwgZnBzID0gMCl7XHJcbiAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgIGN0eC5zdHJva2VTdHlsZT1cIiMwMDAwZmZcIjsgICAgICAgICAgLy/nlLvnn6nlvaLmoYbnlKjnmoRcclxuICAgIHJldHVybiBuZXcgSDVFbmdpbmUoZnBzLCBjYW52YXMsIGN0eCk7XHJcbn1cclxuXHJcbmV4cG9ydHtcclxuICAgIE5ld0g1RW5naW5lXHJcbn1cclxuXHJcblxyXG5jb25zdCBSYWRpdXMgPSBNYXRoLlBJLzE4MDtcclxuZnVuY3Rpb24gRHJhd0ltYWdlV2l0aEFuZ2xlKGFuZ2xlID0gMCwgaW1nRGF0YSwgc3ggPSAwLCBzeSA9IDAsIHN3aWR0aCA9IDAsIHNoZWlnaHQgPSAwLCB4ID0gMCwgeSA9IDAsIHdpZHRoID0gMCwgaGVpZ2h0ID0gMCkge1xyXG4gICAgbGV0IGN0eCA9IF9lbmdpbmUuY3R4O1xyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC50cmFuc2xhdGUoeCArIHdpZHRoLzIsIHkgKyBoZWlnaHQvMik7XHJcbiAgICBjdHgucm90YXRlKGFuZ2xlICogUmFkaXVzKTtcclxuICAgIERyYXdJbWFnZShpbWdEYXRhLCBzeCwgc3ksIHN3aWR0aCwgc2hlaWdodCwgLXdpZHRoLzIsIC1oZWlnaHQvMiwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG5cclxuICAgIC8vIGN0eC50cmFuc2xhdGUoMTAwLCAxMDApO1xyXG5cdC8vIGN0eC5yb3RhdGUoOTAgKiBNYXRoLlBJLzE4MCk7XHQvL+S7peS4iumdoueahOWBj+enu+eCueS4uuWHhu+8jOi/m+ihjOaXi+i9rFxyXG5cdC8vIGN0eC5kcmF3SW1hZ2UoaSwgMTg3LCAwLCAxODYsIDEzMCwgLTAsIC0wLCAxMDAsIDEwMCk7XHJcbn0iLCJpbXBvcnQgeyBOZXdINUVuZ2luZSB9IGZyb20gXCIuL3dlYi9tb2RlbFwiO1xyXG5cclxuY29uc3QgRW5naW5lV2ViID0gMDtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyp9IG9wdGlvbnNcclxuICoge1xyXG4gKiAgICAgIHR5cGUgOiAwLFxyXG4gKiAgICAgIHdpZHRoIDogNDAwLFxyXG4gKiAgICAgIGhlaWdodCA6IDQwMCxcclxuICogICAgICBmcHMgOiA2MCxcclxuICogICAgICBrZXlEb3duSGFuZGxlciA6IGZ1bmMsXHJcbiAqICAgICAga2V5VXBIYW5sZXIgOiBmdW5jLFxyXG4gKiAgICAgIG1vdXNlZG93bkhhbmRsZXIgOiBmdW5jLFxyXG4gKiAgICAgIG1vdXNldXBIYW5kbGVyIDogZnVuY1xyXG4gKiB9XHJcbiAqL1xyXG5mdW5jdGlvbiBDcmVhdGVFbmdpbmVXaXRoRGF0YShvcHRpb25zID0gbnVsbCwga2V5RG93bkhhbmRsZXIgPSBudWxsLCBrZXlVcEhhbmxlciA9IG51bGwsIHRvdWNoT25DYWxsYmFjayA9IG51bGwsIHRvdWNoT3ZlckNhbGxiYWNrID0gbnVsbCl7XHJcbiAgICAvL+m7mOiupOWAvFxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBvcHRpb25zIDoge307XHJcbiAgICBsZXQgd2lkdGggPSBvcHRpb25zWyd3aWR0aCddO1xyXG4gICAgd2lkdGggPSB3aWR0aCA/IHdpZHRoIDogODAwO1xyXG4gICAgbGV0IGhlaWdodCA9IG9wdGlvbnNbJ2hlaWdodCddO1xyXG4gICAgaGVpZ2h0ID0gaGVpZ2h0ID8gaGVpZ2h0IDogODAwO1xyXG4gICAgbGV0IGZwcyA9IG9wdGlvbnNbJ2ZwcyddO1xyXG4gICAgZnBzID0gZnBzID8gZnBzIDogNjA7XHJcbiAgICBsZXQgdHlwZSA9IG9wdGlvbnNbJ3R5cGUnXTtcclxuICAgIHR5cGUgPSB0eXBlID8gdHlwZSA6IEVuZ2luZVdlYjtcclxuXHJcbiAgICBsZXQgZW5naW5lID0gbnVsbDtcclxuICAgIHN3aXRjaCh0eXBlKXtcclxuICAgICAgICBjYXNlIEVuZ2luZVdlYjpcclxuICAgICAgICAgICAgZW5naW5lID0gTmV3SDVFbmdpbmUod2lkdGgsIGhlaWdodCwgZnBzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgLy9lcnJvciBsb2dcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImVycm9yIHR5cGVcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8v5rOo5YaM5oyJ6ZSu5Zue6LCDXHJcbiAgICBpZihrZXlEb3duSGFuZGxlciAmJiBrZXlVcEhhbmxlcil7XHJcbiAgICAgICAgZW5naW5lLm9uS2V5Q2FsbGJhY2soa2V5RG93bkhhbmRsZXIsIGtleVVwSGFubGVyKTtcclxuICAgIH1cclxuICAgIGlmKHRvdWNoT25DYWxsYmFjayAmJiB0b3VjaE92ZXJDYWxsYmFjayl7XHJcbiAgICAgICAgZW5naW5lLm9uVG91Y2hDYWxsYmFjayh0b3VjaE9uQ2FsbGJhY2ssIHRvdWNoT3ZlckNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbmdpbmU7XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBDcmVhdGVFbmdpbmVXaXRoRGF0YVxyXG59IiwiaW1wb3J0IHsgU2V0RGVmYXVsdENhbWVyYSwgU2V0RW5naW5lLCBTZXREYXRhLCBTZXREZWYsIEdldEJpdG1hcCwgU2V0U3ByaXRlRnJhbWUsIEdldEVuZ2luZSB9IGZyb20gXCIuL3Jlc291cmNlXCI7XHJcbmltcG9ydCB7IENyZWF0ZUNhbWVyYVdpdGhEYXRhIH0gZnJvbSBcIi4uLy4uL2xpYi9jYW1lcmEvdXRpbHNcIjtcclxuaW1wb3J0IHsgaW5pdFN5c3RlbXMgfSBmcm9tIFwiLi9zeXN0ZW1cIjtcclxuaW1wb3J0IHsgQ3JlYXRlVGlsZU1hcFdpdGhEYXRhIH0gZnJvbSBcIi4uLy4uL2xpYi9ncmlkL3V0aWxzXCI7XHJcbmltcG9ydCB7IENyZWF0ZUVuZ2luZVdpdGhEYXRhIH0gZnJvbSBcIi4uLy4uL2xpYi9lbmdpbmUvdXRpbHNcIjtcclxuaW1wb3J0IHsgQ3JlYXRlQml0bWFwLCBDcmVhdGVTcHJpdGVGcmFtZSB9IGZyb20gXCIuLi8uLi9mb3VuZGF0aW9uL3N0cnVjdHVyZS9mcmFtZVwiO1xyXG5pbXBvcnQgeyBFbmdpbmVMb2FkUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vbGliL2VuZ2luZS9iYXNlXCI7XHJcblxyXG4vKipcclxuICog6KaB5YWI5Yid5aeL5YyW5byV5pOOXHJcbiAqIG9wdGlvbnMge1xyXG4gKiAgICAgIHNjcmVlbi13aWR0aCA6IDgwMCxcclxuICogICAgICBzY3JlZW4taGVpZ2h0IDogODAwLFxyXG4gKiAgICAgIGZwcyA6IDYwLFxyXG4gKiB9XHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0RW5naW5lKG9wdGlvbnMgPSBudWxsLCBrZXlEb3duSGFuZGxlciA9IG51bGwsIGtleVVwSGFubGVyID0gbnVsbCwgdG91Y2hPbkNhbGxiYWNrID0gbnVsbCwgdG91Y2hPdmVyQ2FsbGJhY2sgPSBudWxsKXtcclxuICAgIFNldEVuZ2luZShcclxuICAgICAgICBDcmVhdGVFbmdpbmVXaXRoRGF0YShvcHRpb25zKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDpgJrov4flj4LmlbDphY3nva7liJ3lp4vljJbns7vnu5/otYTmupBcclxuICogb3B0aW9ucyB7XHJcbiAqICAgICAgZGVidWcgOiBmYWxzZSxcclxuICogICAgICBmcHMgOiA2MCxcclxuICogICAgICB0ZXh0dXJlcyA6IFtd5qC85byP6KeBTG9hZFJlc291cmNlKCnlhoVcclxuICogICAgICBzY3JlZW4td2lkdGggOiA4MDAsXHJcbiAqICAgICAgc2NyZWVuLWhlaWdodCA6IDgwMCxcclxuICogICAgICBjYW1lcmEgOiB7fSxcclxuICogICAgICBlbmdpbmUgOiB7fSxcclxuICogICAgICBsYXllcnMgOiBbXHJcbiAqICAgICAgICAgIHtcclxuICogICAgICAgICAgICAgIHR5cGUgOiAxIOagvOW8j+WPguiAg3RpbGVtYXDkuIDoioJcclxuICogICAgICAgICAgfVxyXG4gKiAgICAgIF1cclxuICogICAgICBjb2xsaWRlIDoge31cclxuICogfVxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdEdhbWUob3B0aW9ucyA9IG51bGwpIHtcclxuICAgIC8v6buY6K6k5YC8XHJcbiAgICBsZXQgc2NyZWVuV2lkdGggPSBvcHRpb25zWydzY3JlZW4td2lkdGgnXTtcclxuICAgIHNjcmVlbldpZHRoID0gc2NyZWVuV2lkdGggJiYgc2NyZWVuV2lkdGggPiAwID8gc2NyZWVuV2lkdGggOiA4MDA7XHJcbiAgICBsZXQgc2NyZWVuSGVpZ2h0ID0gb3B0aW9uc1snc2NyZWVuLWhlaWdodCddO1xyXG4gICAgc2NyZWVuSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0ICYmIHNjcmVlbkhlaWdodCA+IDAgPyBzY3JlZW5IZWlnaHQgOiA4MDA7XHJcblxyXG4gICAgLy/mkYTlg4/mnLpcclxuICAgIFNldERlZmF1bHRDYW1lcmEoXHJcbiAgICAgICAgQ3JlYXRlQ2FtZXJhV2l0aERhdGEob3B0aW9uc1snY2FtZXJhJ10sIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQpKTtcclxuXHJcbiAgICAvL+ezu+e7n1xyXG4gICAgaW5pdFN5c3RlbXMob3B0aW9uc1snZGVidWcnXSk7XHJcblxyXG4gICAgLy/lvIDlkK/norDmkp7ns7vnu59cclxuICAgIGlmKG9wdGlvbnMuY29sbGlkZSl7XHJcbiAgICAgICAgT3BlbkNvbGxpZGVyKG9wdGlvbnMuY29sbGlkZSk7XHJcblxyXG4gICAgICAgIC8vIGlmKG9wdGlvbnMudXNlVGlsZUNvbWJpbmUpe1xyXG4gICAgICAgIC8vICAgICBsZXQgcmVzdWx0Tm9kZXMgPSBDcmVhdGVDb21iaW5lTm9kZXModGlsZW1hcCwgY29sbGlkZS5ib3hIYW5kbGVyKTtcclxuICAgICAgICAvLyAgICAgcmVzdWx0Tm9kZXMuZm9yRWFjaChyZXN1bHQgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgY29sbGlkZS5sb2FkQ2FsbGJhY2socmVzdWx0LnZhbHVlLCByZXN1bHQucmVjdCk7XHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+iHquWumuS5ieaVsOaNruetiVxyXG4gICAgaW5pdERlZihvcHRpb25zWydkZWYnXSk7XHJcbiAgICBpbml0RGF0YXMob3B0aW9uc1snZGF0YXMnXSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXREZWYob3B0aW9ucyA9IG51bGwpe1xyXG4gICAgZm9yKGxldCBrZXkgaW4gb3B0aW9ucyl7XHJcbiAgICAgICAgU2V0RGVmKGtleSwgb3B0aW9uc1trZXldKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRPRE8g5Li05pe25pa55rOV77yM5Lul5ZCO5LyY5YyWXHJcbiAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcclxuICovXHJcbmZ1bmN0aW9uIGluaXREYXRhcyhkYXRhcyA9IG51bGwpe1xyXG4gICAgaWYoIWRhdGFzIHx8IGRhdGFzLmxlbmd0aCA9PSAwKXtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkYXRhcy5mb3JFYWNoKGRhdGEgPT4ge1xyXG4gICAgICAgIGluaXREYXRhT2JqKGRhdGEpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gaW5pdERhdGFPYmoob3B0aW9ucyA9IG51bGwpe1xyXG4gICAgbGV0IGRhdGFPYmogPSBudWxsO1xyXG4gICAgaWYob3B0aW9uc1sndGlsZW1hcCddKXtcclxuICAgICAgICBkYXRhT2JqID0gQ3JlYXRlVGlsZU1hcFdpdGhEYXRhKG9wdGlvbnNbJ3RpbGVtYXAnXSk7XHJcbiAgICB9XHJcbiAgICBsZXQgbmFtZSA9IG9wdGlvbnNbJ25hbWUnXTtcclxuICAgIGlmKG5hbWUpe1xyXG4gICAgICAgIFNldERhdGEobmFtZSwgZGF0YU9iaik7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog5Yqg6L296LWE5rqQ77yM5Yib5bu65binXHJcbiBcInJlc1wiIDoge1xyXG5cdFx0XCJpbWdzXCIgOiBbXHJcblx0XHRcdFwicmVzLzMucG5nXCJcclxuXHRcdF0sXHJcblx0XHRcImZyYW1lc1wiIDogW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCIgOiBcImJ1aWxkaW5nMVwiLFxyXG5cdFx0XHRcdFwicmVzXCIgOiBcInJlcy8zLnBuZ1wiLFxyXG5cdFx0XHRcdFwiYXJlYVwiIDoge1xyXG5cdFx0XHRcdFx0XCJ3aWR0aFwiIDogMTUxLFxyXG5cdFx0XHRcdFx0XCJoZWlnaHRcIiA6IDE2N1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XVxyXG5cdH0sXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2FkV2l0aFJlc291cmNlKHJlcyA9IG51bGwsIE9ubG9hZENhbGxiYWNrID0gbnVsbCwgT25Db21wbGV0ZUNhbGxiYWNrID0gbnVsbCl7XHJcbiAgICBsZXQgaW1ncyA9IHJlcyA/IHJlc1snaW1ncyddIDogbnVsbDtcclxuICAgIGlmKGltZ3MgJiYgaW1ncy5sZW5ndGggPiAwKXtcclxuICAgICAgICBsb2FkUmVzb3VyY2UoaW1ncywgcmVzWydmcmFtZXMnXSwgT25sb2FkQ2FsbGJhY2ssIE9uQ29tcGxldGVDYWxsYmFjayk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgT25Db21wbGV0ZUNhbGxiYWNrKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRSZXNvdXJjZShpbWdzID0gbnVsbCwgZnJhbWVzID0gbnVsbCwgT25sb2FkQ2FsbGJhY2sgPSBudWxsLCBPbkNvbXBsZXRlQ2FsbGJhY2sgPSBudWxsKXtcclxuICAgIGxldCBfY291bnQgPSAwO1xyXG4gICAgaW1ncy5mb3JFYWNoKGltZyA9PntcclxuICAgICAgICBFbmdpbmVMb2FkUmVzb3VyY2UoR2V0RW5naW5lKCksIGltZywgYml0bWFwRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBiaXRtYXBzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBiaXRtYXBzLnNldChpbWcsIENyZWF0ZUJpdG1hcChiaXRtYXBEYXRhLCBiaXRtYXBEYXRhLndpZHRoLCBiaXRtYXBEYXRhLmhlaWdodCkpO1xyXG4gICAgICAgICAgICBfY291bnQrKztcclxuICAgICAgICAgICAgaWYoT25sb2FkQ2FsbGJhY2spe1xyXG4gICAgICAgICAgICAgICAgT25sb2FkQ2FsbGJhY2soaW1nLCBfY291bnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGltZ3MubGVuZ3RoID09IF9jb3VudCl7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVTcHJpdGVGcmFtZXNXaXRoRGF0YShmcmFtZXMsIGJpdG1hcHMpO1xyXG4gICAgICAgICAgICAgICAgaWYoT25Db21wbGV0ZUNhbGxiYWNrKXtcclxuICAgICAgICAgICAgICAgICAgICBPbkNvbXBsZXRlQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gXCJmcmFtZXNcIiA6IFtcclxuXHRcdHtcclxuXHRcdFx0XCJuYW1lXCIgOiBcImJ1aWxkaW5nMVwiLFxyXG5cdFx0XHRcInJlc1wiIDogXCJyZXMvMy5wbmdcIixcclxuXHRcdFx0XCJhcmVhXCIgOiB7XHJcblx0XHRcdFx0XCJ3aWR0aFwiIDogMTUxLFxyXG5cdFx0XHRcdFwiaGVpZ2h0XCIgOiAxNjdcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdF0sXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTcHJpdGVGcmFtZXNXaXRoRGF0YShzcHJpdGVGcmFtZURhdGFzID0gbnVsbCwgYml0bWFwcyA9IG51bGwpe1xyXG4gICAgaWYoIXNwcml0ZUZyYW1lRGF0YXMgfHwgc3ByaXRlRnJhbWVEYXRhcy5sZW5ndGggPT0gMCB8fCAhYml0bWFwcyl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3ByaXRlRnJhbWVEYXRhcy5mb3JFYWNoKGRhdGEgPT4ge1xyXG4gICAgICAgIGNyZWF0ZVNwcml0ZUZyYW1lV2l0aERhdGEoXHJcbiAgICAgICAgICAgIGRhdGFbJ25hbWUnXSwgXHJcbiAgICAgICAgICAgIGJpdG1hcHMuZ2V0KGRhdGFbJ3JlcyddKSxcclxuICAgICAgICAgICAgZGF0YVsnYXJlYSddXHJcbiAgICAgICAgKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVTcHJpdGVGcmFtZVdpdGhEYXRhKG5hbWUgPSBcIlwiLCBiaXRtYXAgPSBudWxsLCBhcmVhID0gbnVsbCl7XHJcbiAgICBpZihuYW1lID09IFwiXCIgfHwgIWJpdG1hcCB8fCAhYXJlYSl7XHJcbiAgICAgICAgY29uc29sZS5lcnIoXCJlcnJvciBwYXJhbS5cIik7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBsZXQgeCA9IGFyZWFbJ3gnXTtcclxuICAgIGxldCB5ID0gYXJlYVsneSddO1xyXG4gICAgbGV0IHdpZHRoID0gYXJlYVsnd2lkdGgnXTtcclxuICAgIGxldCBoZWlnaHQgPSBhcmVhWydoZWlnaHQnXTtcclxuICAgIGlmKCF3aWR0aCB8fCAhaGVpZ2h0KXtcclxuICAgICAgICBjb25zb2xlLmVycihcImVycm9yIHBhcmFtLlwiKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGxldCBmID0gQ3JlYXRlU3ByaXRlRnJhbWUobmFtZSwgYml0bWFwLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgIFNldFNwcml0ZUZyYW1lKG5hbWUsIGYpO1xyXG59XHJcblxyXG5leHBvcnR7XHJcbiAgICBpbml0RW5naW5lLCBpbml0R2FtZSwgbG9hZFdpdGhSZXNvdXJjZVxyXG59IiwiaW1wb3J0IHsgaW5pdEdhbWUsIGxvYWRXaXRoUmVzb3VyY2UsIGluaXRFbmdpbmUgfSBmcm9tIFwiLi9zZXJ2aWNlL2luaXRcIjtcclxuaW1wb3J0IHsgcnVuV2l0aFNjZW5lLCBzdG9wU3lzdGVtIH0gZnJvbSBcIi4vc2VydmljZS9zeXN0ZW1cIjtcclxuaW1wb3J0IHsgR2V0U2NlbmUgfSBmcm9tIFwiLi9zZXJ2aWNlL3Jlc291cmNlXCI7XHJcblxyXG4vKipcclxuICogb3B0aW9ucyB7XHJcbiAqICAgICAgdGV4dHVyZXMgOiDmoLzlvI/op4FMb2FkUmVzb3VyY2UoKeWGhVxyXG4gKiAgICAgIHNjcmVlbiA6IHtcclxuICogICAgICAgICAgd2lkdGggOiA4MDAsXHJcbiAqICAgICAgICAgIGhlaWdodCA6IDgwMFxyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgZnBzIDogNjAsXHJcbiAqICAgICAgZGVidWcgOiBmYWxzZSxcclxuICogICAgICBjYW1lcmEgOiB7XHJcbiAqICAgICAgICAgIHggOiAwLFxyXG4gKiAgICAgICAgICB5IDogMFxyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgdGlsZW1hcCA6IOagvOW8j+WPguiAg3RpbGVtYXDkuIDoioJcclxuICogICAgICBrZXlIYW5kbGVyIDogZnVuY3Rpb24odHlwZSwga2V5Q29kZSkgICB0eXBlPTEgPSBkb3duLCB0eXBlPTIgPSB1cFxyXG4gKiAgICAgIGNvbGxpZGUgOiB7XHJcbiAqICAgICAgICAgIHVzZUJveCA6IGZhbHNlLFxyXG4gKiAgICAgICAgICB1c2VHcm91cCA6IGZhbHNlLFxyXG4gKiAgICAgICAgICBwYWlycyA6IFtcclxuICogICAgICAgICAgICAgIHtcclxuICogICAgICAgICAgICAgICAgICB0ZWFtMSA6IDEsXHJcbiAqICAgICAgICAgICAgICAgICAgdGVhbTIgOiAyXHJcbiAqICAgICAgICAgICAgICB9XHJcbiAqICAgICAgICAgIF0sXHJcbiAqICAgICAgICAgIGhhbmRsZXIgOiBmdW5jdGlvbihkdCwgY29sbGlkZXIxLCBjb2xsaWRlcjIpXHJcbiAqICAgICAgfVxyXG4gKiB9XHJcbiAqIFRPRE8gc2NlbmXlj6/ku6XmmK/kuIDkuKphY3Rpb24/XHJcbiAqL1xyXG5mdW5jdGlvbiBTdGFydChvcHRpb25zID0gbnVsbCwgc2NlbmUgPSBudWxsKXtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zID8gb3B0aW9ucyA6IHt9O1xyXG4gICAgaW5pdEVuZ2luZShvcHRpb25zKTtcclxuICAgIGxvYWRXaXRoUmVzb3VyY2Uob3B0aW9uc1sncmVzJ10sIG51bGwsICgpID0+IHtcclxuICAgICAgICBpbml0R2FtZShvcHRpb25zKTtcclxuICAgICAgICBydW5XaXRoU2NlbmUoc2NlbmUpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFN0b3AoKXtcclxuICAgIEdldFNjZW5lKCkub25FbmQoKTtcclxuICAgIC8vc3RvcFN5c3RlbXMoKTtcclxuICAgIHN0b3BTeXN0ZW0oKTtcclxuICAgIFN0b3BFbmdpbmUoZ2V0RW5naW5lKCkpO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgU3RhcnQsIFN0b3BcclxufSIsImltcG9ydCB7IEFkZFRvTGF5ZXIsIFJlbW92ZUZyb21MYXllciwgR2V0TGF5ZXIgfSBmcm9tIFwiLi9jb21wb25lbnQvbGF5ZXJcIjtcclxuaW1wb3J0IHsgTmV3RGlzcGxheWVyIH0gZnJvbSBcIi4vY29tcG9uZW50L3JlbmRlclwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDliqDlhaXmuLLmn5PpmJ/liJdcclxuICogbGF5ZXJPcmRlciA9IOWbvuWxgumhuuW6j++8jOaVsOWAvOS7juS9juWIsOmrmOmhuuW6j+a4suafk1xyXG4gKiBvcmRlciA9IOiHquW3seaJgOWcqOWbvuWxguWGheeahOmhuuW6j1xyXG4gKiBUT0RPIOmcgOimgeWIpOaWremHjeWkjeaAp++8jOWmguS4gOS4qmVudGl0eUlk5aSa5qyh55So5LqG5ZCM5qC355qEc3ByaXRl77yM55u45LqS6KaG55uW77yM6YCg5oiQ5rWq6LS5XHJcbiAqL1xyXG5mdW5jdGlvbiBBZGREaXNwbGF5ZXIoc3ByaXRlRnJhbWUgPSBudWxsLCBlbnRpdHlJZCA9IDAsIGxheWVyT3JkZXIgPSAxLCBvcmRlciA9IDAsIG9mZnNldCA9IG51bGwpIHtcclxuICAgIGxldCBkcyA9IE5ld0Rpc3BsYXllcihlbnRpdHlJZCwgc3ByaXRlRnJhbWUsIG9mZnNldCwgb3JkZXIsIGxheWVyT3JkZXIpO1xyXG4gICAgQWRkVG9MYXllcihkcyk7XHJcbiAgICByZXR1cm4gZHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFJlbW92ZURpc3BsYXllcihkaXNwbGF5ZXIgPSBudWxsKSB7XHJcbiAgICBSZW1vdmVGcm9tTGF5ZXIoZGlzcGxheWVyKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIEFkZERpc3BsYXllciwgUmVtb3ZlRGlzcGxheWVyXHJcbn0iLCJpbXBvcnQgZGF0YSBmcm9tICcuL2RhdGEnO1xyXG5pbXBvcnQgeyBHZXREYXRhLCBHZXREZWZhdWx0Q2FtZXJhLCBHZXRTcHJpdGVGcmFtZSB9IGZyb20gJy4vZnJhbWV3b3JrL2RpcmVjdG9yL3NlcnZpY2UvcmVzb3VyY2UnO1xyXG5pbXBvcnQgeyBEcmF3UmVjdCwgRHJhd0xpbmUsIERyYXdDaXJjbGUgfSBmcm9tICcuL2ZyYW1ld29yay9kaXJlY3Rvci9yZW5kZXInO1xyXG5pbXBvcnQgeyBTdGFydCB9IGZyb20gJy4vZnJhbWV3b3JrL2RpcmVjdG9yL2Jvb3QnO1xyXG5pbXBvcnQgeyBHcmlkTWFwSXRlcmF0b3IsIEdldEdyaWRXaWR0aCwgR2V0SGFsZkdyaWRXaWR0aCwgR2V0R3JpZERhdGEgfSBmcm9tICcuL2ZyYW1ld29yay9mb3VuZGF0aW9uL2NvbnRhaW5lci9ncmlkbWFwJztcclxuaW1wb3J0IHsgR2V0VGlsZUdyaWRDZW50ZXIgfSBmcm9tICcuL2ZyYW1ld29yay9saWIvZ3JpZC90aWxlbWFwL2Jhc2UnO1xyXG5pbXBvcnQgeyBOZXdSZWN0LCBOZXdQb3MgfSBmcm9tICcuL2ZyYW1ld29yay9mb3VuZGF0aW9uL3N0cnVjdHVyZS9nZW9tZXRyaWMnO1xyXG5pbXBvcnQgeyBHZXRDYW1lcmFIZWlnaHQsIEdldENhbWVyYVdpZHRoIH0gZnJvbSAnLi9mcmFtZXdvcmsvbGliL2NhbWVyYS9iYXNlJztcclxuaW1wb3J0IHsgQWRkRGlzcGxheWVyIH0gZnJvbSAnLi9mcmFtZXdvcmsvbGliL3ZpZXcvdXRpbHMnO1xyXG5pbXBvcnQgeyBOZXdFbnRpdHlJZCB9IGZyb20gJy4vZnJhbWV3b3JrL2ZvdW5kYXRpb24vY29tcG9uZW50L2Vjcyc7XHJcbmltcG9ydCB7IEdldFJlbmRlckNvbXBvbmVudCB9IGZyb20gJy4vZnJhbWV3b3JrL2xpYi92aWV3L2NvbXBvbmVudC9yZW5kZXInO1xyXG5pbXBvcnQgeyBTZXRVbml0UG9zIH0gZnJvbSAnLi9mcmFtZXdvcmsvbGliL3Bvcy9jb21wb25lbnQnO1xyXG5cclxuLy/osKjorrDmlbDmja7pqbHliqjvvIzliIbmuIXkuJrliqHphY3nva7lkozmoYbmnrbpgLvovpHphY3nva5cclxudmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKGRhdGEsIHtcclxuICAgIHRvdWNoT25DYWxsYmFjayA6IHRvdWNoT25DYWxsYmFjayxcclxuICAgIHRvdWNoT3ZlckNhbGxiYWNrIDogdG91Y2hPdmVyQ2FsbGJhY2ssXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gdG91Y2hPbkNhbGxiYWNrKHggPSAwLCB5ID0gMCl7XHJcbiAgICBjb25zb2xlLmxvZyh4LCB5KTtcclxufVxyXG5mdW5jdGlvbiB0b3VjaE92ZXJDYWxsYmFjayh4ID0gMCwgeSA9IDApe1xyXG5cclxufVxyXG5cclxuY2xhc3MgTXlTY2VuZSB7XHJcbiAgICBvblN0YXJ0KCl7XHJcbiAgICAgICAgbGV0IHRpbGVtYXAgPSBHZXREYXRhKFwidGlsZTFcIik7XHJcbiAgICAgICAgR3JpZE1hcEl0ZXJhdG9yKHRpbGVtYXAsIGdyaWQgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IEdldEdyaWREYXRhKGdyaWQpO1xyXG4gICAgICAgICAgICBsZXQgcG9zID0gR2V0VGlsZUdyaWRDZW50ZXIodGlsZW1hcCwgZ3JpZCk7XHJcbiAgICAgICAgICAgIGluaXREaXNwbGF5KGRhdGEsIHBvcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9kcmF3KCk7XHJcbiAgICB9XHJcbiAgICBvblVwZGF0ZShkdCA9IDApe1xyXG4gICAgICAgIGRyYXcoKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhdygpe1xyXG4gICAgZHJhd1RpbGUoKTtcclxuICAgIGRyYXdDZW50ZXIoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0NlbnRlcigpe1xyXG4gICAgRHJhd0NpcmNsZShOZXdQb3MoKSwgMyk7XHJcbiAgICBEcmF3UmVjdChOZXdQb3MoKSwgTmV3UmVjdChcclxuICAgICAgICBHZXRDYW1lcmFXaWR0aChcclxuICAgICAgICAgICAgR2V0RGVmYXVsdENhbWVyYSgpKSxcclxuICAgICAgICBHZXRDYW1lcmFIZWlnaHQoXHJcbiAgICAgICAgICAgIEdldERlZmF1bHRDYW1lcmEoKSkpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1RpbGUoKXtcclxuICAgIGxldCB0aWxlbWFwID0gR2V0RGF0YShcInRpbGUxXCIpO1xyXG4gICAgR3JpZE1hcEl0ZXJhdG9yKHRpbGVtYXAsIGdyaWQgPT4ge1xyXG4gICAgICAgIGxldCBwb3MgPSBHZXRUaWxlR3JpZENlbnRlcih0aWxlbWFwLCBncmlkKTtcclxuICAgICAgICBsZXQgaGFsZldpZHRoID0gR2V0SGFsZkdyaWRXaWR0aChncmlkKTtcclxuICAgICAgICBsZXQgd2lkdGggPSBHZXRHcmlkV2lkdGgoZ3JpZCk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImdbJWQsICVkXTogKCVkLCAlZCksICVkICVkXCIsIGdyaWQucm93SW5kZXgsIGdyaWQuY29sSW5kZXgsIHBvcy54LCBwb3MueSwgaGFsZldpZHRoLCB3aWR0aCk7XHJcbiAgICAgICAgLy9EcmF3UmVjdChwb3MsIE5ld1JlY3Qod2lkdGgsIHdpZHRoKSk7XHJcbiAgICAgICAgdGVzdElzbyhwb3MsIGhhbGZXaWR0aCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGVzdElzbyhwb3MgPSBudWxsLCBoYWxmV2lkdGggPSAwKXtcclxuICAgIGxldCBwb3MxID0gTmV3UG9zKHBvcy54IC0gaGFsZldpZHRoLCBwb3MueSAtIGhhbGZXaWR0aCk7XHJcbiAgICBsZXQgcG9zMWlzbyA9IGdldElzbyhwb3MxKTtcclxuICAgIGxldCBwb3MyID0gTmV3UG9zKHBvcy54ICsgaGFsZldpZHRoLCBwb3MueSAtIGhhbGZXaWR0aCk7XHJcbiAgICBsZXQgcG9zMmlzbyA9IGdldElzbyhwb3MyKTtcclxuICAgIGxldCBwb3MzID0gTmV3UG9zKHBvcy54IC0gaGFsZldpZHRoLCBwb3MueSArIGhhbGZXaWR0aCk7XHJcbiAgICBsZXQgcG9zM2lzbyA9IGdldElzbyhwb3MzKTtcclxuICAgIGxldCBwb3M0ID0gTmV3UG9zKHBvcy54ICsgaGFsZldpZHRoLCBwb3MueSArIGhhbGZXaWR0aCk7XHJcbiAgICBsZXQgcG9zNGlzbyA9IGdldElzbyhwb3M0KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicDE6KCVkLCAlZCksIGlzbzooJWQsICVkKVwiLCBwb3MxLnggLHBvczEueSwgcG9zMWlzby54LCBwb3MxaXNvLnkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJwMjooJWQsICVkKSwgaXNvOiglZCwgJWQpXCIsIHBvczIueCAscG9zMi55LCBwb3MyaXNvLngsIHBvczJpc28ueSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInAzOiglZCwgJWQpLCBpc286KCVkLCAlZClcIiwgcG9zMy54ICxwb3MzLnksIHBvczNpc28ueCwgcG9zM2lzby55KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwicDQ6KCVkLCAlZCksIGlzbzooJWQsICVkKVwiLCBwb3M0LnggLHBvczQueSwgcG9zNGlzby54LCBwb3M0aXNvLnkpO1xyXG5cclxuICAgIC8vIERyYXdMaW5lKHBvczFpc28sIHBvczJpc28pO1xyXG4gICAgLy8gRHJhd0xpbmUocG9zMmlzbywgcG9zM2lzbyk7XHJcbiAgICAvLyBEcmF3TGluZShwb3MzaXNvLCBwb3M0aXNvKTtcclxuICAgIC8vIERyYXdMaW5lKHBvczRpc28sIHBvczFpc28pO1xyXG5cclxuICAgIERyYXdMaW5lKHBvczFpc28sIHBvczJpc28pO1xyXG4gICAgRHJhd0xpbmUocG9zMmlzbywgcG9zNGlzbyk7XHJcbiAgICBEcmF3TGluZShwb3M0aXNvLCBwb3MzaXNvKTtcclxuICAgIERyYXdMaW5lKHBvczNpc28sIHBvczFpc28pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJc28ocG9zID0gbnVsbCl7XHJcbiAgICByZXR1cm4gTmV3UG9zKFxyXG4gICAgICAgIChwb3MueCAtIHBvcy55KSxcclxuICAgICAgICAocG9zLnggKyBwb3MueSkgKiAwLjVcclxuICAgICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcIjFcIiA6IHtcclxuXHRcdFx0XCJkaXNwbGF5XCIgOiB7XHJcblx0XHRcdFx0XCJpc29tZXRyaWNcIiA6IHRydWUsXHJcblx0XHRcdFx0XCJmcmFtZVwiIDogXCJidWlsZGluZzFcIlxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdERpc3BsYXkoZGF0YSA9IG51bGwsIHBvcyA9IG51bGwpe1xyXG4gICAgbGV0IGQgPSBkYXRhWydkaXNwbGF5J107XHJcbiAgICBpZighZCl7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGlkID0gTmV3RW50aXR5SWQoKTtcclxuICAgIEdldFJlbmRlckNvbXBvbmVudChpZCwge2lzb21ldHJpY3M6dHJ1ZX0pO1xyXG4gICAgU2V0VW5pdFBvcyhpZCwgcG9zLngsIHBvcy55KTtcclxuICAgIEFkZERpc3BsYXllcihcclxuICAgICAgICBHZXRTcHJpdGVGcmFtZShkWydmcmFtZSddKSwgaWQpO1xyXG59XHJcblxyXG5cclxuXHJcbihmdW5jdGlvbiAoKXtcclxuICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xyXG4gICAgU3RhcnQob3B0aW9ucywgbmV3IE15U2NlbmUoKSk7XHJcbn0pKCkiXSwic291cmNlUm9vdCI6IiJ9