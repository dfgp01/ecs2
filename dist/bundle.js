!function(t){var n={};function l(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=t,l.c=n,l.d=function(t,n,e){l.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,n){if(1&n&&(t=l(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(l.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)l.d(e,r,function(n){return t[n]}.bind(null,r));return e},l.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(n,"a",n),n},l.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},l.p="",l(l.s=1)}([function(t){t.exports={debug:!0,def:{0:{},1:{color:"#333333"}},datas:[{name:"tile1",tilemap:{data:[1,1,1,1,0,1,1,1,1],columns:3,gridWidth:80,gridHeight:80}}]}},function(t,n,l){"use strict";l.r(n);var e=l(0),r=new Map;var u=new Map;var i=null;function s(){return i}var o=null;function a(){return o}class c{constructor(t=60){this.fps=t,this.tick=1e3/t}clear(){}drawFrame(t=null,n=null){}drawRect(t=null,n=null){}drawLine(t=null,n=null){}drawCircle(t=null,n=0){}loadResource(t="",n=null){}onKeyCallback(t=null,n=null){}onTouchCallback(t=null,n=null){}start(t=null){}}class h{constructor(t=0,n=0){this.x=t,this.y=n}}function d(t=0,n=0){return new h(t,n)}function f(t=null,n=null){return d(t.x-n.x,t.y-n.y)}class p{constructor(t=0,n=0){this.x=t,this.y=n}}function g(t=0,n=0){return new p(t,n)}class w{constructor(t=0,n=0){this.width=t,this.height=n}}function m(t=0,n=0){return 0==t||0==n?(console.error("rect param error. width:%d, height:%d",t,n),null):new w(t,n)}function v(t=null){return.5*t.width}function _(t=null){return.5*t.height}class k{constructor(t=null,n=null){this.pos=t,this.offset=n}}function b(t=null){return d(t.pos.x+t.offset.x,t.pos.y+t.offset.y)}function H(t=0){return Math.trunc(t)}class M extends k{constructor(t=null,n=null,l=null){super(t,n),this.rect=l}}function C(t=null,n=null,l=null){return n=n||g(),new M(t,n,l)}function R(t=null){return b(t)}function I(t=null){let n=R(t);return d(n.x-v(t.rect),n.y-_(t.rect))}class W{constructor(t=null,n=null){this.rectPosRel=t,this.screenOffset=n}}function L(t=null,n=0,l=0){let e=(t=t||{style:0,datas:[{x:0,y:0}]}).datas[0];return function(t=0,n=0,l=0,e=0){let r=C(d(t,n),null,m(l,e));return new W(r)}(e.x,e.y,n,l)}function G(t=null,n=null){return f(n,function(t=null){return I(t.rectPosRel)}(t))}function P(){!function(t=null){t.clear()}(a())}function S(t=null,n=null){!function(t=null,n=null,l=null){let e=G(t,n);!function(t=null,n=null,l=null){t.drawFrame(n,l)}(a(),e.x,e.y)}(s(),t,n)}function E(t=null,n=null){!function(t=null,n=null,l=null){let e=G(t,n);!function(t=null,n=null,l=null){t.drawRect(n,l)}(a(),e,l)}(s(),t,n)}class O{constructor(){}get(t=0){}firsr(){}last(){}size(){}add(t=null){}push(t=null){}insert(t=null,n=0){}pop(){}pull(){}remove(t=0){}iterator(t=null){}iteratorReverse(t=null){}iteratorCompare(t=null){}}function D(t=null,n=null){t&&n&&t.iterator(n)}class T{constructor(t=null,n=null,l=null,e=0){this.data=t,this.prep=n,this.next=l,this.order=e}}class U extends O{constructor(){super(),this.head=new T,this.tail=new T,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}get(t=0){let n=this._map.get(t);return n?n.data:null}first(){let t=this.head.next;return t==this.tail?null:t.data}last(){let t=this.tail.prep;return t==this.head?null:t.data}size(){return this._size}add(t=null){j(this,t,this.tail)}push(t=null){j(this,t,this.head.next)}insert(t=null,n=0){let l=this.head.next;for(;l!=this.tail&&!(n<l.order);)l=l.next;j(this,t,l,n)}pop(){z(this,this.head.next)}pull(){z(this,this.tail.prep)}remove(t=0){z(this,this._map.get(t))}iterator(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail&&!t(n.data);)n=n.next;for(this._lock=!1;this._delList.length>0;)F(this,this._delList.pop())}iteratorReverse(t=null){this._lock=!0;let n=this.tail.prep;for(;n!=this.head&&!t(n.data);)n=n.prep;for(this._lock=!1;this._delList.length>0;)F(this,this._delList.pop())}iteratorCompare(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail;){let l=n.next;for(;l!=this.tail&&!t(n.data,l.data);)l=l.next;n=n.next}for(this._lock=!1;this._delList.length>0;)F(this,this._delList.pop())}}function j(t=null,n=null,l=null,e=0){let r=l.prep,u=new T(n,r,l,e);r.next=u,l.prep=u,t._map.set(n.id,u),t._size++}function z(t=null,n=null){!t||!n||t._size<=0||(t._lock?t._delList.push(n):F(t,n))}function F(t=null,n=null){t._map.delete(keyId);let l=n.prep,e=n.next;l.next=e,e.prep=l,t._size--}function B(){return new U}var K=1;function X(){return K++}class Y{constructor(){this.id=X()}onStart(){}onUpdate(t=0){}onEnd(){}}var A=B();class q{constructor(t=null,n=0,l=0){this.data=t,this.width=n,this.height=l}}function J(t=null){return GetRectWidth(t.rect)}function N(t=null){return GetRectHeight(t.rect)}B();function Q(t=null){return t.spriteFrame}class V extends Y{onUpdate(t=0){P(),function(t=null){D(A,n=>{D(n.list,n=>{t(n)})})}(t=>{IsDisplayISOmetrics(t)?function(t=null){UpdateIsoPos(t),S(function(t=null){return t.isoPos}(t),Q(t))}(camera):function(t=null){S(function(t=null){return b(t.rectPosRel)}(t),Q(t))}(camera)})}}var Z=null;var $=B(),tt=null;function nt(t=!1){Z||(Z=new V),tt=Z}var lt=16,et=41,rt=0,ut=0;function it(t=null){D($,t=>{t.onStart()}),tt.onStart(),t.onStart(),function(t=null,n=null){t.start(n)}(a(),n=>{(rt+=n)>=lt&&(rt-=lt,t.onUpdate(n),D($,t=>{t.onUpdate(n)})),(ut+=n)>=et&&(ut-=et,tt.onUpdate(n))})}class st{constructor(t=0,n=0,l=null){this.width=t,this.height=n,this.data=l}}class ot{getData(t=null){}setData(t=null,n=null){}getGrid(t=null){}getGridMapWidth(){}getGridMapHeight(){}iterator(t=null){}}function at(t=null){return t.width}function ct(t=null){return.5*function(t=null){return t.getGridMapWidth()}(t)}function ht(t=null){return.5*function(t=null){return t.getGridMapHeight()}(t)}function dt(t=null,n=null){t.iterator(n)}class ft extends st{constructor(t=0,n=0,l=0,e=0,r=null){super(t,n,r),this.rowIndex=l,this.colIndex=e}}class pt extends ot{constructor(t=null,n=0,l=0,e=0,r=0,u=null){super(),this.pos=t,this.rows=n,this.columns=l,this.gridWidth=e,this.gridHeight=r,this.grids=u}getData(t=null){let n=gt(t,this);return n?n.data:null}setData(t=null,n=null){let l=gt(t,this);l&&(l.data=n)}getGrid(t=null){return gt(t,this)}getGridMapWidth(){return this.columns*this.gridWidth}getGridMapHeight(){return this.rows*this.gridHeight}iterator(t=null){this.grids.forEach(n=>{t(n)})}}function gt(t=null,n=null){let l=f(t,n.pos);if(!function(t=0,n=0,l=null){return t>0&&t<l.getGridMapWidth()&&n>0&&n<l.getGridMapHeight()}(l.x,l.y,n))return null;let e=H(l.x/gridmap.gridWidth),r=H(l.y/gridmap.gridHeight);return gridmap.grids[r*gridmap.columns+e]}function wt(t=null){return d(t.pos.x-ct(t),t.pos.y-ht(t))}function xt(t=null,n=null){!function(t=null){(t=Object.assign({columns:1,gridWidth:32,gridHeight:32,x:0,y:0,data:[0]},t)).gridWidth=t.gridWidth>0?t.gridWidth:32,t.gridHeight=t.gridHeight>0?t.gridHeight:32}(t);let l=t.columns,e=H(t.data.length/l);if(e*l!=t.data.length)return console.error("error param: len(grids): %d, columns: %d",t.data.length,l),null;let r=function(t=0,n=0,l=0,e=0,r=null){let u=[];for(let r=0;r<t;r++)for(let t=0;t<n;t++)u.push(new ft(l,e,r,t));return r=r||d(),new pt(r,t,n,l,e,u)}(e,l,t.gridWidth,t.gridHeight,d(t.x,t.y));return n&&dt(r,e=>{let u=t.data[e.rowIndex*l+e.colIndex];n(u,r,e)}),r}var mt=!1;var yt=null,vt=(new Date).getTime();var _t=new Map;class kt extends c{constructor(t=60,n=null,l=null){super(t),this.canvas=n,this.ctx=l}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawFrame(t=null,n=null){this.ctx.drawImage(function(t=null){return t.bitmap.data}(n),function(t=null){return t.bitmapX}(n),function(t=null){return t.bitmapY}(n),J(n),N(n),t.x-function(t=null){return GetRectHalfWidth(t.rect)}(n),t.y-function(t=null){return GetRectHalfHeight(t.rect)}(n),J(n),N(n))}drawRect(t=null,n=null){this.ctx.strokeRect(t.x-v(n),t.y-_(n),function(t=null){return t.width}(n),function(t=null){return t.height}(n))}drawLine(t=null,n=null){let l=this.ctx;l.beginPath(),l.moveTo(x1,y1),l.lineTo(x2,y2),l.stroke()}drawCircle(t=null,n=0){let l=this.ctx;l.beginPath(),l.arc(x,y,n,0,2*Math.PI),l.stroke()}loadResource(t="",n=null){let l=new Image;l.src=t,l.onload=function(){n(l)}}onKeyCallback(t=null,n=null){!function(t=null,n=null){window.addEventListener("keydown",n=>{let l=n.keyCode;_t.get(l)||(_t.set(l,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let l=t.keyCode;_t.delete(l),n(t.keyCode)})}(t,n)}onTouchCallback(t=null,n=null){!function(t=null,n=null,l=null){t.canvas.addEventListener("mousedown",t=>{let l=canvas.getBoundingClientRect(),e=t.clientX-l.left*(canvas.width/l.width),r=t.clientY-l.top*(canvas.height/l.height);n(e,r)}),t.canvas.addEventListener("mouseup",t=>{let n=canvas.getBoundingClientRect(),e=t.clientX-n.left*(canvas.width/n.width),r=t.clientY-n.top*(canvas.height/n.height);l(e,r)})}(this,t,n)}start(t=null){!function(t=0,n=null){mt=!1,setInterval(()=>{yt=(new Date).getTime(),mt||n(yt-vt),vt=(new Date).getTime()},t/1e3)}(this.fps,t)}}Math.PI;const bt=0;function Ht(t=null){let n=(t=t||{}).width;n=n||400;let l=t.height;l=l||400;let e=t.fps;e=e||60;let r=t.type,u=null;switch(r=r||bt){case bt:u=function(t=0,n=0,l=0){let e=document.getElementById("canvas");e.width=t,e.height=n;let r=e.getContext("2d");return r.strokeStyle="#0000ff",new kt(l,e,r)}(n,l,e);break;default:return null}return t.keyDownHandler&&t.keyUpHanler&&u.onKeyCallback(t.keyDownHandler,t.keyUpHanler),t.mousedownHandler&&t.mouseupHandler&&u.onMouseCallback(t.mousedownHandler,t.mouseupHandler),u}function Mt(t=null){let n=t["screen-width"];n=n&&n>0?n:800;let l=t["screen-height"];l=l&&l>0?l:800,function(t=null){i=t}(L(t.camera,n,l)),function(t=null){o=t}(Ht(t.engine)),nt(t.debug),t.collide&&OpenCollider(t.collide),function(t=null){if(!t||0==t.length)return;t.forEach(t=>{!function(t=null){let n=null;t.tilemap&&(n=xt(t.tilemap));let l=t.name;l&&function(t="",n=null,l=!0){u.get(t)&&l?console.error("data: %s exists.",t):u.set(t,n)}(l,n)}(t)})}(t.datas)}function Ct(t=null,n=null){(t=t||{}).textures?function(t=null,n=null,l=null){if(!t||0==t.length)return;let e=0;t.forEach(u=>{EngineLoadResource(a(),u.img,i=>{let s=function(t=null,n=0,l=0){return new q(t,n,l)}(i,i.width,i.height);u.frames.forEach(t=>{!function(t="",n=null,l=null){if(""==t||!n||!l)return console.err("error param."),null;let e=l.x,u=l.y,i=l.width,s=l.height;if(!i||!s)return null;let o=CreateSpriteFrame(t,n,e,u,i,s);!function(t="",n=null,l=!0){r.get(t)&&l?console.error("frame: %s exists.",t):r.set(t,n)}(t,o)}(t.name,s,t.textureArea)}),e++,n&&n(e),t.length==e&&l&&l()})})}(t.textures,null,()=>{Mt(t),it(n)}):(Mt(t),it(n))}class Rt{onStart(){}onUpdate(t=0){!function(){let t=function(t=""){return u.get(t)}("tile1");dt(t,n=>{let l=function(t=null,n=null){let l=wt(t);return d(l.x+t.gridWidth*(n.colIndex+.5),l.y+t.gridHeight*(n.rowIndex+.5))}(t,n),e=(function(t=null){at(t)}(n),at(n));E(l,m(e,e))})}()}}console.log(e),Ct(e,new Rt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,