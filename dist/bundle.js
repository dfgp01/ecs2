!function(c){var n={};function l(g){if(n[g])return n[g].exports;var t=n[g]={i:g,l:!1,exports:{}};return c[g].call(t.exports,t,t.exports,l),t.l=!0,t.exports}l.m=c,l.c=n,l.d=function(c,n,g){l.o(c,n)||Object.defineProperty(c,n,{enumerable:!0,get:g})},l.r=function(c){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},l.t=function(c,n){if(1&n&&(c=l(c)),8&n)return c;if(4&n&&"object"==typeof c&&c&&c.__esModule)return c;var g=Object.create(null);if(l.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:c}),2&n&&"string"!=typeof c)for(var t in c)l.d(g,t,function(n){return c[n]}.bind(null,t));return g},l.n=function(c){var n=c&&c.__esModule?function(){return c.default}:function(){return c};return l.d(n,"a",n),n},l.o=function(c,n){return Object.prototype.hasOwnProperty.call(c,n)},l.p="",l(l.s=1)}([function(module){eval('module.exports = JSON.parse("{\\"debug\\":true,\\"textures\\":[{\\"img\\":\\"res/3.png\\",\\"frames\\":[{\\"name\\":\\"building1\\",\\"area\\":{\\"width\\":151,\\"height\\":167}}]}],\\"def\\":{\\"0\\":{},\\"1\\":{\\"display\\":{\\"isometric\\":true,\\"frame\\":\\"building1\\"}},\\"2\\":{\\"display\\":{\\"isometric\\":true,\\"frame\\":\\"building2\\"}},\\"3\\":{\\"display\\":{\\"isometric\\":true,\\"frame\\":\\"building3\\"}}},\\"datas\\":[{\\"name\\":\\"tile1\\",\\"tilemap\\":{\\"data\\":[1,1,1,1,0,1,1,1,1],\\"columns\\":3,\\"grid-width\\":64,\\"grid-height\\":64}}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/data.json\nvar src_data = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/framework/director/resource.js\n/**\r\n * 全局单例资源\r\n */\r\n\r\n\r\n /**\r\n * 获取精灵帧\r\n * TODO \r\n * 可能会改成id形式\r\n * 引入默认资源机制，找不到帧时的默认空帧，可以是一张红叉图片，\r\n */\r\nvar spriteFrameMap = new Map();\r\nfunction GetSpriteFrame(name = "", defaultValue = true){\r\n    let f = spriteFrameMap.get(name);\r\n    if(f){\r\n        return f;\r\n    }\r\n    if(defaultValue){\r\n        return spriteFrameMap.get("defalut");\r\n    }\r\n    return null;\r\n    // return f ? f : \r\n    //     defaultValue ? spriteFrameMap.get("defalut") : null;\r\n}\r\nfunction SetSpriteFrame(name = "", spriteFrame = null, check = true){\r\n    let f = spriteFrameMap.get(name);\r\n    if(f && check){\r\n        console.error("frame: %s exists.", name);\r\n        return;\r\n    }\r\n    spriteFrameMap.set(name, spriteFrame);\r\n}\r\n\r\n/**\r\n * 自定义数据定义\r\n */\r\nvar defMap = new Map();\r\nfunction GetDef(key = 0){\r\n    return defMap.get(key);\r\n}\r\nfunction SetDef(key = 0, data = null){\r\n    defMap.set(key, data);\r\n}\r\n\r\n/**\r\n * 自定义数据\r\n */\r\nvar dataMap = new Map();\r\nfunction GetData(name = ""){\r\n    return dataMap.get(name);\r\n}\r\nfunction SetData(name = "", data = null, check = true){\r\n    let d = dataMap.get(name);\r\n    if(d && check){\r\n        console.error("data: %s exists.", name);\r\n        return;\r\n    }\r\n    dataMap.set(name, data);\r\n}\r\n\r\n\r\n/**\r\n * 摄像机\r\n */\r\nvar defaultCamera = null;\r\nfunction SetDefaultCamera(camera = null){\r\n    defaultCamera = camera;\r\n}\r\nfunction GetDefaultCamera(){\r\n    return defaultCamera;\r\n}\r\n\r\nvar cameras = [];\r\nfunction AddCamera(camera = null){\r\n    cameras.push(camera);\r\n}\r\nfunction GetCameras(){\r\n    return cameras;\r\n}\r\n\r\n\r\n/**\r\n * 外部引擎\r\n */\r\nvar currEngine = null;\r\nfunction SetEngine(engineObj = null){\r\n    currEngine = engineObj;\r\n}\r\nfunction GetEngine(){\r\n    return currEngine;\r\n}\r\n\r\n/**\r\n * 当前场景\r\n */\r\nvar currScene = null;\r\nfunction SetScene(scene = null){\r\n    currScene = scene;\r\n}\r\nfunction GetScene(){\r\n    return currScene;\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/engine/base.js\n\r\n/**\r\n * 外部引擎抽象类\r\n * x, y 都是屏幕坐标，注意\r\n */\r\nclass AbstractEngine {\r\n    constructor(fps = 60){\r\n        this.fps = fps;\r\n        this.tick = 1000 / fps;\r\n    }\r\n\r\n    //清除画布\r\n    clear(){}\r\n\r\n    //画帧\r\n    drawFrame(centerPos = null, spriteFrame = null){}\r\n\r\n    //画矩形\r\n    drawRect(centerPos = null, rect = null){}\r\n\r\n    //画线段\r\n    drawLine(centerPos = null, endPos = null){}\r\n\r\n    //画圆\r\n    drawCircle(centerPos = null, radius = 0){}\r\n\r\n    //imgSrc是图像地址\r\n    loadResource(imgSrc = "", onLoadCallback = null){}\r\n\r\n    onKeyCallback(keyDownCallback = null, keyUpCallback = null){}\r\n    onTouchCallback(touchOnCallback = null, touchOverCallback = null){}\r\n    start(onEnterFrameCallback = null){}\r\n}\r\n\r\nfunction EngineClear(engine = null){\r\n    engine.clear();\r\n}\r\n\r\nfunction EngineDrawFrame(engine = null, centerPos = null, spriteFrame = null){\r\n    engine.drawFrame(centerPos, spriteFrame);\r\n}\r\n\r\nfunction EngineDrawRect(engine = null, centerPos = null, rect = null){\r\n    engine.drawRect(centerPos, rect);\r\n}\r\n\r\nfunction EngineDrawLine(engine = null, startPos = null, endPos = null){\r\n    engine.drawLine(startPos, endPos);\r\n}\r\n\r\nfunction EngineDrawCircle(engine = null, centerPos = null, radius = 0){\r\n    engine.drawCircle(centerPos, radius);\r\n}\r\n\r\nfunction base_EngineLoadResource(engine = null, imgSrc = "", onLoadCallback = null){\r\n    engine.loadResource(imgSrc, onLoadCallback);\r\n}\r\n\r\nfunction EngineOnKeyCallback(engine = null, keyDownCallback = null, keyUpCallback = null){\r\n    engine.onKeyCallback(keyDownCallback, keyUpCallback);\r\n}\r\n\r\nfunction EngineOnTouchCallback(engine = null, touchOnCallback = null, touchOverCallback = null){\r\n    engine.onTouchCallback(touchOnCallback, touchOverCallback);\r\n}\r\n\r\nfunction EngineStart(engine = null, onEnterFrameCallback = null){\r\n    engine.start(onEnterFrameCallback);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/structure/geometric.js\n/**\r\n * 基础2D坐标\r\n */\r\nclass Pos {\r\n    constructor(x = 0, y = 0){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nfunction NewPos(x = 0, y = 0){\r\n    return new Pos(x, y);\r\n}\r\n\r\nfunction UpdatePos(pos = null, x = 0, y = 0){\r\n    pos.x = x;\r\n    pos.y = y;\r\n}\r\n\r\n/**\r\n * 计算相对坐标\r\n * 以targetPos为准，计算referPos于targetPos的相对坐标\r\n * 举例：\r\n *      摄像机位于(50, 50)处，referPos\r\n *      单位A位于(120, 30)处，targetPos\r\n *      那么，单位A在摄像机的(120-50, 30-50)处\r\n */\r\nfunction ToLocatePos(targetPos = null, referPos = null){\r\n    return NewPos(\r\n        targetPos.x - referPos.x,\r\n        targetPos.y - referPos.y);\r\n}\r\n\r\n/**\r\n * 基础向量\r\n * distance: 距离系数，注意不是实际距离，只用于比较距离大小\r\n */\r\nclass Vec {\r\n    constructor(x = 0, y = 0){\r\n        this.x = x;\r\n        this.y = y;\r\n        //this.distance = x * x + y * y;\r\n    }\r\n}\r\n\r\nfunction NewVec(x = 0, y = 0){\r\n    return new Vec(x, y);\r\n}\r\n\r\nfunction NewVecWithPos(posStart = null, posEnd = null){\r\n    return new NewVec(posEnd.x - posStart.x, posEnd.y - posStart.y);\r\n}\r\n\r\nfunction UpdateVec(vec = null, x = 0, y = 0){\r\n    vec.x = x;\r\n    vec.y = y;\r\n    //vec.distance = x * x + y * y;\r\n}\r\n\r\n/**\r\n * 距离系数\r\n * 注意，并非实际距离值，因为开根号计算消耗大\r\n * 若只用于对比大小，此系数即可\r\n */\r\nfunction GetVecDistance(vec = null){\r\n    //return vec.distance;\r\n    return vec.x * vec.x + vec.y * vec.y;\r\n}\r\n\r\n\r\n/**\r\n * 2D基础矩形，只有宽高\r\n * width, height : 宽高\r\n */\r\nclass Rectangle {\r\n    constructor(width = 0, height = 0) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\n/**\r\n * 矩形默认居中于owner\r\n * 此方法一般由collider调用\r\n */\r\nfunction geometric_NewRect(width = 0, height = 0){\r\n    if(width == 0 || height == 0){\r\n        console.error("rect param error. width:%d, height:%d", width, height);\r\n        return null;\r\n    }\r\n    return new Rectangle(width, height);\r\n}\r\n\r\nfunction UpdateRectSize(rect = null, width = 0, height = 0){\r\n    rect.width = width;\r\n    rect.height = height;\r\n}\r\n\r\n\r\nfunction GetRectWidth(rect = null){\r\n    return rect.width;\r\n}\r\nfunction GetRectHeight(rect = null){\r\n    return rect.height;\r\n}\r\nfunction GetRectHalfWidth(rect = null){\r\n    return rect.width * 0.5;\r\n}\r\nfunction GetRectHalfHeight(rect = null){\r\n    return rect.height * 0.5;\r\n}\r\n\r\n//求面积\r\nfunction GetRectArea(rect = null){\r\n    return rect.width * rect.height;\r\n}\r\n\r\n/**\r\n * 圆形\r\n */\r\nclass Circle {\r\n    constructor(radius = 0) {\r\n        this.radius = radius;\r\n    }\r\n}\r\n\r\nfunction NewCircle(radius = 0){\r\n    if(radius == 0){\r\n        console.error("circle param error. radius:%d", radius);\r\n        return null;\r\n    }\r\n    return new Circle(radius);\r\n}\r\n\r\nfunction GetCircleRadius(circle = null){\r\n    return circle.radius;\r\n}\r\n\r\nfunction UpdateCircle(circle = null, radius = 0){\r\n    circle.radius = radius;\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/offset/base.js\n\r\n\r\n/**\r\n * TODO\r\n * 先写，再慢慢规范\r\n * 这里不能有posCom，因为这是基础层\r\n * box-collider用到IsRectsCrossWithVec来检测碰撞，需要重新考虑\r\n * 要么就做成lib\r\n */\r\nclass PosOffsetRelation {\r\n    constructor(pos = null, offset = null){\r\n        this.pos = pos;\r\n        this.offset = offset;       //通常是指显示时的偏移量，和worldPos无关\r\n    }\r\n}\r\n\r\nfunction NewPosOffsetRelation(pos = null, offset = null){\r\n    offset = offset ? offset : NewVec();\r\n    return new PosOffsetRelation(pos, offset);\r\n}\r\n\r\nfunction base_GetPos(posOffsetRel = null){\r\n    return posOffsetRel.pos;\r\n}\r\n\r\nfunction GetOffset(posOffsetRel = null){\r\n    return posOffsetRel.offset;\r\n}\r\n\r\nfunction GetRealPos(posOffsetRel = null){\r\n    return NewPos(\r\n        posOffsetRel.pos.x + posOffsetRel.offset.x,\r\n        posOffsetRel.pos.y + posOffsetRel.offset.y);\r\n}\r\n\r\nfunction UpdateOffset(posOffsetRel = null, xOffset = 0, yOffset = 0){\r\n    posOffsetRel.offset.x = xOffset;\r\n    posOffsetRel.offset.y = yOffset;\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/structure/math.js\nconst MAX_INT = 2147483647   //  2^31 - 1 = 2147483647\r\nfunction GetMaxInt(){\r\n    return MAX_INT;\r\n}\r\n\r\nfunction Abs(val = 0){\r\n    return val >= 0 ? val : -val;\r\n}\r\n\r\nfunction Max(val1 = 0, val2 = 0){\r\n    return val1 > val2 ? val1 : val2;\r\n}\r\n\r\nfunction Min(val1 = 0, val2 = 0){\r\n    return val1 < val2 ? val1 : val2;\r\n}\r\n\r\n/**\r\n * 之前：x < 0 ? Math.ceil(x) : Math.floor(x)\r\n * 现在：Math.trunc(x)\r\n * @param {*} num \r\n */\r\nfunction GetInt(num = 0){\r\n    return Math.trunc(num);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/offset/rect.js\n\r\n\r\n\r\n\r\n/**\r\n * 矩形与位置的关系元件\r\n */\r\nclass rect_RectPosRelation extends PosOffsetRelation {\r\n    constructor(pos = null, offset = null, rect = null){\r\n        super(pos, offset);\r\n        this.rect = rect;\r\n    }\r\n}\r\n\r\nfunction NewRectPosRelation(pos = null, offset = null, rect = null){\r\n    offset = offset ? offset : NewVec();\r\n    return new rect_RectPosRelation(pos, offset, rect);\r\n}\r\n\r\nfunction GetRect(rectPosTuple = null){\r\n    return rectPosTuple.rect;\r\n}\r\n\r\nfunction GetRectPosCenter(rectPosTuple = null){\r\n    return GetRealPos(rectPosTuple);\r\n}\r\n\r\nfunction GetRectPosStart(rectPosTuple = null){\r\n    let pos = GetRectPosCenter(rectPosTuple);\r\n    return NewPos(\r\n        pos.x - GetRectHalfWidth(rectPosTuple.rect),\r\n        pos.y - GetRectHalfHeight(rectPosTuple.rect)\r\n    );\r\n}\r\n\r\nfunction GetRectPosEnd(rectPosTuple = null){\r\n    let pos = GetRectPosCenter(rectPosTuple);\r\n    return NewPos(\r\n        pos.x + GetRectHalfWidth(rectPosTuple.rect),\r\n        pos.y + GetRectHalfHeight(rectPosTuple.rect)\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * 目前的机制，可以使用矩形中心点之间的距离判断是否相交\r\n */\r\nfunction IsRectsCross(rectPosTuple1 = null, rectPosTuple2 = null){\r\n    let pos1 = GetRectPosCenter(rectPosTuple1);\r\n    let pos2 = GetRectPosCenter(rectPosTuple2);\r\n    let w = Abs(pos1.x - pos2.x);\r\n    if(w > GetRectHalfWidth(rectPosTuple1.rect) + GetRectHalfWidth(rectPosTuple2.rect)){\r\n        return false;\r\n    }\r\n    let h = Abs(pos1.y - pos2.y);\r\n    if(h > GetRectHalfHeight(rectPosTuple1.rect) + GetRectHalfHeight(rectPosTuple2.rect)){\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * TODO 需重新设计\r\n * @param {*} rectPosTuple1 \r\n * @param {*} rectPosTuple2 \r\n */\r\nfunction IsRectsCrossWithVec(rectPosTuple1 = null, rectPosTuple2 = null) {\r\n    let rp1 = GetRectPosCenter(rectPosTuple1);\r\n    let pos1 = NewPos(\r\n        rp1.x + rectPosTuple1.unitVec.x,\r\n        rp1.y + rectPosTuple1.unitVec.y\r\n    );\r\n    let rp2 = GetRectPosCenter(rectPosTuple2);\r\n    let pos2 = NewPos(\r\n        rp2.x + rectPosTuple2.unitVec.x,\r\n        rp2.y + rectPosTuple2.unitVec.y\r\n    );\r\n    let w = Abs(pos1.x - pos2.x);\r\n    if(w > GetRectHalfWidth(rectPosTuple1.rect) + GetRectHalfWidth(rectPosTuple2.rect)){\r\n        return false;\r\n    }\r\n    let h = Abs(pos1.y - pos2.y);\r\n    if(h > GetRectHalfHeight(rectPosTuple1.rect) + GetRectHalfHeight(rectPosTuple2.rect)){\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * TODO 有待优化\r\n * 两个矩形是否相交，基础碰撞检测（需要先更新坐标）\r\n * 原理：\r\n *  左x，取两者最大值\r\n *  右x，取两者最小值\r\n *  如果右x大于左x，则x轴相交\r\n * Y同理：\r\n *  上y，取两者最大值\r\n *  下y，取两者最小值\r\n *  如果下y大于上y，则y轴相交\r\n *  目前，即使两边重叠，也不算相交，这样能避免很多问题\r\n */\r\nfunction NewInnerRect(rectPosTuple1 = null, rectPosTuple2 = null){\r\n    if(!IsRectsCross(rectPosTuple1, rectPosTuple2)){\r\n        return null;\r\n    }\r\n\r\n    let start1 = GetRectPosStart(rectPosTuple1);\r\n    let start2 = GetRectPosStart(rectPosTuple2);\r\n    let end1 = GetRectPosEnd(rectPosTuple1);\r\n    let end2 = GetRectPosEnd(rectPosTuple2);\r\n\r\n    let r1x1 = start1.x;\r\n    let r2x1 = start2.x;\r\n    let maxX1 = r1x1 > r2x1 ? r1x1 : r2x1;\r\n\r\n    let r1x2 = end1.x;\r\n    let r2x2 = end2.x;\r\n    let minX2 = r1x2 < r2x2 ? r1x2 : r2x2;\r\n\r\n    let r1y1 = start1.y;\r\n    let r2y1 = start2.y;\r\n    let maxY1 = r1y1 > r2y1 ? r1y1 : r2y1;\r\n\r\n    let r1y2 = end1.y;\r\n    let r2y2 = end2.y;\r\n    let minY2 = r1y2 < r2y2 ? r1y2 : r2y2;\r\n\r\n    let width = minX2 - maxX1;\r\n    let height = minY2 - maxY1;\r\n    let rect = NewRect(0, 0, width, height);\r\n    if(!rect){\r\n        return null;\r\n    }\r\n\r\n    return NewRectPosTuple(0, 0, \r\n        NewPos(\r\n            maxX1 + GetRectHalfWidth(rect),\r\n            maxY1 + GetRectHalfHeight(rect)\r\n        ), NewVec(), rect);\r\n}\r\n\r\n/**\r\n * 修复位置，根据rect的中心位置修复unit.pos\r\n */\r\nfunction FixUnitPos(rectPosTuple = null, rectX = 0, rectY = 0){\r\n    rectPosTuple.unitPos.x = rectX - rectPosTuple.offset.x;\r\n    rectPosTuple.unitPos.y = rectY - rectPosTuple.offset.y;\r\n}\r\n\r\nfunction FixUnitVec(rectPosTuple = null, rectX = 0, rectY = 0) {\r\n    rectPosTuple.unitVec.x = rectX - rectPosTuple.unitPos.x;\r\n    rectPosTuple.unitVec.y = rectY - rectPosTuple.unitPos.y;    \r\n}\r\n\r\n/**\r\n * 根据unit位置更新rect位置（一般场景调用）\r\n */\r\nfunction FixRectPos(rectPosTuple = null, unitPosX = 0, unitPosY = 0){\r\n    rectPosTuple.center.x = unitPosX + rectPosTuple.offset.x;\r\n    rectPosTuple.center.y = unitPosY + rectPosTuple.offset.y;\r\n}\r\n\r\n/**\r\n * inner.rect不准越出outter.rect，修正innrer.pos位置\r\n * inner和outter都是RectPosTuple\r\n */\r\nfunction FixInRect(outter = null, inner = null){\r\n    let centerPos = GetRectPosCenter(inner);\r\n    let innerStartPos = GetRectPosStart(inner);\r\n    let innerEndPos = GetRectPosEnd(inner);\r\n    let outterStartPos = GetRectPosStart(outter);\r\n    let outterEndPos = GetRectPosEnd(outter);\r\n\r\n    let x = centerPos.x;\r\n    if(innerStartPos.x < outterStartPos.x){\r\n        x = outterStartPos.x + GetRectHalfWidth(inner);\r\n    }else if(innerEndPos.x > outterEndPos.x){\r\n        x = outterEndPos.x - GetRectHalfWidth(inner);\r\n    }\r\n\r\n    let y = centerPos.y;\r\n    if(innerStartPos.y < outterStartPos.y){\r\n        y = outterStartPos.y + GetRectHalfHeight(inner);\r\n    }else if(innerEndPos.y > outterEndPos.y){\r\n        y = outterStartPos.y - GetRectHalfHeight(inner);\r\n    }\r\n\r\n    FixUnitPos(inner, x, y);\r\n}\r\n\r\n\r\n/**\r\n * 当前位置是否在矩形中（同样需要先更新rect位置）\r\n * 包含踩线情况\r\n */\r\nfunction IsPosInRect(pos = null, rectPosTuple = null){\r\n    let startPos = GetRectPosCenter(rectPosTuple);\r\n    let endPos = GetRectPosEnd(rectPosTuple);\r\n    return pos.x >= startPos.x && pos.x <= endPos.x\r\n        && pos.y >= startPos.y && pos.y <= endPos.y;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//----------------- 以下待定\r\n\r\n/**\r\n * 根据线段作矩形\r\n */\r\nfunction NewOutterRect(x1 = 0, y1 = 0, x2 = 0, y2 = 0){\r\n    let width = x2 - x1;\r\n    let height = y2 - y1;\r\n    if(width <= 0 || height <= 0){\r\n        return null;\r\n    }\r\n    let centerX = x1 + (x2 - x1) * 0.5;\r\n    let centerY = y1 + (y2 - y1) * 0.5;\r\n    let rect = NewRectDefault(width, height);\r\n    UpdateRectPos(rect, centerX, centerY);\r\n    return rect;\r\n}\r\n\r\n/**\r\n * 两个矩形间的外接矩形\r\n */\r\nfunction NewOutterRectByRects(rect1 = null, rect2 = null){\r\n    let r1x1 = GetRectX1(rect1);\r\n    let r2x1 = GetRectX1(rect2);\r\n    let x1 = r1x1 < r2x1 ? r1x1 : r2x1;\r\n    let r1x2 = GetRectX2(rect1);\r\n    let r2x2 = GetRectX2(rect2);\r\n    let x2 = r1x2 > r2x2 ? r1x2 : r2x2;\r\n\r\n    let r1y1 = GetRectY1(rect1);\r\n    let r2y1 = GetRectY1(rect2);\r\n    let y1 = r1y1 < r2y1 ? r1y1 : r2y1;\r\n    let r1y2 = GetRectY2(rect1);\r\n    let r2y2 = GetRectY2(rect2);\r\n    let y2 = r1y2 > r2y2 ? r1y2 : r2y2;\r\n\r\n    return NewOutterRect(x1, y1, x2, y2);\r\n}\r\n\r\n\r\n/**\r\n * 矩形排斥，targetRect会被blockRect弹出去\r\n * TODO，以后完善注释\r\n */\r\nfunction FixExcludeRect(blockRect = null, targetRect = null){\r\n    let pos1 = blockRect.pos;\r\n    let pos2 = targetRect.pos;\r\n    //计算关系，上下左右\r\n    let vx = pos1.x - pos2.x;\r\n    let vy = pos1.y - pos2.y;\r\n    let x = vx < 0 ? vx*-1 : vx;\r\n    let y = vy < 0 ? vy*-1 : vy;\r\n    if(x > y){\r\n        //左右\r\n        if(vx > 0){\r\n            //rect2在左\r\n            pos2.x = blockRect.posStart.x - targetRect.width - targetRect.xOffset;\r\n        }else{\r\n            //rect2在右\r\n            pos2.x = blockRect.posEnd.x - targetRect.xOffset;\r\n        }\r\n    }else{\r\n        //上下\r\n        if(vy > 0){\r\n            //rect2在上\r\n            pos2.y = blockRect.posStart.y - targetRect.height - targetRect.yOffset;\r\n        }\r\n        else{\r\n            //rect2在下\r\n            pos2.y = blockRect.posEnd.y - targetRect.yOffset;\r\n        }\r\n    }\r\n    UpdateRect(targetRect);\r\n}\n// CONCATENATED MODULE: ./src/framework/lib/camera/base.js\n\r\n\r\n\r\n/**\r\n * 摄像机抽象类\r\n * 目前，Camera即是RectPosTuple，只是其offset=0而已\r\n * 后续可能会增加新属性，先用个类来做\r\n */\r\nclass BaseCamera {\r\n    constructor(rectPosRel = null, screenOffset = null){\r\n        this.rectPosRel = rectPosRel;\r\n        this.screenOffset = screenOffset;   //屏幕左上角偏移量\r\n    }\r\n}\r\n\r\nfunction NewCamera(x = 0, y = 0, width = 0, height = 0){\r\n    let pos = NewPos(x, y);\r\n    let rp = NewRectPosRelation(pos, null, geometric_NewRect(width, height));\r\n    return new BaseCamera(rp);\r\n}\r\n\r\nfunction GetCameraStartPos(camera = null){\r\n    return GetRectPosStart(camera.rectPosRel);\r\n}\r\n\r\nfunction GetCameraWidth(camera = null){\r\n    return GetRectWidth(\r\n        GetRect(camera.rectPosRel));\r\n}\r\n\r\nfunction GetCameraHeight(camera = null){\r\n    return GetRectHeight(\r\n        GetRect(camera.rectPosRel));\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/camera/utils.js\n\r\n\r\n\r\n/**\r\n * options = {\r\n *      style : 0,\r\n *      datas : [\r\n *          {\r\n *              x : 0, y : 0,  \r\n *              //扩展：offset-x : 0, offset-y : 0, width : 0, height : 0\r\n *          }\r\n *      ]\r\n * }\r\n */\r\nfunction CreateCameraWithData(options = null, width = 0, height = 0){\r\n    //默认值\r\n    options = options ? options : {\r\n        style : 0,\r\n        datas : [{x : 0, y : 0}]\r\n    };\r\n    //TODO\r\n    let c = options.datas[0];\r\n    return NewCamera(c[\'x\'], c[\'y\'], width, height);\r\n}\r\n\r\nfunction ToCameraStartPos(camera = null, pos = null){\r\n    return ToLocatePos(\r\n        pos, GetCameraStartPos(camera));\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/director/render.js\n\r\n\r\n\r\n\r\n/**\r\n * 清除画布\r\n */\r\nfunction Clear(){\r\n    EngineClear(GetEngine());\r\n}\r\n\r\n/**\r\n * TODO 可能会改成spriteFrameId参数\r\n */\r\nfunction DrawFrame(pos = null, spriteFrame = null){\r\n    DrawFrameInCamera(\r\n        GetDefaultCamera(), pos, spriteFrame);\r\n}\r\n\r\nfunction DrawFrameInCamera(camera = null, pos = null, spriteFrame = null){\r\n    let cPos = ToCameraStartPos(camera, pos);\r\n    EngineDrawFrame(GetEngine(),\r\n        cPos.x, cPos.y, spriteFrame);\r\n}\r\n\r\nfunction DrawRect(pos = null, rect = null){\r\n    DrawRectInCamera(\r\n        GetDefaultCamera(), pos, rect);\r\n}\r\n\r\nfunction DrawRectInCamera(camera = null, pos = null, rect = null){\r\n    let cPos = ToCameraStartPos(camera, pos);\r\n    EngineDrawRect(GetEngine(), cPos, rect);\r\n}\r\n\r\nfunction DrawLine(posStart = null, posEnd = null){\r\n    DrawLineInCamera(\r\n        GetDefaultCamera(), posStart, posEnd);\r\n}\r\n\r\nfunction DrawLineInCamera(camera = null, posStart = null, posEnd = null){\r\n    let cPos1 = ToCameraStartPos(camera, posStart);\r\n    let cPos2 = ToCameraStartPos(camera, posEnd);\r\n    EngineDrawLine(GetEngine(), cPos1, cPos2);\r\n}\r\n\r\nfunction DrawCircle(pos = null, radius = 0){\r\n    DrawCircleInCamera(\r\n        GetDefaultCamera(), pos, radius);\r\n}\r\n\r\nfunction DrawCircleInCamera(camera = null, pos = null, radius = 0){\r\n    let cPos = ToCameraStartPos(camera, pos);\r\n    EngineDrawCircle(GetEngine(), cPos, radius);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/container/list.js\n/**\r\n * 抽象列表操作\r\n */\r\nclass AbstractList {\r\n    constructor(){}\r\n    get(id = 0){}          //根据id获得\r\n    firsr(){}\r\n    last(){}\r\n    size(){}                //返回长度\r\n    add(data = null){}      //尾部追加\r\n    push(data = null){}     //头部追加\r\n    insert(data = null, order = 0){}    //插入到指定顺序，相同order间的先后顺序看具体实现逻辑\r\n    pop(){}               //移除头部元素\r\n    pull(){}              //移除尾部元素\r\n    remove(id = 0){}      //根据id移除\r\n    iterator(callback = null){}\r\n    iteratorReverse(callback = null){}\r\n    iteratorCompare(callback = null){}\r\n}\r\n\r\nfunction GetListData(list = null, id = 0, required = false){\r\n    let data = list.get(id);\r\n    if(!data && required){\r\n        console.error("can\'t find keyId: ", id);\r\n    }\r\n    return data;\r\n}\r\n\r\nfunction GetListFirst(list = null){\r\n    return list.first();\r\n}\r\n\r\nfunction GetListLast(list = null){\r\n    return list.last();\r\n}\r\n\r\nfunction GetListSize(list = null){\r\n    return list.size();\r\n}\r\n\r\nfunction checkAdd(list = null, data = null){\r\n    if(!list || !data || !data.id){\r\n        console.error("error param.");\r\n        return false;\r\n    }\r\n    //不能重复添加\r\n    let d = GetListData(list, id);\r\n    if(d){\r\n        console.error("error id:%d is exist", id);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 尾部追加\r\n * @param {*} list \r\n * @param {*} data \r\n */\r\nfunction AddToList(list = null, data = null){\r\n    if(checkAdd(list, data)){\r\n        list.add(data);\r\n    }\r\n}\r\n\r\n/**\r\n * 头部追加\r\n * @param {*} list \r\n * @param {*} data \r\n */\r\nfunction PushToList(list = null, data = null){\r\n    if(checkAdd(list, data)){\r\n        list.push(data);\r\n    }\r\n}\r\n\r\n/**\r\n * 根据顺序号插入\r\n * @param {*} list \r\n * @param {*} data \r\n * @param {*} order \r\n */\r\nfunction InsertToList(list = null, data = null, order = 0){\r\n    if(checkAdd(list, data)){\r\n        list.insert(data, order);\r\n    }\r\n}\r\n\r\n/**\r\n * 头部移除\r\n * @param {*} list \r\n */\r\nfunction PopFromList(list = null){\r\n    list.pop();\r\n}\r\n\r\n/**\r\n * 尾部移除\r\n * @param {*} list \r\n */\r\nfunction PullFromList(list = null){\r\n    list.pull();\r\n}\r\n\r\n/**\r\n * 根据id移除\r\n * @param {*} list \r\n * @param {*} id \r\n */\r\nfunction RemoveFromList(list = null, id = 0){\r\n    list.remove(id);\r\n}\r\n\r\n/**\r\n * 正向遍历\r\n * @param {*} list \r\n * @param {*} callback func(data){ return bool} 若bool=true，则终止遍历\r\n */\r\nfunction ListIterator(list = null, callback = null){\r\n    if(!list || !callback) {\r\n        //log here\r\n        return\r\n    }\r\n    list.iterator(callback);\r\n}\r\n\r\n/**\r\n * 反向遍历\r\n * @param {*} list \r\n * @param {*} callback \r\n */\r\nfunction ListIteratorReverse(list = null, callback = null){\r\n    if(!list || !callback) {\r\n        //log here\r\n        return\r\n    }\r\n    list.iteratorReverse(callback);\r\n}\r\n\r\n/**\r\n * 内部依次对比\r\n * @param {*} list \r\n * @param {*} callback func(data1, data2) return bool 若bool=true，则终止遍历\r\n */\r\nfunction ListIteratorCompare(list = null, callback = null){\r\n    if(!link || !callback) {\r\n        //log here\r\n        return\r\n    }\r\n    list.iteratorCompare(callback);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/list/linklist.js\n\r\n\r\nclass LinkNode {\r\n\tconstructor(data = null, prep = null, next = null, order = 0) {\r\n\t\tthis.data = data;\r\n\t\tthis.prep = prep;\r\n        this.next = next;\r\n        this.order = order;\r\n\t}\r\n}\r\n\r\nclass linklist_LinkList extends AbstractList {\r\n\tconstructor() {\r\n        super();\r\n\t\tthis.head = new LinkNode();\t\t//empty data node\r\n\t\tthis.tail = new LinkNode();\r\n\t\tthis.head.next = this.tail;\r\n\t\tthis.tail.prep = this.head;\r\n\t\tthis._map = new Map();\r\n\t\tthis._size = 0;\r\n        this._delList = [];\r\n        this._curr = this.head;\r\n        this._lock = false;\r\n    }\r\n    \r\n    get(id = 0){\r\n        let node = this._map.get(id);\r\n        return node ? node.data : null;\r\n    }\r\n\r\n    first(){\r\n        let node = this.head.next;\r\n        return node == this.tail ? null : node.data;\r\n    }\r\n\r\n    last(){\r\n        let node = this.tail.prep;\r\n        return node == this.head ? null : node.data;\r\n    }\r\n\r\n    size(){\r\n        return this._size;\r\n    }\r\n\r\n    add(data = null){\r\n        addToLink(this, data, this.tail);\r\n    }\r\n\r\n    push(data = null){\r\n        addToLink(this, data, this.head.next);\r\n    }\r\n\r\n    insert(data = null, order = 0){\r\n        let node = this.head.next;\r\n        while(node != this.tail){\r\n            if(order < node.order){\r\n                break;\r\n            }\r\n            node = node.next;\r\n        }\r\n        addToLink(this, data, node, order);\r\n    }\r\n\r\n    pop(){\r\n        removeWithCheck(this, this.head.next);\r\n    }\r\n\r\n    pull(){\r\n        removeWithCheck(this, this.tail.prep);\r\n    }\r\n\r\n    remove(id = 0){\r\n        removeWithCheck(this, this._map.get(id));\r\n    }\r\n\r\n    iterator(callback = null){\r\n        this._lock = true;\r\n        let node = this.head.next;\r\n        while(node != this.tail){\r\n            if(callback(node.data)){\r\n                break;\r\n            }\r\n            node = node.next;\r\n        }\r\n        this._lock = false;\r\n        while(this._delList.length > 0){\r\n            removeNode(this, this._delList.pop());\r\n        }\r\n    }\r\n\r\n    iteratorReverse(callback = null){\r\n        this._lock = true;\r\n        let node = this.tail.prep;\r\n        while(node != this.head){\r\n            if(callback(node.data)){\r\n                break;\r\n            }\r\n            node = node.prep;\r\n        }\r\n        this._lock = false;\r\n        while(this._delList.length > 0){\r\n            removeNode(this, this._delList.pop());\r\n        }\r\n    }\r\n\r\n    iteratorCompare(callback = null){\r\n        this._lock = true;\r\n        let outNode = this.head.next;\r\n        while(outNode != this.tail){\r\n            let inNode = outNode.next;\r\n            while(inNode != this.tail){\r\n                if(callback(outNode.data, inNode.data)){\r\n                    break;\r\n                }\r\n                inNode = inNode.next;\r\n            }\r\n            outNode = outNode.next;\r\n        }\r\n        this._lock = false;\r\n        while(this._delList.length > 0){\r\n            removeNode(this, this._delList.pop());\r\n        }\r\n    }\r\n}\r\n\r\nfunction addToLink(link = null, data = null, next = null, order = 0){\r\n    //新节点连接\r\n    let prep = next.prep;\r\n    let node = new LinkNode(data, prep, next, order);\r\n    prep.next = node;\r\n    next.prep = node;\r\n\r\n    link._map.set(data.id, node);\r\n    link._size++;\r\n}\r\n\r\nfunction removeWithCheck(link = null, targetNode = null){\r\n    if(!link || !targetNode || link._size <= 0){\r\n        return;\r\n    }\r\n    if(link._lock){\r\n        link._delList.push(targetNode);\r\n        return;\r\n    }\r\n    removeNode(link, targetNode);\r\n}\r\n\r\nfunction removeNode(link = null, node = null){\r\n    link._map.delete(keyId);\r\n    let p = node.prep;\r\n    let n = node.next;\r\n    p.next = n;\r\n    n.prep = p;\r\n    link._size--;\r\n}\r\n\r\nfunction linklist_NewLink(){\r\n    return new linklist_LinkList();\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/component/ecs.js\n\r\n/**\r\n * 每一种新类对应一个ID，便于回收\r\n */\r\nvar clzId = 1;\r\nfunction NextClassId(){\r\n\treturn clzId++;\r\n}\r\n\r\n/**\r\n * 每个实体拥有一个独立ID\r\n */\r\nvar ecs_entityId = 1;\r\nfunction NewEntityId(){\r\n\treturn ecs_entityId++;\r\n}\r\n\r\n/**\r\n * 暂定这个名\r\n */\r\nclass DFClass {\r\n\tconstructor(clzId = 0) {\r\n\t\tthis.clzId = clzId;\r\n\t}\r\n}\r\n\r\n/**\r\n * 拥有id属性的都继承此类，即ECS中的Entity\r\n */\r\nclass GameObject {\r\n\tconstructor() {\r\n\t\tthis.id = NewEntityId();\r\n\t}\r\n}\r\n\r\n/**\r\n*\tThe base Component\r\n*\t每个entity对每种组件只能持有一个\r\n*/\r\nclass ecs_Component {\r\n\tconstructor(entityId = 0) {\r\n\t\tthis.entityId = entityId;\r\n\t\tthis.id = entityId;\t\t\t//给link使用\r\n\t}\r\n}\r\n\r\n/**\r\n*\tThe base System\r\n*/\r\nclass System {\r\n\tconstructor(){\r\n\t\tthis.id = NewEntityId();\r\n\t}\r\n    onStart(){}\r\n    onUpdate(dt = 0){}\r\n    onEnd(){}\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/view/component/layer.js\n\r\n\r\n\r\n/**\r\n * 显示图层\r\n *  order越低，越先渲染，后渲染的会遮住前面渲染的\r\n */\r\nclass layer_Layer {\r\n    constructor(order = 0){\r\n        this.id = order;\r\n        this.order = order;\r\n        this.list = linklist_NewLink();\r\n    }\r\n}\r\n\r\nvar layerList = linklist_NewLink();\r\nfunction addLayer(order = 0){\r\n    let layer = new layer_Layer(order);\r\n    InsertToList(layerList, layer);\r\n    return layer;\r\n}\r\n\r\nfunction GetLayer(order = 0){\r\n    let layer = GetListData(layerList, order);\r\n    if(!layer){\r\n        layer = addLayer(order);\r\n    }\r\n    return layer;\r\n}\r\n\r\nfunction IteratorLayers(callback = null){\r\n    ListIterator(layerList, layer => {\r\n        ListIterator(layer.list, displayTuple => {\r\n            callback(displayTuple);\r\n        });\r\n    })\r\n}\r\n\r\nfunction AddToLayer(displayTuple = null){\r\n    let layer = GetLayer(displayTuple.layerOrder);\r\n    InsertToList(layer.list, displayTuple, displayTuple.order);\r\n}\r\n\r\nfunction RemoveFromLayer(displayTuple = null){\r\n    let layer = GetLayer(displayTuple.order);\r\n    RemoveFromList(layer.list, displayTuple.id);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/structure/frame.js\n/**\r\n * data就是图片文件\r\n * width, height可选，最好有\r\n */\r\nclass Bitmap {\r\n    constructor(data = null, width = 0, height = 0) {\r\n        this.data = data;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nfunction CreateBitmap(bitmapData = null, width = 0, height = 0){\r\n    return new Bitmap(bitmapData, width, height);\r\n}\r\n\r\n/**\r\n * 用于表示bitmap的一个区域，并非rect\r\n */\r\nclass Seg {\r\n    constructor(x = 0, y = 0, width = 0, height = 0){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\n/**\r\n * 一张图中的一个区域，纹理帧或精灵帧，单例，和引擎有关\r\n * 精灵帧用于标出一张纹理图的指定取材区域，以及相对的显示位置\r\n */\r\nclass SpriteFrame {\r\n    constructor(name = "", seg = null, bitmap = null) {\r\n        this.name = name;\r\n        this.seg = seg;\r\n        this.bitmap = bitmap;\r\n    }\r\n}\r\n\r\nfunction frame_CreateSpriteFrame(name = "", bitmap = null, x = 0, y = 0, width = 0, height = 0){\r\n    let seg = new Seg(x, y, width, height);\r\n    let f = new SpriteFrame(name, seg, bitmap);\r\n    return f;\r\n}\r\n\r\n/**\r\n * spriteFrame开始绘制的坐标，左上角开始，与pos无关\r\n * @param {*} spriteFrame \r\n */\r\nfunction GetSpriteFrameStartX(spriteFrame = null){\r\n    return spriteFrame.seg.x;\r\n}\r\nfunction GetSpriteFrameStartY(spriteFrame = null){\r\n    return spriteFrame.seg.y;\r\n}\r\n\r\nfunction GetSpriteFrameWidth(spriteFrame = null){\r\n    return spriteFrame.seg.width;\r\n}\r\n\r\nfunction GetSpriteFrameHalfWidth(spriteFrame = null){\r\n    return spriteFrame.seg.width * 0.5;\r\n}\r\n\r\nfunction GetSpriteFrameHeight(spriteFrame = null){\r\n    return spriteFrame.seg.height;\r\n}\r\n\r\nfunction GetSpriteFrameHalfHeight(spriteFrame = null){\r\n    return spriteFrame.seg.height * 0.5;\r\n}\r\n\r\nfunction GetSpriteFrameBitmapData(spriteFrame = null){\r\n    return spriteFrame.bitmap.data;\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/pos/component.js\n\r\n\r\n\r\n/**\r\n * 位置组件\r\n */\r\nclass component_PosComponent extends Component {\r\n    constructor(entityId = 0, pos = null){\r\n        super(entityId);\r\n        this.pos = pos;\r\n        this.vec = NewVec();\r\n    }\r\n}\r\n\r\nvar posComs = NewLink();\r\nfunction createPosComponent(entityId = 0) {\r\n    let com = new component_PosComponent(entityId, NewPos());\r\n    AddToList(posComs, com);\r\n    return com;\r\n}\r\n\r\nfunction GetPosComponent(entityId = 0) {\r\n    let com = GetListData(posComs, entityId);\r\n    return com ? com : createPosComponent(entityId);\r\n}\r\n\r\nfunction RemovePosComponent(entityId = 0){\r\n    RemoveFromList(posComs, entityId);\r\n}\r\n\r\nfunction GetUnitPos(entityId = 0){\r\n    return GetPosComponent(entityId).pos;\r\n}\r\n\r\nfunction SetUnitPos(entityId = 0, x = 0, y = 0){\r\n    UpdatePos(GetUnitPos(entityId), x, y);\r\n}\r\n\r\nfunction GetUnitVec(entityId = 0){\r\n    return GetPosComponent(entityId).vec;\r\n}\r\n\r\nfunction SetUnitVec(entityId = 0, x = 0, y = 0){\r\n    UpdateVec(GetUnitVec(entityId), x, y);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/view/component/render.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 显示组件，包含一些显示参数\r\n */\r\nclass render_RenderComponent extends ecs_Component {\r\n\tconstructor(entityId = 0, isometrics = false, angle = 0, scale = 1) {\r\n        super(entityId);\r\n        this.isometrics = isometrics;\r\n        this.angle = angle;\r\n        this.scale = scale;\r\n\t}\r\n}\r\n\r\nvar renderComs = linklist_NewLink();\r\nfunction createRenderComponent(entityId = 0, options = null) {\r\n    //默认值\r\n    options = options ? options : {};\r\n    let com = new render_RenderComponent(entityId, options.isometrics, options.angle, options.scale);\r\n    AddToList(renderComs, com);\r\n    return com;\r\n}\r\n\r\n/**\r\n * 查找渲染显示组件，暂时这样搞\r\n * options : {\r\n *      isometric : false,\r\n *      angle : 180,\r\n *      scale : 0.5\r\n * }\r\n */\r\nfunction GetRenderComponent(entityId = 0, options = null) {\r\n    let com = GetListData(renderComs, entityId);\r\n    return com ? com : createRenderComponent(entityId, options);\r\n}\r\n\r\n/**\r\n * 显示元件\r\n *  和entity关系不大，一个entity可以拥有大于一个DisplayTuple\r\n *  需要设计机制避免滥用问题\r\n */\r\nclass render_DisplayTuple extends GameObject {\r\n    constructor(spriteFrame = null, renderCom = null, rectPosRel = null, order = 0, layerOrder = 0){\r\n        super();\r\n        this.spriteFrame = spriteFrame;\r\n        this.renderCom = renderCom;\r\n        this.rectPosRel = rectPosRel;\r\n        this.order = order;\r\n        this.layerOrder = layerOrder;\r\n        this.isoPos = NewPos();\r\n    }\r\n}\r\n\r\nfunction NewDisplayer(entityId = 0, spriteFrame = null, offset = null, order = 0, layerOrder = 0){\r\n    let renderCom = GetRenderComponent(entityId);\r\n    let posCom = GetPosComponent(entityId);\r\n    let rp = NewRectPosRelation(posCom.pos, offset, geometric_NewRect(\r\n            GetSpriteFrameWidth(spriteFrame), GetSpriteFrameHeight(spriteFrame)));\r\n    let ds = new render_DisplayTuple(spriteFrame, renderCom, rp, order, layerOrder);\r\n    return ds;\r\n}\r\n\r\nfunction render_IsDisplayISOmetrics(displayer = null){\r\n    return displayer.renderCom.isometrics;\r\n}\r\n\r\nfunction GetDisplaySpriteFrame(displayer = null){\r\n    return displayer.spriteFrame;\r\n}\r\n\r\nfunction GetDisplayCenterPos(displayer = null){\r\n    return GetRealPos(displayer.rectPosRel);\r\n}\r\n\r\nfunction GetDisplayIsoPos(displayer = null){\r\n    return displayer.isoPos;\r\n}\r\n\r\nfunction UpdateIsoPos(displayer = null){\r\n    let pos = base_GetPos(displayTuple.rectPosRel);\r\n    let offset = GetOffset(displayTuple.rectPosRel);\r\n    UpdatePos(displayer.isoPos,\r\n        (pos.x - pos.y) * 0.5 + offset.x,\r\n        (pos.x + pos.y) * 0.5 + offset.y);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/view/system.js\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 渲染系统，逻辑步骤：\r\n * 1.   清除画布\r\n * 2.   重定位摄像机\r\n * 3.   计算单位显示矩形是否在摄像机矩形内\r\n * 4.   转换为画布坐标\r\n * 5.   画出图像\r\n */\r\nclass system_RenderUpdateSystem extends System {\r\n    onUpdate(dt = 0){\r\n        Clear();\r\n        LinkIterator(GetDisplayList(), displayTuple => {\r\n            let pos = GetPos(displayTuple.entityId);\r\n            UpdateRectPosByUnit(displayTuple.displayArea, pos.x, pos.y);\r\n            DrawFrame(displayTuple.spriteFrame, displayTuple.pos);\r\n        });\r\n    }\r\n}\r\n\r\nclass system_LayerRenderUpdateSystem extends System {\r\n    onUpdate(dt = 0){\r\n        Clear();\r\n        IteratorLayers(displayTuple => {\r\n            if(IsDisplayISOmetrics(displayTuple)){\r\n                drawIso(camera, displayTuple);\r\n            }else{\r\n                draw(camera, displayTuple);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction drawIso(displayTuple = null){\r\n    UpdateIsoPos(displayTuple);\r\n    DrawFrame(\r\n        GetDisplayIsoPos(displayTuple),\r\n        GetDisplaySpriteFrame(displayTuple));\r\n}\r\n\r\nfunction draw(displayTuple = null){\r\n    DrawFrame(\r\n        GetDisplayCenterPos(displayTuple),\r\n        GetDisplaySpriteFrame(displayTuple));\r\n}\r\n\r\nvar renderSys = null;\r\nfunction GetRenderUpdateSystem(){\r\n    if(!renderSys){\r\n        renderSys = new system_LayerRenderUpdateSystem();\r\n    }\r\n    return renderSys;\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/director/service/system.js\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 主系统列表\r\n */\r\nvar logicSystems = linklist_NewLink();\r\nvar renderSystem = null;\r\nfunction initSystems(debug = false){\r\n    //InsertToLink(logicSystems, GetActionSystem());\r\n    //InsertToLink(logicSystems, GetPosUpdateSystem());\r\n    renderSystem = GetRenderUpdateSystem();\r\n}\r\n\r\nvar logicTick = 16;     //60fps\r\nvar renderTick = 41;    //24fps\r\nvar _t1 = 0;\r\nvar _t2 = 0;\r\nfunction runWithScene(scene = null){\r\n    ListIterator(logicSystems, system => {\r\n        system.onStart();\r\n    });\r\n    renderSystem.onStart();\r\n    scene.onStart();\r\n\r\n    //main loop\r\n    EngineStart(GetEngine(), dt => {\r\n        _t1 += dt;\r\n        if(_t1 >= logicTick){\r\n            _t1 -= logicTick;\r\n            scene.onUpdate(dt);\r\n            ListIterator(logicSystems, system => {\r\n                system.onUpdate(dt);\r\n            });\r\n        }\r\n\r\n        _t2 += dt;\r\n        if(_t2 >= renderTick){\r\n            _t2 -= renderTick;\r\n            renderSystem.onUpdate(dt);\r\n        }\r\n    });\r\n}\r\n\r\nfunction addSystem(system = null){\r\n    if(!system){\r\n        return;\r\n    }\r\n    InsertToLink(logicSystems, system);\r\n}\r\n\r\nfunction stopSystem(){\r\n    ListIterator(logicSystems, system => {\r\n        system.onEnd();\r\n    });\r\n    renderSystem.onEnd();\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/foundation/container/gridmap.js\n\r\n /**\r\n  * gridmap的网格单元\r\n  */\r\n class BaseGrid {\r\n    constructor(width = 0, height = 0, data = null){\r\n        this.width = width;\r\n        this.height = height;\r\n        this.data = data;       //存储的对象\r\n    }\r\n}\r\n\r\n/**\r\n * 网格表是个基础二元容器，应归类为元数据\r\n * rows = 行数\r\n * columns = 列数\r\n * gridWidth, gridHeight = 每个网格的宽高范围，建议1:1\r\n * \r\n */\r\nclass AbstractGridMap {\r\n    getData(pos = null){}\r\n    setData(pos = null, data = null){}\r\n    getGrid(pos = null){}\r\n    getGridMapWidth(){}\r\n    getGridMapHeight(){}\r\n    iterator(callback = null){}\r\n}\r\n\r\nfunction GetGridData(gridmap = null, pos = null){\r\n    return gridmap.getData(pos);\r\n}\r\nfunction SetGridData(gridmap = null, pos = null, data = null){\r\n    return gridmap.setData(pos, data);\r\n}\r\nfunction GetGrid(gridmap = null, pos = null){\r\n    return gridmap.getGrid(pos);\r\n}\r\n\r\n\r\n/**\r\n * 基础属性：宽度\r\n */\r\nfunction GetGridWidth(grid = null){\r\n    return grid.width;\r\n}\r\nfunction GetHalfGridWidth(grid = null){\r\n    return GetGridWidth(grid) * 0.5;\r\n}\r\nfunction GetGridMapWidth(gridmap = null){\r\n    return gridmap.getGridMapWidth();\r\n}\r\nfunction GetHalfGridMapWidth(gridmap = null){\r\n    return GetGridMapWidth(gridmap) * 0.5;\r\n}\r\n\r\n/**\r\n * 基础属性：高度\r\n */\r\nfunction GetGridHeight(grid = null){\r\n    return grid.height;\r\n}\r\nfunction GetHalfGridHeight(grid = null){\r\n    return GetGridHeight(grid) * 0.5;\r\n}\r\nfunction GetGridMapHeight(gridmap = null){\r\n    return gridmap.getGridMapHeight();\r\n}\r\nfunction GetHalfGridMapHeight(gridmap = null){\r\n    return GetGridMapHeight(gridmap) * 0.5;\r\n}\r\n\r\n/**\r\n * 遍历\r\n * @param {*} gridmap \r\n * @param {*} callback \r\n */\r\nfunction GridMapIterator(gridmap = null, callback = null){\r\n    gridmap.iterator(callback);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/grid/tilemap/base.js\n\r\n\r\n\r\n\r\n/**\r\n  * gridmap的网格单元\r\n  */\r\n class base_TileGrid extends BaseGrid {\r\n    constructor(width = 0, height = 0, rowIndex = 0, colIndex = 0, data = null){\r\n        super(width, height, data);\r\n        this.rowIndex = rowIndex;\r\n        this.colIndex = colIndex;\r\n    }\r\n}\r\n\r\n/**\r\n * 2d瓷砖地图，由GridMap扩展\r\n * sample:\r\n * [\r\n\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \r\n\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \r\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, \r\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\r\n\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \r\n\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \r\n]\r\n */\r\nclass base_TileMap extends AbstractGridMap {\r\n    constructor(pos = null, rows = 0, columns = 0, gridWidth = 0, gridHeight = 0, grids = null){\r\n        super();\r\n        this.pos = pos;\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.gridWidth = gridWidth;\r\n        this.gridHeight = gridHeight;\r\n        this.grids = grids;\r\n    }\r\n\r\n    getData(pos = null){\r\n        let grid = getGridWithPos(pos, this);\r\n        return grid ? grid.data : null;\r\n    }\r\n    setData(pos = null, data = null){\r\n        let grid = getGridWithPos(pos, this);\r\n        if(grid){\r\n            grid.data = data;\r\n        }\r\n    }\r\n    getGrid(pos = null){\r\n        return getGridWithPos(pos, this);\r\n    }\r\n    getGridMapWidth(){\r\n        return this.columns * this.gridWidth;\r\n    }\r\n    getGridMapHeight(){\r\n        return this.rows * this.gridHeight;\r\n    }\r\n    iterator(callback = null){\r\n        this.grids.forEach(grid => {\r\n            callback(grid);\r\n        });\r\n    }\r\n}\r\n\r\nfunction NewTileMap(rows = 0, columns = 0, gridWidth = 0, gridHeight = 0, pos = null){\r\n    let grids = [];\r\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\r\n        for (let colIndex = 0; colIndex < columns; colIndex++) {\r\n            grids.push(new base_TileGrid(gridWidth, gridHeight, rowIndex, colIndex));\r\n        }\r\n    }\r\n    pos = pos ? pos : NewPos();\r\n    return new base_TileMap(pos, rows, columns, gridWidth, gridHeight, grids);\r\n}\r\n\r\nfunction checkIn(x = 0, y = 0, tilemap = null){\r\n    return x > 0 && x < tilemap.getGridMapWidth() && y > 0 && y < tilemap.getGridMapHeight();\r\n}\r\n\r\nfunction getGridWithPos(pos = null, tilemap = null){\r\n    let tPos = ToLocatePos(pos, tilemap.pos);\r\n    if(!checkIn(tPos.x, tPos.y, tilemap)){\r\n        return null;\r\n    }\r\n    let column = GetInt(tPos.x / gridmap.gridWidth);\r\n    let row = GetInt(tPos.y / gridmap.gridHeight);\r\n    return gridmap.grids[row * gridmap.columns + column];\r\n}\r\n\r\n\r\n/**\r\n * 基础坐标\r\n * @param {*} tilemap \r\n */\r\nfunction GetTilemapStart(tilemap = null){\r\n    return NewPos(\r\n        tilemap.pos.x - GetHalfGridMapWidth(tilemap),\r\n        tilemap.pos.y - GetHalfGridMapHeight(tilemap)\r\n    );\r\n}\r\nfunction GetTilemapEnd(tilemap = null){\r\n    return NewPos(\r\n        tilemap.pos.x + GetHalfGridMapWidth(tilemap),\r\n        tilemap.pos.y + GetHalfGridMapHeight(tilemap)\r\n    );\r\n}\r\nfunction GetTilemapCenter(tilemap = null){\r\n    return NewPos(tilemap.pos.x, tilemap.pos.y);\r\n}\r\n\r\nfunction GetTileGridStart(tilemap = null, grid = null){\r\n    let start = GetTilemapStart(tilemap);\r\n    return NewPos(\r\n        start.x + GetGridWidth(tilemap.gridmap) * grid.colIndex,\r\n        start.y + GetGridHeight(tilemap.gridmap) * grid.rowIndex\r\n    );\r\n}\r\nfunction GetTileGridEnd(tilemap = null, grid = null){\r\n    let start = GetTilemapStart(tilemap);\r\n    return NewPos(\r\n        start.x + tilemap.gridWidth * (grid.colIndex + 1),\r\n        start.y + tilemap.gridHeight * (grid.rowIndex + 1)\r\n    );\r\n}\r\nfunction GetTileGridCenter(tilemap = null, grid = null){\r\n    let start = GetTilemapStart(tilemap);\r\n    return NewPos(\r\n        start.x + tilemap.gridWidth * (grid.colIndex + 0.5),\r\n        start.y + tilemap.gridHeight * (grid.rowIndex + 0.5)\r\n    );\r\n}\r\n\r\n\r\n\r\n/**\r\n * 找出与rect相交的所有grid\r\n * TODO 未定，可能不需要这种做法\r\n */\r\nfunction GetGridsByRect(tileMap = null, rect = null){\r\n    //是否在tilemap中\r\n    if(!IsRectCross(tileMap.rect, rect)){\r\n        return null;\r\n    }\r\n    let grids = [];\r\n    let posStart = rect.posStart;\r\n    let columnStart = parseInt(posStart.x / tileMap.gridWidth);\r\n    let rowStart = parseInt(posStart.y / tileMap.gridHeight);\r\n    columnStart = columnStart < 0 ? 0 : columnStart;\r\n    rowStart = rowStart < 0 ? 0 : rowStart;\r\n\r\n    let posEnd = rect.posEnd;\r\n    let columnEnd = parseInt(posEnd.x / tileMap.gridWidth);\r\n    let rowEnd = parseInt(posEnd.y / tileMap.gridHeight);\r\n    columnEnd = columnEnd > tileMap.columns - 1 ? tileMap.columns - 1 : columnEnd;\r\n    rowEnd = rowEnd > tileMap.rows - 1 ? tileMap.rows - 1 : rowEnd;\r\n\r\n    for(let row=rowStart; row<=rowEnd; row++){\r\n        for(let column=columnStart; column<=columnEnd; column++){\r\n            grids.push(tileMap.grids[row][column]);\r\n        }\r\n    }\r\n    return grids;\r\n}\n// CONCATENATED MODULE: ./src/framework/lib/grid/utils.js\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * tilemap = gridmap + pos\r\n * gridmap的相对坐标是(0, 0)，即左上角\r\n * tilemap.pos和其他对象一样，从中间开始\r\n * gridPos是grid矩形中间\r\n * 例如：tilemap.pos.x = 20, gridWidth = 50, column = 5;\r\n * 那么grid[0]的pos.x= 20 + 0*50 + 50/2 = 45, posStart.x = 45 - 50/2 = 20\r\n * 同理grid[4]的pos.x= 20 + 4*50 + 50/2 = 245, posStart.x = 245 - 50/2 = 220\r\n * \r\n * options:{\r\n *      data : [                一维数组\r\n *          1, 1, 1, 0, 0, 1,\r\n *          2, 1, 0, 0, 1, 2,\r\n *          2, 2, 1, 1, 1, 1\r\n *          ]\r\n *      columns : 6     列数\r\n *      grid-width : 32\r\n *      gridiheight : 32     每个格子的宽高\r\n *      x : 0\r\n *      y : 0           初始位置，默认为stage中心，即(0, 0)\r\n *      onCreate : func\r\n * }\r\n */\r\nfunction CreateTileMapWithData(options = null, onCreate = null){\r\n    //默认值\r\n    defaultTileMapData(options);\r\n    \r\n    //验证tilemap数据完整性\r\n    let columns = options.columns;\r\n    let rows = GetInt(options.data.length / columns);\r\n    if(rows * columns != options.data.length){\r\n        console.error("error param: len(grids): %d, columns: %d", options.data.length, columns);\r\n        return null;\r\n    }\r\n    let tilemap = NewTileMap(\r\n        rows, columns, options.gridWidth, options.gridHeight, NewPos(options.x, options.y));\r\n    if(onCreate){\r\n        GridMapIterator(tilemap, grid => {\r\n            let data = GetDef(options.data[grid.rowIndex * columns + grid.colIndex])\r\n            onCreate(data, tilemap, grid);\r\n        });\r\n    }\r\n    return tilemap;\r\n}\r\n\r\nfunction defaultTileMapData(options = null){\r\n    options = Object.assign({\r\n        columns : 1,\r\n        gridWidth : 32,\r\n        gridHeight : 32,\r\n        x : 0,\r\n        y : 0,\r\n        data : [0]\r\n    }, options);\r\n    options.gridWidth = options.gridWidth > 0 ? options.gridWidth : 32;\r\n    options.gridHeight = options.gridHeight > 0 ? options.gridHeight : 32;\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/engine/web/processor.js\n\r\nvar _callback;\r\nvar _frameNo = 0;\r\nvar _dt = 0;\r\nvar _last = 0;\r\nvar _isEnd = false;\r\nfunction runTick(timestamp) {\r\n    _dt = timestamp - _last;\r\n    _last = timestamp;\r\n    _callback(_dt);\r\n    if(!_isEnd){\r\n        _frameNo = window.requestAnimationFrame(tick);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * debug\r\n */\r\nvar processor_start = null;\r\nvar last = new Date().getTime();\r\nfunction runTick2(fps = 0, onUpdateCallback = null) {\r\n    _isEnd = false;\r\n    onUpdateCallback;\r\n    let tick = 1000 / fps;\r\n    setInterval(() => {\r\n        processor_start = new Date().getTime();\r\n        if(!_isEnd){\r\n            onUpdateCallback(processor_start - last);\r\n        }\r\n        last = new Date().getTime();\r\n    }, tick);\r\n}\r\n\r\nfunction stop(){\r\n    _isEnd = true;\r\n}\r\n\r\n\r\n//因为按住键的话，会不断触发onKeydown，所以做个map判断\r\nvar _keyDownMap = new Map();\r\nfunction canvasOnKeyCallback(keyDownCallback = null, keyUpCallback = null){\r\n    window.addEventListener("keydown", e => {\r\n        let code = e.keyCode;\r\n        if(_keyDownMap.get(code)){\r\n            return;\r\n        }\r\n        _keyDownMap.set(code, 1);\r\n        keyDownCallback(e.keyCode);\r\n    });\r\n    window.addEventListener("keyup", e => {\r\n        let code = e.keyCode;\r\n        _keyDownMap.delete(code);\r\n        keyUpCallback(e.keyCode);\r\n    });\r\n}\r\n\r\n/**\r\n * https://blog.csdn.net/qq_17616169/article/details/72833044\r\n */\r\nfunction canvasOnMouseCallback(engine = null, mousedownCallback = null, mouseupCallback = null){\r\n    engine.canvas.addEventListener("mousedown", event => {\r\n        let rect = canvas.getBoundingClientRect();\r\n        let x = event.clientX - rect.left * (canvas.width / rect.width);\r\n        let y = event.clientY - rect.top * (canvas.height / rect.height);\r\n        mousedownCallback(x, y);\r\n    });\r\n    engine.canvas.addEventListener("mouseup", event => {\r\n        let rect = canvas.getBoundingClientRect();\r\n        let x = event.clientX - rect.left * (canvas.width / rect.width);\r\n        let y = event.clientY - rect.top * (canvas.height / rect.height);\r\n        mouseupCallback(x, y);\r\n    });\r\n    // engine.canvas.addEventListener("click", event => {\r\n    //     console.log(event.x, event.y);\r\n    // });\r\n    //engine.canvas.addEventListener("mousemove",doMouseMove,false);\r\n    //engine.canvas.addEventListener("mouseout",doMouseOut,false);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/engine/web/model.js\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 浏览器的key-code\r\n */\r\nconst KEY_RIGHT = 39;\r\nconst KEY_LEFT = 37;\r\nconst KEY_UP = 38;\r\nconst KEY_DOWN = 40;\r\n\r\nconst KEY_SPACE = 32;\r\n\r\nconst KEY_W = 87;\r\nconst KEY_A = 65;\r\nconst KEY_S = 83;\r\nconst KEY_D = 68;\r\n\r\nclass model_H5Engine extends AbstractEngine {\r\n    constructor(fps = 60, canvas = null, ctx = null){\r\n        super(fps);\r\n        this.canvas = canvas;\r\n        this.ctx = ctx;\r\n    }\r\n\r\n    clear(){\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    drawFrame(centerPos = null, spriteFrame = null){\r\n        //参考：context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\r\n        this.ctx.drawImage(\r\n            GetSpriteFrameBitmapData(spriteFrame),\r\n            GetSpriteFrameStartX(spriteFrame), GetSpriteFrameStartY(spriteFrame), GetSpriteFrameWidth(spriteFrame), GetSpriteFrameHeight(spriteFrame),\r\n            centerPos.x - GetSpriteFrameHalfWidth(spriteFrame), centerPos.y - GetSpriteFrameHalfHeight(spriteFrame), GetSpriteFrameWidth(spriteFrame), GetSpriteFrameHeight(spriteFrame));\r\n    }\r\n\r\n    drawRect(centerPos = null, rect = null){\r\n        this.ctx.strokeRect(\r\n            centerPos.x - GetRectHalfWidth(rect), centerPos.y - GetRectHalfHeight(rect),\r\n            GetRectWidth(rect), GetRectHeight(rect));\r\n    }\r\n\r\n    drawLine(startPos = null, endPos = null){\r\n        let ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPos.x, startPos.y);\r\n        ctx.lineTo(endPos.x, endPos.y);\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawCircle(centerPos = null, radius = 0){\r\n        let ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.arc(centerPos.x, centerPos.y, radius, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n    }\r\n\r\n    loadResource(imgSrc = "", onLoadCallback = null){\r\n        let img = new Image();\r\n        img.src = imgSrc;\r\n        img.onload = function () {\r\n            onLoadCallback(img);\r\n        }\r\n    }\r\n\r\n    onKeyCallback(keyDownCallback = null, keyUpCallback = null){\r\n        canvasOnKeyCallback(keyDownCallback, keyUpCallback);\r\n    }\r\n\r\n    onTouchCallback(touchOnCallback = null, touchOverCallback = null){\r\n        canvasOnMouseCallback(this, touchOnCallback, touchOverCallback);\r\n    }\r\n\r\n    start(onEnterFrameCallback = null){\r\n        runTick2(this.fps, onEnterFrameCallback);\r\n    }\r\n}\r\n\r\n\r\nfunction NewH5Engine(width = 0, height = 0, fps = 0){\r\n    let canvas = document.getElementById("canvas");\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    let ctx = canvas.getContext("2d");\r\n    ctx.strokeStyle="#0000ff";          //画矩形框用的\r\n    return new model_H5Engine(fps, canvas, ctx);\r\n}\r\n\r\n\r\n\r\n\r\nconst Radius = Math.PI/180;\r\nfunction DrawImageWithAngle(angle = 0, imgData, sx = 0, sy = 0, swidth = 0, sheight = 0, x = 0, y = 0, width = 0, height = 0) {\r\n    let ctx = _engine.ctx;\r\n    ctx.save();\r\n    ctx.translate(x + width/2, y + height/2);\r\n    ctx.rotate(angle * Radius);\r\n    DrawImage(imgData, sx, sy, swidth, sheight, -width/2, -height/2, width, height);\r\n    ctx.restore();\r\n\r\n    // ctx.translate(100, 100);\r\n\t// ctx.rotate(90 * Math.PI/180);\t//以上面的偏移点为准，进行旋转\r\n\t// ctx.drawImage(i, 187, 0, 186, 130, -0, -0, 100, 100);\r\n}\n// CONCATENATED MODULE: ./src/framework/lib/engine/utils.js\n\r\n\r\nconst EngineWeb = 0;\r\n\r\n/**\r\n * @param {*} options\r\n * {\r\n *      type : 0,\r\n *      width : 400,\r\n *      height : 400,\r\n *      fps : 60,\r\n *      keyDownHandler : func,\r\n *      keyUpHanler : func,\r\n *      mousedownHandler : func,\r\n *      mouseupHandler : func\r\n * }\r\n */\r\nfunction CreateEngineWithData(options = null, width = 0, height = 0, keyDownHandler = null, keyUpHanler = null, touchOnCallback = null, touchOverCallback = null){\r\n    //默认值\r\n    options = options ? options : {};\r\n    // let width = options[\'width\'];\r\n    // width = width ? width : 400;\r\n    // let height = options[\'height\'];\r\n    // height = height ? height : 400;\r\n    let fps = options[\'fps\'];\r\n    fps = fps ? fps : 60;\r\n    let type = options[\'type\'];\r\n    type = type ? type : EngineWeb;\r\n\r\n    let engine = null;\r\n    switch(type){\r\n        case EngineWeb:\r\n            engine = NewH5Engine(width, height, fps);\r\n            break;\r\n        default:\r\n            //error log\r\n            return null;\r\n    }\r\n\r\n    //注册按键回调\r\n    if(keyDownHandler && keyUpHanler){\r\n        engine.onKeyCallback(keyDownHandler, keyUpHanler);\r\n    }\r\n    if(touchOnCallback && touchOverCallback){\r\n        engine.onTouchCallback(touchOnCallback, touchOverCallback);\r\n    }\r\n    return engine;\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/director/service/init.js\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 通过参数配置初始化系统资源\r\n * options {\r\n *      debug : false,\r\n *      fps : 60,\r\n *      textures : []格式见LoadResource()内\r\n *      screen-width : 800,\r\n *      screen-height : 800,\r\n *      camera : {},\r\n *      engine : {},\r\n *      layers : [\r\n *          {\r\n *              type : 1 格式参考tilemap一节\r\n *          }\r\n *      ]\r\n *      collide : {}\r\n * }\r\n */\r\nfunction initGame(options = null) {\r\n    //默认值\r\n    let screenWidth = options[\'screen-width\'];\r\n    screenWidth = screenWidth && screenWidth > 0 ? screenWidth : 800;\r\n    let screenHeight = options[\'screen-height\'];\r\n    screenHeight = screenHeight && screenHeight > 0 ? screenHeight : 800;\r\n\r\n    //摄像机\r\n    SetDefaultCamera(\r\n        CreateCameraWithData(options[\'camera\'], screenWidth, screenHeight));\r\n\r\n    //引擎\r\n    SetEngine(\r\n        CreateEngineWithData(options[\'engine\'], screenWidth, screenHeight, options.keyDownHandler, options.keyUpHanler, options.touchOnCallback, options.touchOverCallback));\r\n    \r\n    //系统\r\n    initSystems(options[\'debug\']);\r\n\r\n    //开启碰撞系统\r\n    if(options.collide){\r\n        OpenCollider(options.collide);\r\n\r\n        // if(options.useTileCombine){\r\n        //     let resultNodes = CreateCombineNodes(tilemap, collide.boxHandler);\r\n        //     resultNodes.forEach(result => {\r\n        //         collide.loadCallback(result.value, result.rect);\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    //自定义数据等\r\n    initDef(options[\'def\']);\r\n    initDatas(options[\'datas\']);\r\n}\r\n\r\nfunction initDef(options = null){\r\n    for(let key in options){\r\n        SetDef(key, options[key]);\r\n    }\r\n}\r\n\r\n/**\r\n * TODO 临时方法，以后优化\r\n * @param {*} options \r\n */\r\nfunction initDatas(datas = null){\r\n    if(!datas || datas.length == 0){\r\n        return;\r\n    }\r\n    datas.forEach(data => {\r\n        initDataObj(data);\r\n    });\r\n}\r\nfunction initDataObj(options = null){\r\n    let dataObj = null;\r\n    if(options[\'tilemap\']){\r\n        dataObj = CreateTileMapWithData(options[\'tilemap\'], options[\'tilemap\'].onCeate);\r\n    }\r\n    let name = options[\'name\'];\r\n    if(name){\r\n        SetData(name, dataObj);\r\n    }\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/director/boot.js\n\r\n\r\n\r\n\r\n\r\n/**\r\n * options {\r\n *      textures : 格式见LoadResource()内\r\n *      screen : {\r\n *          width : 800,\r\n *          height : 800\r\n *      },\r\n *      fps : 60,\r\n *      debug : false,\r\n *      camera : {\r\n *          x : 0,\r\n *          y : 0\r\n *      },\r\n *      tilemap : 格式参考tilemap一节\r\n *      keyHandler : function(type, keyCode)   type=1 = down, type=2 = up\r\n *      collide : {\r\n *          useBox : false,\r\n *          useGroup : false,\r\n *          pairs : [\r\n *              {\r\n *                  team1 : 1,\r\n *                  team2 : 2\r\n *              }\r\n *          ],\r\n *          handler : function(dt, collider1, collider2)\r\n *      }\r\n * }\r\n * TODO scene可以是一个action?\r\n */\r\nfunction Start(options = null, scene = null){\r\n    options = options ? options : {};\r\n    if(options[\'textures\']){\r\n        loadResource(options[\'textures\'], null, () => {\r\n            initGame(options);\r\n            runWithScene(scene);\r\n        });\r\n    }else{\r\n        initGame(options);\r\n        runWithScene(scene);\r\n    }\r\n}\r\n\r\nfunction Stop(){\r\n    GetScene().onEnd();\r\n    //stopSystems();\r\n    stopSystem();\r\n    StopEngine(getEngine());\r\n}\r\n\r\n\r\n/**\r\n * 加载资源，创建精灵帧\r\n * textures : [\r\n *          {\r\n *              img : "res/a.png",\r\n *              frames : [\r\n *                  {\r\n *                      name : "walk1"\r\n *                      textureArea : {\r\n *                          x : 0,\r\n *                          y : 0,\r\n *                          width : 0,\r\n *                          height : 0\r\n *                      }\r\n *                  }\r\n *              ]\r\n *          }\r\n *      ],\r\n */\r\nfunction loadResource(texturesData = null, OnloadCallback = null, OnCompleteCallback = null){\r\n    //加载图像并创建显示帧\r\n    if(!texturesData || texturesData.length == 0){\r\n        return;\r\n    }\r\n    let _count = 0;\r\n    texturesData.forEach(t =>{\r\n        EngineLoadResource(GetEngine(), t.img, bitmapData => {\r\n            let bitmap = CreateBitmap(bitmapData, bitmapData.width, bitmapData.height);\r\n            t.frames.forEach(frameData => {\r\n                createSpriteFrameWithData(frameData.name, bitmap, frameData.textureArea);\r\n            });\r\n            _count++;\r\n            if(OnloadCallback){\r\n                OnloadCallback(_count);\r\n            }\r\n            if(texturesData.length == _count && OnCompleteCallback){\r\n                OnCompleteCallback();\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\nfunction createSpriteFrameWithData(name = "", bitmap = null, textureAreaData = null){\r\n    if(name == "" || !bitmap || !textureAreaData){\r\n        console.err("error param.");\r\n        return null;\r\n    }\r\n    let x = textureAreaData[\'x\'];\r\n    let y = textureAreaData[\'y\'];\r\n    let width = textureAreaData[\'width\'];\r\n    let height = textureAreaData[\'height\'];\r\n    if(!width || !height){\r\n        return null;\r\n    }\r\n    let f = CreateSpriteFrame(name, bitmap, x, y, width, height);\r\n    SetSpriteFrame(name, f);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/framework/lib/view/utils.js\n\r\n\r\n\r\n\r\n/**\r\n * 加入渲染队列\r\n * layerOrder = 图层顺序，数值从低到高顺序渲染\r\n * order = 自己所在图层内的顺序\r\n * TODO 需要判断重复性，如一个entityId多次用了同样的sprite，相互覆盖，造成浪费\r\n */\r\nfunction AddDisplayer(spriteFrame = null, entityId = 0, layerOrder = 0, order = 0, offset = null) {\r\n    let ds = NewDisplayer(entityId, spriteFrame, offset, order, layerOrder);\r\n    AddToLayer(ds);\r\n    return ds;\r\n}\r\n\r\nfunction RemoveDisplayer(displayer = null) {\r\n    RemoveFromLayer(displayer);\r\n}\r\n\r\n\n// CONCATENATED MODULE: ./src/main.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//谨记数据驱动，分清业务配置和框架逻辑配置\r\nvar main_options = Object.assign(src_data, {\r\n    touchOnCallback : main_touchOnCallback,\r\n    touchOverCallback : main_touchOverCallback,\r\n});\r\nmain_options.tilemap.onCreate = function(data = null, tilemap = null, grid = null){\r\n    console.log(data);\r\n    initDisplay(data, tilemap, grid);\r\n}\r\n\r\nfunction main_touchOnCallback(x = 0, y = 0){\r\n    console.log(x, y);\r\n}\r\nfunction main_touchOverCallback(x = 0, y = 0){\r\n\r\n}\r\n\r\nclass MyScene {\r\n    onStart(){\r\n        //draw();\r\n    }\r\n    onUpdate(dt = 0){\r\n        main_draw();\r\n    }\r\n}\r\n\r\nfunction main_draw(){\r\n    drawTile();\r\n    drawCenter();\r\n}\r\n\r\nfunction drawCenter(){\r\n    DrawCircle(NewPos(), 3);\r\n    DrawRect(NewPos(), geometric_NewRect(\r\n        GetCameraWidth(\r\n            GetDefaultCamera()),\r\n        GetCameraHeight(\r\n            GetDefaultCamera())));\r\n}\r\n\r\nfunction drawTile(){\r\n    let tilemap = GetData("tile1");\r\n    GridMapIterator(tilemap, grid => {\r\n        let pos = GetTileGridCenter(tilemap, grid);\r\n        let halfWidth = GetHalfGridWidth(grid);\r\n        let width = GetGridWidth(grid);\r\n        console.log("g[%d, %d]: (%d, %d), %d %d", grid.rowIndex, grid.colIndex, pos.x, pos.y, halfWidth, width);\r\n        //DrawRect(pos, NewRect(width, width));\r\n        testIso(pos, halfWidth);\r\n    });\r\n}\r\n\r\nfunction testIso(pos = null, halfWidth = 0){\r\n    let pos1 = NewPos(pos.x - halfWidth, pos.y - halfWidth);\r\n    let pos1iso = getIso(pos1);\r\n    let pos2 = NewPos(pos.x + halfWidth, pos.y - halfWidth);\r\n    let pos2iso = getIso(pos2);\r\n    let pos3 = NewPos(pos.x - halfWidth, pos.y + halfWidth);\r\n    let pos3iso = getIso(pos3);\r\n    let pos4 = NewPos(pos.x + halfWidth, pos.y + halfWidth);\r\n    let pos4iso = getIso(pos4);\r\n    console.log("p1:(%d, %d), iso:(%d, %d)", pos1.x ,pos1.y, pos1iso.x, pos1iso.y);\r\n    console.log("p2:(%d, %d), iso:(%d, %d)", pos2.x ,pos2.y, pos2iso.x, pos2iso.y);\r\n    console.log("p3:(%d, %d), iso:(%d, %d)", pos3.x ,pos3.y, pos3iso.x, pos3iso.y);\r\n    console.log("p4:(%d, %d), iso:(%d, %d)", pos4.x ,pos4.y, pos4iso.x, pos4iso.y);\r\n    // DrawLine(pos1iso, pos2iso);\r\n    // DrawLine(pos2iso, pos3iso);\r\n    // DrawLine(pos3iso, pos4iso);\r\n    // DrawLine(pos4iso, pos1iso);\r\n    DrawLine(pos1iso, pos2iso);\r\n    DrawLine(pos2iso, pos4iso);\r\n    DrawLine(pos4iso, pos3iso);\r\n    DrawLine(pos3iso, pos1iso);\r\n}\r\n\r\nfunction getIso(pos = null){\r\n    return NewPos(\r\n        (pos.x - pos.y),\r\n        (pos.x + pos.y) * 0.5\r\n    );\r\n}\r\n\r\n/**\r\n * "1" : {\r\n\t\t\t"display" : {\r\n\t\t\t\t"isometric" : true,\r\n\t\t\t\t"frame" : "building1"\r\n\t\t\t}\r\n\t\t},\r\n */\r\nfunction initDisplay(data = null, tilemap = null, grid = null){\r\n    let d = data[\'displayer\'];\r\n    let id = NewEntityId();\r\n    GetRenderComponent(id, {isometrics:true});\r\n    let pos = GetTileGridCenter(tilemap, grid);\r\n    SetUnitPos(id, pos.x, pos.y);\r\n    AddDisplayer(\r\n        GetSpriteFrame(d[\'frame\']), id);\r\n}\r\n\r\n\r\n\r\n(function (){\r\n    console.log(main_options);\r\n    Start(main_options, new MyScene());\r\n})()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);