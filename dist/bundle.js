!function(t){var n={};function l(e){if(n[e])return n[e].exports;var u=n[e]={i:e,l:!1,exports:{}};return t[e].call(u.exports,u,u.exports,l),u.l=!0,u.exports}l.m=t,l.c=n,l.d=function(t,n,e){l.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,n){if(1&n&&(t=l(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(l.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var u in t)l.d(e,u,function(n){return t[n]}.bind(null,u));return e},l.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(n,"a",n),n},l.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},l.p="",l(l.s=1)}([function(t){t.exports={debug:!0,def:{0:{},1:{color:"#333333"}},datas:[{name:"tile1",tilemap:{data:[1,1,1,1,0,1,1,1,1],columns:3,gridWidth:80,gridHeight:80}}]}},function(t,n,l){"use strict";l.r(n);var e=l(0),u=new Map;var r=new Map;var i=null;function o(){return i}var s=null;function a(){return s}class c{constructor(t=60){this.fps=t,this.tick=1e3/t}clear(){}drawFrame(t=null,n=null){}drawRect(t=null,n=null){}drawLine(t=null,n=null){}drawCircle(t=null,n=0){}loadResource(t="",n=null){}onKeyCallback(t=null,n=null){}onTouchCallback(t=null,n=null){}start(t=null){}}class d{constructor(t=0,n=0){this.x=t,this.y=n}}function h(t=0,n=0){return new d(t,n)}function f(t=null,n=null){return h(t.x-n.x,t.y-n.y)}class p{constructor(t=0,n=0){this.x=t,this.y=n}}function g(t=0,n=0){return new p(t,n)}class x{constructor(t=0,n=0){this.width=t,this.height=n}}function y(t=0,n=0){return 0==t||0==n?(console.error("rect param error. width:%d, height:%d",t,n),null):new x(t,n)}function w(t=null){return t.width}function m(t=null){return t.height}function v(t=null){return.5*t.width}function b(t=null){return.5*t.height}class k{constructor(t=null,n=null){this.pos=t,this.offset=n}}function _(t=null){return h(t.pos.x+t.offset.x,t.pos.y+t.offset.y)}function C(t=0){return Math.trunc(t)}class R extends k{constructor(t=null,n=null,l=null){super(t,n),this.rect=l}}function H(t=null,n=null,l=null){return n=n||g(),new R(t,n,l)}function M(t=null){return t.rect}function P(t=null){return _(t)}function I(t=null){let n=P(t);return h(n.x-v(t.rect),n.y-b(t.rect))}class L{constructor(t=null,n=null){this.rectPosRel=t,this.screenOffset=n}}function O(t=null,n=0,l=0){let e=(t=t||{style:0,datas:[{x:0,y:0}]}).datas[0];return function(t=0,n=0,l=0,e=0){let u=H(h(t,n),null,y(l,e));return new L(u)}(e.x,e.y,n,l)}function W(t=null,n=null){return f(n,function(t=null){return I(t.rectPosRel)}(t))}function G(){!function(t=null){t.clear()}(a())}function S(t=null,n=null){!function(t=null,n=null,l=null){let e=W(t,n);!function(t=null,n=null,l=null){t.drawFrame(n,l)}(a(),e.x,e.y)}(o(),t,n)}function T(t=null,n=null){!function(t=null,n=null,l=null){let e=W(t,n);!function(t=null,n=null,l=null){t.drawRect(n,l)}(a(),e,l)}(o(),t,n)}function E(t=null,n=null){!function(t=null,n=null,l=null){let e=W(t,n),u=W(t,l);!function(t=null,n=null,l=null){t.drawLine(n,l)}(a(),e,u)}(o(),t,n)}function j(t=null,n=0){!function(t=null,n=null,l=0){let e=W(t,n);!function(t=null,n=null,l=0){t.drawCircle(n,l)}(a(),e,l)}(o(),t,n)}class D{constructor(){}get(t=0){}firsr(){}last(){}size(){}add(t=null){}push(t=null){}insert(t=null,n=0){}pop(){}pull(){}remove(t=0){}iterator(t=null){}iteratorReverse(t=null){}iteratorCompare(t=null){}}function z(t=null,n=null){t&&n&&t.iterator(n)}class U{constructor(t=null,n=null,l=null,e=0){this.data=t,this.prep=n,this.next=l,this.order=e}}class F extends D{constructor(){super(),this.head=new U,this.tail=new U,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}get(t=0){let n=this._map.get(t);return n?n.data:null}first(){let t=this.head.next;return t==this.tail?null:t.data}last(){let t=this.tail.prep;return t==this.head?null:t.data}size(){return this._size}add(t=null){B(this,t,this.tail)}push(t=null){B(this,t,this.head.next)}insert(t=null,n=0){let l=this.head.next;for(;l!=this.tail&&!(n<l.order);)l=l.next;B(this,t,l,n)}pop(){K(this,this.head.next)}pull(){K(this,this.tail.prep)}remove(t=0){K(this,this._map.get(t))}iterator(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail&&!t(n.data);)n=n.next;for(this._lock=!1;this._delList.length>0;)X(this,this._delList.pop())}iteratorReverse(t=null){this._lock=!0;let n=this.tail.prep;for(;n!=this.head&&!t(n.data);)n=n.prep;for(this._lock=!1;this._delList.length>0;)X(this,this._delList.pop())}iteratorCompare(t=null){this._lock=!0;let n=this.head.next;for(;n!=this.tail;){let l=n.next;for(;l!=this.tail&&!t(n.data,l.data);)l=l.next;n=n.next}for(this._lock=!1;this._delList.length>0;)X(this,this._delList.pop())}}function B(t=null,n=null,l=null,e=0){let u=l.prep,r=new U(n,u,l,e);u.next=r,l.prep=r,t._map.set(n.id,r),t._size++}function K(t=null,n=null){!t||!n||t._size<=0||(t._lock?t._delList.push(n):X(t,n))}function X(t=null,n=null){t._map.delete(keyId);let l=n.prep,e=n.next;l.next=e,e.prep=l,t._size--}function Y(){return new F}var A=1;function q(){return A++}class J{constructor(){this.id=q()}onStart(){}onUpdate(t=0){}onEnd(){}}var N=Y();class Q{constructor(t=null,n=0,l=0){this.data=t,this.width=n,this.height=l}}function V(t=null){return GetRectWidth(t.rect)}function Z(t=null){return GetRectHeight(t.rect)}Y();function $(t=null){return t.spriteFrame}function tt(t=null){let n=function(t=null){return t.pos}(displayTuple.rectPosRel),l=function(t=null){return t.offset}(displayTuple.rectPosRel);!function(t=null,n=0,l=0){t.x=n,t.y=l}(t.isoPos,.5*(n.x-n.y)+l.x,.5*(n.x+n.y)+l.y)}class nt extends J{onUpdate(t=0){G(),function(t=null){z(N,n=>{z(n.list,n=>{t(n)})})}(t=>{IsDisplayISOmetrics(t)?function(t=null){tt(t),S(function(t=null){return t.isoPos}(t),$(t))}(camera):function(t=null){S(function(t=null){return _(t.rectPosRel)}(t),$(t))}(camera)})}}var lt=null;var et=Y(),ut=null;function rt(t=!1){lt||(lt=new nt),ut=lt}var it=16,ot=41,st=0,at=0;function ct(t=null){z(et,t=>{t.onStart()}),ut.onStart(),t.onStart(),function(t=null,n=null){t.start(n)}(a(),n=>{(st+=n)>=it&&(st-=it,t.onUpdate(n),z(et,t=>{t.onUpdate(n)})),(at+=n)>=ot&&(at-=ot,ut.onUpdate(n))})}class dt{constructor(t=0,n=0,l=null){this.width=t,this.height=n,this.data=l}}class ht{getData(t=null){}setData(t=null,n=null){}getGrid(t=null){}getGridMapWidth(){}getGridMapHeight(){}iterator(t=null){}}function ft(t=null){return t.width}function pt(t=null){return.5*function(t=null){return t.getGridMapWidth()}(t)}function gt(t=null){return.5*function(t=null){return t.getGridMapHeight()}(t)}function xt(t=null,n=null){t.iterator(n)}class yt extends dt{constructor(t=0,n=0,l=0,e=0,u=null){super(t,n,u),this.rowIndex=l,this.colIndex=e}}class wt extends ht{constructor(t=null,n=0,l=0,e=0,u=0,r=null){super(),this.pos=t,this.rows=n,this.columns=l,this.gridWidth=e,this.gridHeight=u,this.grids=r}getData(t=null){let n=mt(t,this);return n?n.data:null}setData(t=null,n=null){let l=mt(t,this);l&&(l.data=n)}getGrid(t=null){return mt(t,this)}getGridMapWidth(){return this.columns*this.gridWidth}getGridMapHeight(){return this.rows*this.gridHeight}iterator(t=null){this.grids.forEach(n=>{t(n)})}}function mt(t=null,n=null){let l=f(t,n.pos);if(!function(t=0,n=0,l=null){return t>0&&t<l.getGridMapWidth()&&n>0&&n<l.getGridMapHeight()}(l.x,l.y,n))return null;let e=C(l.x/gridmap.gridWidth),u=C(l.y/gridmap.gridHeight);return gridmap.grids[u*gridmap.columns+e]}function vt(t=null){return h(t.pos.x-pt(t),t.pos.y-gt(t))}function bt(t=null,n=null){!function(t=null){(t=Object.assign({columns:1,gridWidth:32,gridHeight:32,x:0,y:0,data:[0]},t)).gridWidth=t.gridWidth>0?t.gridWidth:32,t.gridHeight=t.gridHeight>0?t.gridHeight:32}(t);let l=t.columns,e=C(t.data.length/l);if(e*l!=t.data.length)return console.error("error param: len(grids): %d, columns: %d",t.data.length,l),null;let u=function(t=0,n=0,l=0,e=0,u=null){let r=[];for(let u=0;u<t;u++)for(let t=0;t<n;t++)r.push(new yt(l,e,u,t));return u=u||h(),new wt(u,t,n,l,e,r)}(e,l,t.gridWidth,t.gridHeight,h(t.x,t.y));return n&&xt(u,e=>{let r=t.data[e.rowIndex*l+e.colIndex];n(r,u,e)}),u}var kt=!1;var _t=null,Ct=(new Date).getTime();var Rt=new Map;class Ht extends c{constructor(t=60,n=null,l=null){super(t),this.canvas=n,this.ctx=l}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}drawFrame(t=null,n=null){this.ctx.drawImage(function(t=null){return t.bitmap.data}(n),function(t=null){return t.bitmapX}(n),function(t=null){return t.bitmapY}(n),V(n),Z(n),t.x-function(t=null){return GetRectHalfWidth(t.rect)}(n),t.y-function(t=null){return GetRectHalfHeight(t.rect)}(n),V(n),Z(n))}drawRect(t=null,n=null){this.ctx.strokeRect(t.x-v(n),t.y-b(n),w(n),m(n))}drawLine(t=null,n=null){let l=this.ctx;l.beginPath(),l.moveTo(t.x,t.y),l.lineTo(n.x,n.y),l.stroke()}drawCircle(t=null,n=0){let l=this.ctx;l.beginPath(),l.arc(t.x,t.y,n,0,2*Math.PI),l.stroke()}loadResource(t="",n=null){let l=new Image;l.src=t,l.onload=function(){n(l)}}onKeyCallback(t=null,n=null){!function(t=null,n=null){window.addEventListener("keydown",n=>{let l=n.keyCode;Rt.get(l)||(Rt.set(l,1),t(n.keyCode))}),window.addEventListener("keyup",t=>{let l=t.keyCode;Rt.delete(l),n(t.keyCode)})}(t,n)}onTouchCallback(t=null,n=null){!function(t=null,n=null,l=null){t.canvas.addEventListener("mousedown",t=>{let l=canvas.getBoundingClientRect(),e=t.clientX-l.left*(canvas.width/l.width),u=t.clientY-l.top*(canvas.height/l.height);n(e,u)}),t.canvas.addEventListener("mouseup",t=>{let n=canvas.getBoundingClientRect(),e=t.clientX-n.left*(canvas.width/n.width),u=t.clientY-n.top*(canvas.height/n.height);l(e,u)})}(this,t,n)}start(t=null){!function(t=0,n=null){kt=!1,setInterval(()=>{_t=(new Date).getTime(),kt||n(_t-Ct),Ct=(new Date).getTime()},1e3/t)}(this.fps,t)}}Math.PI;const Mt=0;function Pt(t=null,n=0,l=0,e=null,u=null,r=null,i=null){let o=(t=t||{}).fps;o=o||60;let s=t.type,a=null;switch(s=s||Mt){case Mt:a=function(t=0,n=0,l=0){let e=document.getElementById("canvas");e.width=t,e.height=n;let u=e.getContext("2d");return u.strokeStyle="#0000ff",new Ht(l,e,u)}(n,l,o);break;default:return null}return e&&u&&a.onKeyCallback(e,u),r&&i&&a.onTouchCallback(r,i),a}function It(t=null){let n=t["screen-width"];n=n&&n>0?n:800;let l=t["screen-height"];l=l&&l>0?l:800,function(t=null){i=t}(O(t.camera,n,l)),function(t=null){s=t}(Pt(t.engine,n,l,t.keyDownHandler,t.keyUpHanler,t.touchOnCallback,t.touchOverCallback)),rt(t.debug),t.collide&&OpenCollider(t.collide),function(t=null){if(!t||0==t.length)return;t.forEach(t=>{!function(t=null){let n=null;t.tilemap&&(n=bt(t.tilemap));let l=t.name;l&&function(t="",n=null,l=!0){r.get(t)&&l?console.error("data: %s exists.",t):r.set(t,n)}(l,n)}(t)})}(t.datas)}function Lt(t=null,n=null){(t=t||{}).textures?function(t=null,n=null,l=null){if(!t||0==t.length)return;let e=0;t.forEach(r=>{EngineLoadResource(a(),r.img,i=>{let o=function(t=null,n=0,l=0){return new Q(t,n,l)}(i,i.width,i.height);r.frames.forEach(t=>{!function(t="",n=null,l=null){if(""==t||!n||!l)return console.err("error param."),null;let e=l.x,r=l.y,i=l.width,o=l.height;if(!i||!o)return null;let s=CreateSpriteFrame(t,n,e,r,i,o);!function(t="",n=null,l=!0){u.get(t)&&l?console.error("frame: %s exists.",t):u.set(t,n)}(t,s)}(t.name,o,t.textureArea)}),e++,n&&n(e),t.length==e&&l&&l()})})}(t.textures,null,()=>{It(t),ct(n)}):(It(t),ct(n))}var Ot=Object.assign(e,{touchOnCallback:function(t=0,n=0){console.log(t,n)},touchOverCallback:function(t=0,n=0){}});class Wt{onStart(){}onUpdate(t=0){(function(){let t=function(t=""){return r.get(t)}("tile1");xt(t,n=>{let l=function(t=null,n=null){let l=vt(t);return h(l.x+t.gridWidth*(n.colIndex+.5),l.y+t.gridHeight*(n.rowIndex+.5))}(t,n),e=function(t=null){return.5*ft(t)}(n),u=ft(n);console.log("g[%d, %d]: (%d, %d), %d %d",n.rowIndex,n.colIndex,l.x,l.y,e,u),function(t=null,n=0){let l=h(t.x-n,t.y-n),e=Gt(l),u=h(t.x+n,t.y-n),r=Gt(u),i=h(t.x-n,t.y+n),o=Gt(i),s=h(t.x+n,t.y+n),a=Gt(s);console.log("p1:(%d, %d), iso:(%d, %d)",l.x,l.y,e.x,e.y),console.log("p2:(%d, %d), iso:(%d, %d)",u.x,u.y,r.x,r.y),console.log("p3:(%d, %d), iso:(%d, %d)",i.x,i.y,o.x,o.y),console.log("p4:(%d, %d), iso:(%d, %d)",s.x,s.y,a.x,a.y),E(e,r),E(r,a),E(a,o),E(o,e)}(l,e)})})(),j(h(),3),T(h(),y(function(t=null){return w(M(t.rectPosRel))}(o()),function(t=null){return m(M(t.rectPosRel))}(o())))}}function Gt(t=null){return h(t.x-t.y,.5*(t.x+t.y))}console.log(Ot),Lt(Ot,new Wt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,