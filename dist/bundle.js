!function(t){var e={};function n(l){if(e[l])return e[l].exports;var i=e[l]={i:l,l:!1,exports:{}};return t[l].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,l){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:l})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var l=Object.create(null);if(n.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(l,i,function(e){return t[e]}.bind(null,i));return l},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t){t.exports={debug:!0,def:{0:{},1:{color:"#333333"}},datas:[{name:"tile1",tilemap:{data:[1,1,1,1,0,1,1,1,1],columns:3,gridWidth:80,gridHeight:80}}]}},function(t,e,n){"use strict";n.r(e);var l=n(0),i=new Map;var r=new Map;var u=null;function a(){return u}var s=null;function o(){return s}function h(t=null,e=null){!function(t=null,e=null,n=null){let l=ToCameraPosStart(t,e);!function(t=null,e=null,n=null){t.drawRect(e,n)}(o(),l,n)}(a(),t,e)}function c(t=null){let e=t["screen-width"];e=e&&e>0?e:800;let n=t["screen-height"];n=n&&n>0?n:800,setDefaultCamera(CreateCameraWithData(t.camera,e,n)),setEngine(CreateEngineWithData(t.engine,e,n)),initSystems(t.debug),t.collide&&OpenCollider(t.collide),function(t=null){if(!t||0==t.length)return;t.forEach(t=>{!function(t=null){let e=null;t.tilemap&&(e=CreateTileMapWithData(t.tilemap));let n=t.name;n&&setDataByName(n,e)}(t)})}(t.datas)}class d{constructor(){}get(t=0){}firsr(){}last(){}size(){}add(t=null){}push(t=null){}insert(t=null,e=0){}pop(){}pull(){}remove(t=0){}iterator(t=null){}iteratorReverse(t=null){}iteratorCompare(t=null){}}function p(t=null,e=null){t&&e&&t.iterator(e)}class f{constructor(t=null,e=null,n=null,l=0){this.data=t,this.prep=e,this.next=n,this.order=l}}class g extends d{constructor(){this.head=new f,this.tail=new f,this.head.next=this.tail,this.tail.prep=this.head,this._map=new Map,this._size=0,this._delList=[],this._curr=this.head,this._lock=!1}get(t=0){let e=this._map.get(t);return e?e.data:null}first(){let t=this.head.next;return t==this.tail?null:t.data}last(){let t=this.tail.prep;return t==this.head?null:t.data}size(){return this._size}add(t=null){m(this,t,this.tail)}push(t=null){m(this,t,this.head.next)}insert(t=null,e=0){let n=this.head.next;for(;n!=this.tail&&!(e<n.order);)n=n.next;m(this,t,n,e)}pop(){_(this,this.head.next)}pull(){_(this,this.tail.prep)}remove(t=0){_(this,this._map.get(t))}iterator(t=null){this._lock=!0;let e=this.head.next;for(;e!=this.tail&&!t(e.data);)e=e.next;for(this._lock=!1;this._delList.length>0;)x(this,this._delList.pop())}iteratorReverse(t=null){this._lock=!0;let e=this.tail.prep;for(;e!=this.head&&!t(e.data);)e=e.prep;for(this._lock=!1;this._delList.length>0;)x(this,this._delList.pop())}iteratorCompare(t=null){this._lock=!0;let e=this.head.next;for(;e!=this.tail;){let n=e.next;for(;n!=this.tail&&!t(e.data,n.data);)n=n.next;e=e.next}for(this._lock=!1;this._delList.length>0;)x(this,this._delList.pop())}}function m(t=null,e=null,n=null,l=0){let i=n.prep,r=new f(e,i,n,l);i.next=r,n.prep=r,t._map.set(e.id,r),t._size++}function _(t=null,e=null){!t||!e||t._size<=0||(t._lock?t._delList.push(e):x(t,e))}function x(t=null,e=null){t._map.delete(keyId);let n=e.prep,l=e.next;n.next=l,l.prep=n,t._size--}function v(){return new g}v();class w{constructor(t=null,e=0,n=0){this.data=t,this.width=e,this.height=n}}v();var y=v(),b=null;var S=16,C=41,k=0,L=0;function M(t=null){p(y,t=>{t.onStart()}),b.onStart(),t.onStart(),function(t=null,e=null){t.start(e)}(o(),e=>{(k+=e)>=S&&(k-=S,t.onUpdate(e),p(y,t=>{t.onUpdate(e)})),(L+=e)>=C&&(L-=C,b.onUpdate(e))})}function O(t=null,e=null){(t=t||{}).textures?function(t=null,e=null,n=null){if(!t||0==t.length)return;let l=0;t.forEach(r=>{EngineLoadResource(o(),r.img,u=>{let a=function(t=null,e=0,n=0){return new w(t,e,n)}(u,u.width,u.height);r.frames.forEach(t=>{!function(t="",e=null,n=null){if(""==t||!e||!n)return console.err("error param."),null;let l=n.x,r=n.y,u=n.width,a=n.height;if(!u||!a)return null;let s=CreateSpriteFrame(t,e,l,r,u,a);!function(t="",e=null,n=!0){i.get(t)&&n?console.error("frame: %s exists.",t):i.set(t,e)}(t,s)}(t.name,a,t.textureArea)}),l++,e&&e(l),t.length==l&&n&&n()})})}(t.textures,null,()=>{c(t),M(e)}):(c(t),M(e))}function j(t=null){return t.width}class z{onStart(){!function(t=null,e=null){t.iterator(e)}(function(t=""){return r.get(t)}("tile1"),t=>{let e=GetTileGridCenter(t),n=(function(t=null){j(t)}(t),j(t));h(e,n)})}onUpdate(t=0){}}console.log(l),O(l,new z)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,